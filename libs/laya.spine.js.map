{"version":3,"file":"laya.spine.js","sources":["../../src/layaAir/laya/spine/ExternalSkin.ts","../../src/layaAir/laya/spine/ExternalSkinItem.ts","../../src/layaAir/laya/spine/SpineSkeletonRenderer.ts","../../src/layaAir/laya/spine/SpineSkeleton.ts","../../src/layaAir/laya/spine/SpineTexture.ts","../../src/layaAir/laya/spine/SpineTemplet.ts","../../src/layaAir/laya/spine/SpineTempletLoader.ts","../../src/layaAir/laya/spine/ModuleDef.ts"],"sourcesContent":["import { ILaya } from \"../../ILaya\";\r\nimport { Loader } from \"../net/Loader\";\r\nimport { ExternalSkinItem } from \"./ExternalSkinItem\";\r\nimport { SpineSkeleton } from \"./SpineSkeleton\";\r\nimport { SpineTemplet } from \"./SpineTemplet\";\r\n\r\nexport class ExternalSkin {\r\n    protected _source: string;\r\n    protected _templet: SpineTemplet;\r\n    protected _items: ExternalSkinItem[];\r\n    target: SpineSkeleton;\r\n\r\n    get source(): string {\r\n        return this._source;\r\n    }\r\n\r\n    set source(value: string) {\r\n        this._source = value;\r\n        if (value) {\r\n            ILaya.loader.load(value, Loader.SPINE).then((templet: SpineTemplet) => {\r\n                if (!this._source || templet && !templet.isCreateFromURL(this._source))\r\n                    return;\r\n\r\n                this.templet = templet;\r\n            });\r\n        }\r\n        else\r\n            this.templet = null;\r\n    }\r\n\r\n    set items(value: ExternalSkinItem[]) {\r\n        this._items = value;\r\n    }\r\n    get items() {\r\n        return this._items;\r\n    }\r\n\r\n\r\n    /**\r\n    * 得到动画模板的引用\r\n    * @return templet\r\n    */\r\n    get templet(): SpineTemplet {\r\n        return this._templet;\r\n    }\r\n    set templet(value: SpineTemplet) {\r\n        this.init(value);\r\n    }\r\n    protected init(templet: SpineTemplet): void {\r\n        this._templet = templet;\r\n        if (!this._templet) {\r\n            return;\r\n        }\r\n        this.flush();\r\n    }\r\n    flush() {\r\n        if (this.target && this.target.templet && this._items && this._templet && this._templet.skeletonData) {\r\n            if (null == (this.target.templet as any)._textures) return;\r\n            for (let i = this._items.length - 1; i >= 0; i--) {\r\n                let o = this._items[i];\r\n                let attachmentStr = o.attachment;\r\n                let slot = o.slot;\r\n                let skinStr = o.skin;\r\n\r\n                if (attachmentStr && slot && skinStr) {\r\n                    let attachment: spine.Attachment = null;\r\n                    let skins = this._templet.skeletonData.skins;\r\n                    for (let j = skins.length - 1; j >= 0; j--) {\r\n                        if (skins[j].name == skinStr) {\r\n                            let skin = skins[j];\r\n                            let attachments = skin.attachments;\r\n                            for (let j = attachments.length - 1; j >= 0; j--) {\r\n                                attachment = attachments[j][attachmentStr];\r\n                                if (attachment) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (attachment) {\r\n                        let regionPage = (attachment as any).region.page;\r\n                        (this.target.templet as any)._textures[regionPage.name] = regionPage.texture;\r\n                        let slotObj = this.target.getSkeleton().findSlot(slot);\r\n                        if (slotObj) {\r\n                            slotObj.setAttachment(attachment);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}","export class ExternalSkinItem {\r\n    protected _skin: string;\r\n    protected _slot: string;\r\n    protected _attachment: string;\r\n\r\n    get skin() {\r\n        return this._skin;\r\n    }\r\n    set skin(value: string) {\r\n        this._skin = value;\r\n    }\r\n    set slot(value: string) {\r\n        this._slot = value;\r\n    }\r\n    get slot() {\r\n        return this._slot;\r\n    }\r\n    set attachment(value: string) {\r\n        this._attachment = value;\r\n    }\r\n    get attachment() {\r\n        return this._attachment;\r\n    }\r\n\r\n}","import { Graphics } from \"../display/Graphics\";\r\nimport { Matrix } from \"../maths/Matrix\";\r\nimport { SpineTexture } from \"./SpineTexture\";\r\nimport { SpineTemplet } from \"./SpineTemplet\";\r\n\r\ninterface Renderable {\r\n    vertices: spine.ArrayLike<number>;\r\n    numVertices: number;\r\n    numFloats: number;\r\n}\r\n\r\nconst QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\r\n\r\nexport class SpineSkeletonRenderer {\r\n    premultipliedAlpha: boolean;\r\n    vertexEffect: spine.VertexEffect = null;\r\n    templet: SpineTemplet;\r\n\r\n    private tempColor = new spine.Color();\r\n    private tempColor2 = new spine.Color();\r\n    private vertices: ArrayLike<number>;\r\n    private vertexSize = 2 + 2 + 4;\r\n    private twoColorTint = false;\r\n    private renderable: Renderable;\r\n    private clipper: spine.SkeletonClipping;\r\n    private temp = new spine.Vector2();\r\n    private temp2 = new spine.Vector2();\r\n    private temp3 = new spine.Color();\r\n    private temp4 = new spine.Color();\r\n\r\n    constructor(templet: SpineTemplet, twoColorTint: boolean = true) {\r\n        this.twoColorTint = twoColorTint;\r\n        if (twoColorTint)\r\n            this.vertexSize += 4;\r\n        this.templet = templet;\r\n        this.vertices = templet.ns.Utils.newFloatArray(this.vertexSize * 1024);\r\n        this.renderable = { vertices: null, numVertices: 0, numFloats: 0 };\r\n        this.clipper = new templet.ns.SkeletonClipping();\r\n    }\r\n\r\n    draw(skeleton: spine.Skeleton, graphics: Graphics, slotRangeStart: number = -1, slotRangeEnd: number = -1) {\r\n        let clipper = this.clipper;\r\n        let premultipliedAlpha = this.premultipliedAlpha;\r\n        let twoColorTint = false;\r\n        let blendMode: spine.BlendMode = null;\r\n\r\n        let tempPos = this.temp;\r\n        let tempUv = this.temp2;\r\n        let tempLight = this.temp3;\r\n        let tempDark = this.temp4;\r\n\r\n        let renderable: Renderable = this.renderable;\r\n        let uvs: ArrayLike<number> = null;\r\n        let triangles: Array<number> = null;\r\n        let drawOrder = skeleton.drawOrder;\r\n        let attachmentColor: spine.Color = null;\r\n        let skeletonColor = skeleton.color;\r\n        let vertexSize = twoColorTint ? 12 : 8;\r\n        let inRange = false;\r\n\r\n        if (slotRangeStart == -1) inRange = true;\r\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\r\n            let clippedVertexSize = clipper.isClipping() ? 2 : vertexSize;\r\n            let slot = drawOrder[i];\r\n\r\n            if (slotRangeStart >= 0 && slotRangeStart == slot.data.index) {\r\n                inRange = true;\r\n            }\r\n\r\n            if (!inRange) {\r\n                clipper.clipEndWithSlot(slot);\r\n                continue;\r\n            }\r\n\r\n            if (slotRangeEnd >= 0 && slotRangeEnd == slot.data.index) {\r\n                inRange = false;\r\n            }\r\n\r\n            let attachment = slot.getAttachment();\r\n            let name: string = null;\r\n            let texture: SpineTexture;\r\n            if (attachment instanceof this.templet.ns.RegionAttachment) {\r\n                let region = <spine.RegionAttachment>attachment;\r\n                renderable.vertices = this.vertices;\r\n                renderable.numVertices = 4;\r\n                renderable.numFloats = clippedVertexSize << 2;\r\n                region.computeWorldVertices(slot.bone, renderable.vertices, 0, clippedVertexSize);\r\n                triangles = QUAD_TRIANGLES;\r\n                uvs = region.uvs;\r\n                name = region.region.renderObject.page.name;\r\n                texture = this.templet.getTexture(name);\r\n                attachmentColor = region.color;\r\n            } else if (attachment instanceof this.templet.ns.MeshAttachment) {\r\n                let mesh = <spine.MeshAttachment>attachment;\r\n                renderable.vertices = this.vertices;\r\n                renderable.numVertices = (mesh.worldVerticesLength >> 1);\r\n                renderable.numFloats = renderable.numVertices * clippedVertexSize;\r\n                if (renderable.numFloats > renderable.vertices.length) {\r\n                    renderable.vertices = this.vertices = this.templet.ns.Utils.newFloatArray(renderable.numFloats);\r\n                }\r\n                mesh.computeWorldVertices(slot, 0, mesh.worldVerticesLength, renderable.vertices, 0, clippedVertexSize);\r\n                triangles = mesh.triangles;\r\n                name = mesh.region.renderObject.page.name\r\n                texture = this.templet.getTexture(name);\r\n                uvs = mesh.uvs;\r\n                attachmentColor = mesh.color;\r\n            } else if (attachment instanceof this.templet.ns.ClippingAttachment) {\r\n                let clip = <spine.ClippingAttachment>(attachment);\r\n                clipper.clipStart(slot, clip);\r\n                continue;\r\n            } else {\r\n                clipper.clipEndWithSlot(slot);\r\n                continue;\r\n            }\r\n\r\n            if (texture != null) {\r\n                let slotColor = slot.color;\r\n                let finalColor = this.tempColor;\r\n                finalColor.r = skeletonColor.r * slotColor.r * attachmentColor.r;\r\n                finalColor.g = skeletonColor.g * slotColor.g * attachmentColor.g;\r\n                finalColor.b = skeletonColor.b * slotColor.b * attachmentColor.b;\r\n                finalColor.a = skeletonColor.a * slotColor.a * attachmentColor.a;\r\n                if (premultipliedAlpha) {\r\n                    finalColor.r *= finalColor.a;\r\n                    finalColor.g *= finalColor.a;\r\n                    finalColor.b *= finalColor.a;\r\n                }\r\n\r\n                let slotBlendMode = slot.data.blendMode;\r\n                if (slotBlendMode != blendMode) {\r\n                    blendMode = slotBlendMode;\r\n                }\r\n\r\n                if (clipper.isClipping()) {\r\n                    clipper.clipTriangles(renderable.vertices, renderable.numFloats, triangles, triangles.length, uvs, finalColor, null, twoColorTint);\r\n                    let clippedVertices = new Float32Array(clipper.clippedVertices);\r\n                    let clippedTriangles = clipper.clippedTriangles;\r\n                    let mVertices = [];\r\n                    let mUVs = [];\r\n                    let colorNum = 0xffffff;\r\n                    let alpha = 1;\r\n                    if (this.vertexEffect != null) {\r\n                        let vertexEffect = this.vertexEffect;\r\n                        let verts = clippedVertices;\r\n                        if (!twoColorTint) {\r\n                            for (let v = 0, n = clippedVertices.length; v < n; v += vertexSize) {\r\n                                tempPos.x = verts[v];\r\n                                tempPos.y = verts[v + 1];\r\n                                tempLight.set(verts[v + 2], verts[v + 3], verts[v + 4], verts[v + 5]);\r\n                                tempUv.x = verts[v + 6];\r\n                                tempUv.y = verts[v + 7];\r\n                                tempDark.set(0, 0, 0, 0);\r\n                                vertexEffect.transform(tempPos, tempUv, tempLight, tempDark);\r\n                                verts[v] = tempPos.x;\r\n                                verts[v + 1] = tempPos.y;\r\n                                verts[v + 2] = tempLight.r;\r\n                                verts[v + 3] = tempLight.g;\r\n                                verts[v + 4] = tempLight.b;\r\n                                verts[v + 5] = tempLight.a;\r\n                                verts[v + 6] = tempUv.x;\r\n                                verts[v + 7] = tempUv.y\r\n\r\n                                mVertices.push(verts[v], -verts[v + 1]);\r\n                                colorNum = (verts[v + 2] * 255 << 16) + (verts[v + 3] * 255 << 8) + verts[v + 4];\r\n                                alpha = verts[v + 5];\r\n                                mUVs.push(verts[v + 6], verts[v + 7]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let vi = 0;\r\n                        while (Number.isFinite(clippedVertices[vi + 6]) && Number.isFinite(clippedVertices[vi + 7])) {\r\n                            mVertices.push(clippedVertices[vi]);\r\n                            mVertices.push(-clippedVertices[vi + 1]);\r\n                            colorNum = (clippedVertices[vi + 2] * 255 << 16) + (clippedVertices[vi + 3] * 255 << 8) + clippedVertices[vi + 4] * 255;\r\n                            alpha = clippedVertices[vi + 5];\r\n                            mUVs.push(clippedVertices[vi + 6]);\r\n                            mUVs.push(clippedVertices[vi + 7]);\r\n                            vi += this.vertexSize;\r\n                        }\r\n                    }\r\n                    let blendMode;\r\n                    switch (slotBlendMode) {\r\n                        case 1:\r\n                            blendMode = \"light\";\r\n                            break;\r\n                        case 2:\r\n                            blendMode = \"multiply\";\r\n                            break;\r\n                        case 3:\r\n                            blendMode = \"screen\";\r\n                            break;\r\n                        default:\r\n                            blendMode = \"normal\";\r\n                    }\r\n                    graphics.drawTriangles(texture.realTexture, 0, 0, <any>mVertices, <any>mUVs, new Uint16Array(clippedTriangles), Matrix.EMPTY, alpha, colorNum, blendMode);\r\n                } else {\r\n                    let verts = renderable.vertices;\r\n                    let mVertices = [];\r\n                    let mUVs = [];\r\n                    let colorNum = 0xffffff;\r\n                    let alpha = 1;\r\n                    if (this.vertexEffect != null) {\r\n                        let vertexEffect = this.vertexEffect;\r\n                        if (!twoColorTint) {\r\n                            for (let v = 0, u = 0, n = renderable.numFloats; v < n; v += vertexSize, u += 2) {\r\n                                tempPos.x = verts[v];\r\n                                tempPos.y = verts[v + 1];\r\n                                tempUv.x = uvs[u];\r\n                                tempUv.y = uvs[u + 1]\r\n                                tempLight.setFromColor(finalColor);\r\n                                tempDark.set(0, 0, 0, 0);\r\n                                vertexEffect.transform(tempPos, tempUv, tempLight, tempDark);\r\n                                verts[v] = tempPos.x;\r\n                                verts[v + 1] = tempPos.y;\r\n                                verts[v + 2] = tempLight.r;\r\n                                verts[v + 3] = tempLight.g;\r\n                                verts[v + 4] = tempLight.b;\r\n                                verts[v + 5] = tempLight.a;\r\n                                verts[v + 6] = tempUv.x;\r\n                                verts[v + 7] = tempUv.y\r\n\r\n                                mVertices.push(verts[v], -verts[v + 1]);\r\n                                colorNum = (verts[v + 2] * 255 << 16) + (verts[v + 3] * 255 << 8) + verts[v + 4] * 255;\r\n                                alpha = verts[v + 5];\r\n                                mUVs.push(verts[v + 6], verts[v + 7]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (!twoColorTint) {\r\n                            for (let v = 2, u = 0, n = renderable.numFloats; v < n; v += vertexSize, u += 2) {\r\n                                verts[v] = finalColor.r;\r\n                                verts[v + 1] = finalColor.g;\r\n                                verts[v + 2] = finalColor.b;\r\n                                verts[v + 3] = finalColor.a;\r\n                                verts[v + 4] = uvs[u];\r\n                                verts[v + 5] = uvs[u + 1];\r\n\r\n                                mVertices.push(verts[v - 2], -verts[v - 1]);\r\n                                colorNum = (verts[v] * 255 << 16) + (verts[v + 1] * 255 << 8) + verts[v + 2] * 255;\r\n                                alpha = verts[v + 3];\r\n                                mUVs.push(verts[v + 4], verts[v + 5]);\r\n                            }\r\n                        }\r\n                    }\r\n                    let blendMode;\r\n                    switch (slotBlendMode) {\r\n                        case 1:\r\n                            blendMode = \"light\";\r\n                            break;\r\n                        case 2:\r\n                            blendMode = \"multiply\";\r\n                            break;\r\n                        case 3:\r\n                            blendMode = \"screen\";\r\n                            break;\r\n                        default:\r\n                            blendMode = \"normal\";\r\n                    }\r\n                    graphics.drawTriangles(texture.realTexture, 0, 0, <any>mVertices, <any>mUVs, new Uint16Array(triangles), Matrix.EMPTY, alpha, colorNum, blendMode);\r\n                }\r\n            }\r\n\r\n            clipper.clipEndWithSlot(slot);\r\n        }\r\n        clipper.clipEnd();\r\n    }\r\n}\r\n","import { ILaya } from \"../../ILaya\";\r\nimport { LayaEnv } from \"../../LayaEnv\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { Event } from \"../events/Event\";\r\nimport { SoundChannel } from \"../media/SoundChannel\";\r\nimport { SoundManager } from \"../media/SoundManager\";\r\nimport { Loader } from \"../net/Loader\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { ExternalSkin } from \"./ExternalSkin\";\r\nimport { SpineSkeletonRenderer } from \"./SpineSkeletonRenderer\";\r\nimport { SpineTemplet } from \"./SpineTemplet\";\r\n\r\n/**动画开始播放调度\r\n * @eventType Event.PLAYED\r\n * */\r\n/*[Event(name = \"played\", type = \"laya.events.Event.PLAYED\", desc = \"动画开始播放调度\")]*/\r\n/**动画停止播放调度\r\n * @eventType Event.STOPPED\r\n * */\r\n/*[Event(name = \"stopped\", type = \"laya.events.Event.STOPPED\", desc = \"动画停止播放调度\")]*/\r\n/**动画暂停播放调度\r\n * @eventType Event.PAUSED\r\n * */\r\n/*[Event(name = \"paused\", type = \"laya.events.Event.PAUSED\", desc = \"动画暂停播放调度\")]*/\r\n/**自定义事件。\r\n * @eventType Event.LABEL\r\n */\r\n/*[Event(name = \"label\", type = \"laya.events.Event.LABEL\", desc = \"自定义事件\")]*/\r\n/**\r\n * spine动画由<code>SpineTemplet</code>，<code>SpineSkeletonRender</code>，<code>SpineSkeleton</code>三部分组成。\r\n */\r\nexport class SpineSkeleton extends Sprite {\r\n    static readonly STOPPED: number = 0;\r\n    static readonly PAUSED: number = 1;\r\n    static readonly PLAYING: number = 2;\r\n\r\n    protected _source: string;\r\n    protected _templet: SpineTemplet;\r\n    protected _timeKeeper: spine.TimeKeeper;\r\n    protected _skeleton: spine.Skeleton;\r\n    protected _state: spine.AnimationState;\r\n    protected _stateData: spine.AnimationStateData;\r\n    protected _currentPlayTime: number = 0;\r\n    protected _renerer: SpineSkeletonRenderer;\r\n\r\n    /** @internal */\r\n    private _pause: boolean = true;\r\n    /** @internal */\r\n    private _currAniName: string = null;\r\n    /** @internal 动画播放的起始时间位置*/\r\n    private _playStart: number;\r\n    /** @internal 动画播放的结束时间位置*/\r\n    private _playEnd: number;\r\n    /** @internal 动画的总时间*/\r\n    private _duration: number;\r\n    /** 播放速率*/\r\n    private _playbackRate: number = 1.0;\r\n    /** @internal */\r\n    private _playAudio: boolean = true;\r\n    /** @internal */\r\n    private _soundChannelArr: any[] = [];\r\n    // 播放轨道索引\r\n    private trackIndex: number = 0;\r\n\r\n    private _skinName: string = \"default\";\r\n    private _animationName: string = \"\";\r\n    private _loop: boolean = true;\r\n\r\n    private _externalSkins: ExternalSkin[];\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get externalSkins() {\r\n        return this._externalSkins;\r\n    }\r\n    set externalSkins(value: ExternalSkin[]) {\r\n        if (value) {\r\n            for (let i = value.length - 1; i >= 0; i--) {\r\n                value[i].target = this;\r\n            }\r\n        }\r\n        this._externalSkins = value;\r\n    }\r\n    /**\r\n     * 重置外部加载的皮肤的样式\r\n     */\r\n    resetExternalSkin() {\r\n        if (this._skeleton) {\r\n            this._skeleton = new this._templet.ns.Skeleton(this._templet.skeletonData);\r\n            this._flushExtSkin();\r\n        }\r\n    }\r\n\r\n    get source(): string {\r\n        return this._source;\r\n    }\r\n\r\n    set source(value: string) {\r\n        this._source = value;\r\n\r\n        if (value) {\r\n            ILaya.loader.load(value, Loader.SPINE).then((templet: SpineTemplet) => {\r\n                if (!this._source || templet && !templet.isCreateFromURL(this._source))\r\n                    return;\r\n\r\n                this.templet = templet;\r\n            });\r\n        }\r\n        else\r\n            this.templet = null;\r\n    }\r\n\r\n    get skinName(): string {\r\n        return this._skinName;\r\n    }\r\n\r\n    set skinName(value: string) {\r\n        this._skinName = value;\r\n        if (this._templet)\r\n            this.showSkinByName(value);\r\n    }\r\n\r\n    get animationName(): string {\r\n        return this._animationName;\r\n    }\r\n\r\n    set animationName(value: string) {\r\n        this._animationName = value;\r\n        if (this._templet)\r\n            this.play(value, this._loop, true);\r\n    }\r\n\r\n    get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    set loop(value: boolean) {\r\n        this._loop = value;\r\n        if (this._templet)\r\n            this.play(this._animationName, this._loop, true);\r\n    }\r\n\r\n    /**\r\n     * 得到动画模板的引用\r\n     * @return templet\r\n     */\r\n    get templet(): SpineTemplet {\r\n        return this._templet;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    set templet(value: SpineTemplet) {\r\n        this.init(value);\r\n    }\r\n\r\n    /**\r\n     * 设置当前播放位置\r\n     * @param\tvalue 当前时间\r\n     */\r\n    set currentTime(value: number) {\r\n        if (!this._currAniName || !this._templet)\r\n            return;\r\n\r\n        value /= 1000;\r\n        if (value < this._playStart || (!!this._playEnd && value > this._playEnd) || value > this._duration)\r\n            throw new Error(\"AnimationPlayer: value must large than playStartTime,small than playEndTime.\");\r\n\r\n        this._state.update(value - this._currentPlayTime);\r\n        this._currentPlayTime = value;\r\n    }\r\n\r\n    /**\r\n     * 获取当前播放状态\r\n     * @return\t当前播放状态\r\n     */\r\n    get playState(): number {\r\n        if (!this._currAniName)\r\n            return SpineSkeleton.STOPPED;\r\n        if (this._pause)\r\n            return SpineSkeleton.PAUSED;\r\n        return SpineSkeleton.PLAYING;\r\n    }\r\n\r\n    protected init(templet: SpineTemplet): void {\r\n        if (this._templet) {\r\n            this.reset();\r\n            this.graphics.clear();\r\n        }\r\n\r\n        this._templet = templet;\r\n        if (!this._templet)\r\n            return;\r\n\r\n        this._templet._addReference();\r\n        this._skeleton = new templet.ns.Skeleton(this._templet.skeletonData);\r\n        this._stateData = new templet.ns.AnimationStateData(this._skeleton.data);\r\n        // 动画状态类\r\n        this._state = new templet.ns.AnimationState(this._stateData);\r\n        this._renerer = new SpineSkeletonRenderer(templet, false);\r\n        this._timeKeeper = new templet.ns.TimeKeeper();\r\n\r\n        let skinIndex = this._templet.getSkinIndexByName(this._skinName);\r\n        if (skinIndex != -1)\r\n            this.showSkinByIndex(skinIndex);\r\n\r\n        this._state.addListener({\r\n            start: (entry: any) => {\r\n                // console.log(\"started:\", entry);\r\n            },\r\n            interrupt: (entry: any) => {\r\n                // console.log(\"interrupt:\", entry);\r\n            },\r\n            end: (entry: any) => {\r\n                // console.log(\"end:\", entry);\r\n            },\r\n            dispose: (entry: any) => {\r\n                // console.log(\"dispose:\", entry);\r\n            },\r\n            complete: (entry: any) => {\r\n                // console.log(\"complete:\", entry);\r\n                if (entry.loop) { // 如果多次播放,发送complete事件\r\n                    this.event(Event.COMPLETE);\r\n                } else { // 如果只播放一次，就发送stop事件\r\n                    this._currAniName = null;\r\n                    this.event(Event.STOPPED);\r\n                }\r\n            },\r\n            event: (entry: any, event: any) => {\r\n                let eventData = {\r\n                    audioValue: event.data.audioPath,\r\n                    audioPath: event.data.audioPath,\r\n                    floatValue: event.floatValue,\r\n                    intValue: event.intValue,\r\n                    name: event.data.name,\r\n                    stringValue: event.stringValue,\r\n                    time: event.time * 1000,\r\n                    balance: event.balance,\r\n                    volume: event.volume\r\n                };\r\n                // console.log(\"event:\", entry, event);\r\n                this.event(Event.LABEL, eventData);\r\n                if (this._playAudio && eventData.audioValue) {\r\n                    let channel = SoundManager.playSound(templet.basePath + eventData.audioValue, 1, Handler.create(this, this._onAniSoundStoped), null, (this._currentPlayTime * 1000 - eventData.time) / 1000);\r\n                    SoundManager.playbackRate = this._playbackRate;\r\n                    channel && this._soundChannelArr.push(channel);\r\n                }\r\n            },\r\n        });\r\n        this._flushExtSkin();\r\n        this.event(Event.READY);\r\n\r\n        if (LayaEnv.isPlaying && this._animationName)\r\n            this.play(this._animationName, this._loop, true);\r\n    }\r\n\r\n    /**\r\n     * 播放动画\r\n     *\r\n     * @param\tnameOrIndex\t动画名字或者索引\r\n     * @param\tloop\t\t是否循环播放\r\n     * @param\tforce\t\tfalse,如果要播的动画跟上一个相同就不生效,true,强制生效\r\n     * @param\tstart\t\t起始时间\r\n     * @param\tend\t\t\t结束时间\r\n     * @param\tfreshSkin\t是否刷新皮肤数据\r\n     * @param\tplayAudio\t是否播放音频\r\n     */\r\n    play(nameOrIndex: any, loop: boolean, force: boolean = true, start: number = 0, end: number = 0, freshSkin: boolean = true, playAudio: boolean = true) {\r\n        this._playAudio = playAudio;\r\n        start /= 1000;\r\n        end /= 1000;\r\n        let animationName = nameOrIndex;\r\n        if (start < 0 || end < 0)\r\n            throw new Error(\"SpineSkeleton: start and end must large than zero.\");\r\n        if ((end !== 0) && (start > end))\r\n            throw new Error(\"SpineSkeleton: start must less than end.\");\r\n\r\n        if (typeof animationName == \"number\") {\r\n            animationName = this.getAniNameByIndex(nameOrIndex);\r\n        }\r\n\r\n        if (force || this._pause || this._currAniName != animationName) {\r\n            this._currAniName = animationName;\r\n            // 设置执行哪个动画\r\n            this._state.setAnimation(this.trackIndex, animationName, loop);\r\n            // 设置起始和结束时间\r\n            let trackEntry = this._state.getCurrent(this.trackIndex);\r\n            trackEntry.animationStart = start;\r\n            if (!!end && end < trackEntry.animationEnd)\r\n                trackEntry.animationEnd = end;\r\n\r\n            let animationDuration = trackEntry.animation.duration;\r\n            this._duration = animationDuration;\r\n            this._playStart = start;\r\n            this._playEnd = end <= animationDuration ? end : animationDuration;\r\n\r\n            if (this._pause) {\r\n                this._pause = false;\r\n                this.timer.frameLoop(1, this, this._update, null, true);\r\n            }\r\n            this._update();\r\n        }\r\n    }\r\n\r\n    private _update(): void {\r\n        this._timeKeeper.update();\r\n        let delta = this._timeKeeper.delta * this._playbackRate;\r\n        let trackEntry = this._state.getCurrent(this.trackIndex);\r\n        // 在游戏循环中，update被调用，这样AnimationState就可以跟踪时间\r\n        this._state.update(delta);\r\n        // 使用当前动画和事件设置骨架\r\n        this._state.apply(this._skeleton);\r\n\r\n        let animationLast = trackEntry.animationLast;\r\n        this._currentPlayTime = Math.max(0, animationLast);\r\n\r\n        // spine在state.apply中发送事件，开发者可能会在事件中进行destory等操作，导致无法继续执行\r\n        if (!this._state || !this._skeleton) {\r\n            return;\r\n        }\r\n        // 计算骨骼的世界SRT(world SRT)\r\n        this._skeleton.updateWorldTransform();\r\n\r\n        this.graphics.clear();\r\n        this._renerer.draw(this._skeleton, this.graphics, -1, -1);\r\n    }\r\n\r\n    private _flushExtSkin() {\r\n        if (null == this._skeleton) return;\r\n        let skins = this._externalSkins;\r\n        if (skins) {\r\n            for (let i = skins.length - 1; i >= 0; i--) {\r\n                skins[i].flush();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 得到当前动画的数量\r\n     * @return 当前动画的数量\r\n     */\r\n    getAnimNum(): number {\r\n        return this._templet.skeletonData.animations.length;\r\n    }\r\n\r\n    /**\r\n     * 得到指定动画的名字\r\n     * @param\tindex\t动画的索引\r\n     */\r\n    getAniNameByIndex(index: number): string {\r\n        return this._templet.getAniNameByIndex(index);\r\n    }\r\n\r\n    /**\r\n     * 通过名字得到插槽的引用\r\n     * @param slotName \r\n     */\r\n    getSlotByName(slotName: string) {\r\n        return this._skeleton.findSlot(slotName)\r\n    }\r\n\r\n    /**\r\n     * 设置动画播放速率\r\n     * @param\tvalue\t1为标准速率\r\n     */\r\n    playbackRate(value: number): void {\r\n        this._playbackRate = value;\r\n    }\r\n\r\n    /**\r\n     * 通过名字显示一套皮肤\r\n     * @param\tname\t皮肤的名字\r\n     */\r\n    showSkinByName(name: string): void {\r\n        this.showSkinByIndex(this._templet.getSkinIndexByName(name));\r\n    }\r\n\r\n    /**\r\n     * 通过索引显示一套皮肤\r\n     * @param\tskinIndex\t皮肤索引\r\n     */\r\n    showSkinByIndex(skinIndex: number): void {\r\n        let newSkine = this._skeleton.data.skins[skinIndex];\r\n        this._skeleton.setSkin(newSkine);\r\n        this._skeleton.setSlotsToSetupPose();\r\n    }\r\n\r\n    /**\r\n     * 停止动画\r\n     */\r\n    stop(): void {\r\n        if (!this._pause) {\r\n            this._pause = true;\r\n            this._currAniName = null;\r\n            this.timer.clear(this, this._update);\r\n            this._state.update(-this._currentPlayTime);\r\n            this._currentPlayTime = 0;\r\n            this.event(Event.STOPPED);\r\n\r\n            if (this._soundChannelArr.length > 0) { // 有正在播放的声音\r\n                this._onAniSoundStoped(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 暂停动画的播放\r\n     */\r\n    paused(): void {\r\n        if (!this._pause) {\r\n            this._pause = true;\r\n            this.timer.clear(this, this._update);\r\n            this.event(Event.PAUSED);\r\n            if (this._soundChannelArr.length > 0) { // 有正在播放的声音\r\n                for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n                    let channel = this._soundChannelArr[i];\r\n                    if (!channel.isStopped) {\r\n                        channel.pause();\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 恢复动画的播放\r\n     */\r\n    resume(): void {\r\n        if (this._pause) {\r\n            this._pause = false;\r\n            this.timer.frameLoop(1, this, this._update, null, true);\r\n            if (this._soundChannelArr.length > 0) { // 有正在播放的声音\r\n                for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n                    let channel = this._soundChannelArr[i];\r\n                    if ((channel as any).audioBuffer) {\r\n                        channel.resume();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 清掉播放完成的音频\r\n     * @param force 是否强制删掉所有的声音channel\r\n     */\r\n    private _onAniSoundStoped(force: boolean): void {\r\n        for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n            let channel = this._soundChannelArr[i];\r\n            if (channel.isStopped || force) {\r\n                !channel.isStopped && channel.stop();\r\n                this._soundChannelArr.splice(i, 1);\r\n                // SoundManager.removeChannel(_channel); // TODO 是否需要? 去掉有什么好处? 是否还需要其他操作?\r\n                len--; i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private reset() {\r\n        this._templet._removeReference(1);\r\n        this._templet = null;\r\n        this._timeKeeper = null;\r\n        this._skeleton = null;\r\n        this._state.clearListeners();\r\n        this._state = null;\r\n        this._renerer = null;\r\n        this._currAniName = null;\r\n        this._pause = true;\r\n        this.timer.clear(this, this._update);\r\n        if (this._soundChannelArr.length > 0)\r\n            this._onAniSoundStoped(true);\r\n    }\r\n\r\n    /**\r\n     * 销毁当前动画\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        if (this._templet)\r\n            this.reset();\r\n    }\r\n\r\n    // ------------------------------------新增加的接口----------------------------------------------------\r\n    /**\r\n     * 添加一个动画\r\n     * @param nameOrIndex   动画名字或者索引\r\n     * @param loop          是否循环播放\r\n     * @param delay         延迟调用，可以为负数\r\n     */\r\n    addAnimation(nameOrIndex: any, loop: boolean = false, delay: number = 0) {\r\n        delay /= 1000;\r\n        let animationName = nameOrIndex;\r\n        if (typeof animationName == \"number\") {\r\n            animationName = this.getAniNameByIndex(animationName);\r\n        }\r\n        this._currAniName = animationName;\r\n        this._state.addAnimation(this.trackIndex, animationName, loop, delay);\r\n    }\r\n\r\n    /**\r\n     * 设置当动画被改变时，存储混合(交叉淡出)的持续时间\r\n     * @param fromNameOrIndex \r\n     * @param toNameOrIndex \r\n     * @param duration\r\n     */\r\n    setMix(fromNameOrIndex: any, toNameOrIndex: any, duration: number) {\r\n        duration /= 1000;\r\n        let fromName = fromNameOrIndex;\r\n        if (typeof fromName == \"number\") {\r\n            fromName = this.getAniNameByIndex(fromName);\r\n        }\r\n        let toName = toNameOrIndex;\r\n        if (typeof toName == \"number\") {\r\n            toName = this.getAniNameByIndex(toName);\r\n        }\r\n        this._stateData.setMix(fromName, toName, duration);\r\n    }\r\n\r\n    /**\r\n     * 获取骨骼信息(spine.Bone)\r\n     * 注意: 获取到的是spine运行时的骨骼信息(spine.Bone)，不适用引擎的方法\r\n     * @param boneName \r\n     */\r\n    getBoneByName(boneName: string) {\r\n        return this._skeleton.findBone(boneName);\r\n    }\r\n\r\n    /**\r\n     * 获取Skeleton(spine.Skeleton)\r\n     */\r\n    getSkeleton() {\r\n        return this._skeleton;\r\n    }\r\n\r\n    /**\r\n     * 替换插槽皮肤\r\n     * @param slotName \r\n     * @param attachmentName \r\n     */\r\n    setSlotAttachment(slotName: string, attachmentName: string) {\r\n        this._skeleton.setAttachment(slotName, attachmentName);\r\n    }\r\n}","import { FilterMode } from \"../RenderEngine/RenderEnum/FilterMode\";\r\nimport { WrapMode } from \"../RenderEngine/RenderEnum/WrapMode\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Texture2D } from \"../resource/Texture2D\";\r\n\r\nexport class SpineTexture {\r\n    realTexture: Texture;\r\n\r\n    constructor(tex: Texture) {\r\n        this.realTexture = tex;\r\n    }\r\n\r\n    getImage(): Object {\r\n        return {\r\n            width: (this.realTexture?.sourceWidth) ?? 16,\r\n            height: (this.realTexture?.sourceHeight) ?? 16,\r\n        };\r\n    }\r\n\r\n    setFilters(minFilter: spine.TextureFilter, magFilter: spine.TextureFilter) {\r\n        if (!this.realTexture)\r\n            return;\r\n\r\n        let filterMode: number;\r\n        if (magFilter === spine.TextureFilter.Nearest)\r\n            filterMode = FilterMode.Point;\r\n        else\r\n            filterMode = FilterMode.Bilinear;\r\n        (<Texture2D>this.realTexture.bitmap).filterMode = filterMode;\r\n    }\r\n\r\n    convertWrapMode(mode: spine.TextureWrap) {\r\n        return mode == spine.TextureWrap.ClampToEdge ? WrapMode.Clamp : (mode == spine.TextureWrap.MirroredRepeat ? WrapMode.Mirrored : WrapMode.Repeat);\r\n    }\r\n\r\n    setWraps(uWrap: spine.TextureWrap, vWrap: spine.TextureWrap) {\r\n        if (!this.realTexture)\r\n            return;\r\n\r\n        let tex2D = <Texture2D>this.realTexture.bitmap;\r\n        tex2D.wrapModeU = this.convertWrapMode(uWrap);\r\n        tex2D.wrapModeV = this.convertWrapMode(vWrap);\r\n    }\r\n}","import { ILaya } from \"../../ILaya\";\r\nimport { Resource } from \"../resource/Resource\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { URL } from \"../net/URL\";\r\nimport { ILoadURL } from \"../net/Loader\";\r\nimport { SpineTexture } from \"./SpineTexture\";\r\nimport { IBatchProgress } from \"../net/BatchProgress\";\r\n\r\n/**\r\n * Spine动画模板基类\r\n */\r\nexport class SpineTemplet extends Resource {\r\n    public static RuntimeVersion: string = \"3.8\";\r\n\r\n    public skeletonData: spine.SkeletonData;\r\n\r\n    private _textures: Record<string, SpineTexture>;\r\n    private _basePath: string;\r\n    private _ns: any;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._textures = {};\r\n    }\r\n\r\n    get ns(): typeof spine {\r\n        return this._ns;\r\n    }\r\n\r\n    get basePath(): string {\r\n        return this._basePath;\r\n    }\r\n\r\n    getTexture(name: string): SpineTexture {\r\n        return this._textures[name];\r\n    }\r\n\r\n    _parse(desc: string | ArrayBuffer, atlasText: string, createURL: string, progress?: IBatchProgress): Promise<void> {\r\n        this._basePath = URL.getPath(createURL);\r\n        let version = this.getRuntimeVersion(desc);\r\n        let parseAtlas;\r\n        if (version == \"4.0\")\r\n            parseAtlas = this.parseAtlas4;\r\n        else\r\n            parseAtlas = this.parseAtlas3;\r\n\r\n        return parseAtlas.call(this, atlasText, progress).then((atlas: any) => {\r\n            let atlasLoader = new this._ns.AtlasAttachmentLoader(atlas);\r\n            if (desc instanceof ArrayBuffer) {\r\n                let skeletonBinary = new this._ns.SkeletonBinary(atlasLoader);\r\n                this.skeletonData = skeletonBinary.readSkeletonData(new Uint8Array(desc));\r\n            } else {\r\n                let skeletonJson = new this._ns.SkeletonJson(atlasLoader);\r\n                this.skeletonData = skeletonJson.readSkeletonData(desc);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getRuntimeVersion(desc: string | ArrayBuffer): string {\r\n        this._ns = spine;\r\n        return SpineTemplet.RuntimeVersion;\r\n    }\r\n\r\n    private parseAtlas3(atlasText: string, progress?: IBatchProgress): Promise<spine.TextureAtlas> {\r\n        let atlasPages: Array<ILoadURL> = [];\r\n        new this._ns.TextureAtlas(atlasText, (path: string) => {\r\n            atlasPages.push({ url: this._basePath + path });\r\n            return new SpineTexture(null);\r\n        });\r\n        return ILaya.loader.load(atlasPages, null, progress?.createCallback()).then((res: Array<Texture>) => {\r\n            let i = 0;\r\n            let atlas = new this._ns.TextureAtlas(atlasText, (path: string) => {\r\n                let tex = res[i++];\r\n                if (tex)\r\n                    tex._addReference();\r\n                let spineTex = new SpineTexture(tex);\r\n                this._textures[path] = spineTex;\r\n                return spineTex;\r\n            });\r\n            return atlas;\r\n        });\r\n    }\r\n\r\n    private parseAtlas4(atlasText: string, progress?: IBatchProgress): Promise<spine.TextureAtlas> {\r\n        let atlas = new this._ns.TextureAtlas(atlasText);\r\n        return ILaya.loader.load(atlas.pages.map((page: spine.TextureAtlasPage) => this._basePath + page.name),\r\n            null, progress?.createCallback()).then((res: Array<Texture>) => {\r\n                let i = 0;\r\n                for (let page of atlas.pages) {\r\n                    let tex = res[i++];\r\n                    if (tex)\r\n                        tex._addReference();\r\n                    let spineTex = new SpineTexture(tex);\r\n                    this._textures[page.name] = spineTex;\r\n                    page.setTexture(spineTex);\r\n                }\r\n\r\n                return atlas;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 通过索引得动画名称\r\n     * @param\tindex\r\n     * @return\r\n     */\r\n    getAniNameByIndex(index: number): string {\r\n        let tAni: any = this.skeletonData.animations[index];\r\n        if (tAni) return tAni.name;\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 通过皮肤名字得到皮肤索引\r\n     * @param\tskinName 皮肤名称\r\n     * @return\r\n     */\r\n    getSkinIndexByName(skinName: string): number {\r\n        let skins = this.skeletonData.skins;\r\n        let tSkinData: spine.Skin;\r\n        for (let i: number = 0, n: number = skins.length; i < n; i++) {\r\n            tSkinData = skins[i];\r\n            if (tSkinData.name == skinName) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * 释放纹理\r\n     * @override\r\n     */\r\n    protected _disposeResource(): void {\r\n        for (let k in this._textures) {\r\n            this._textures[k].realTexture?._removeReference();\r\n        }\r\n    }\r\n}\r\n","import { IResourceLoader, ILoadTask, Loader } from \"../net/Loader\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { SpineTemplet } from \"./SpineTemplet\";\r\n\r\nclass SpineTempletLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        let atlasUrl = Utils.replaceFileExtension(task.url, \"atlas\");\r\n\r\n        return Promise.all([\r\n            task.loader.fetch(task.url, task.ext == \"skel\" ? \"arraybuffer\" : \"json\", task.progress.createCallback()),\r\n            task.loader.fetch(atlasUrl, \"text\", task.progress.createCallback())\r\n        ]).then(res => {\r\n            if (!res[0] || !res[1])\r\n                return null;\r\n\r\n            let templet = new SpineTemplet();\r\n            return templet._parse(res[0], res[1], task.url, task.progress).then(() => templet);\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"skel\"], SpineTempletLoader, Loader.SPINE);","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { ExternalSkin } from \"./ExternalSkin\";\r\nimport { ExternalSkinItem } from \"./ExternalSkinItem\";\r\nimport { SpineSkeleton } from \"./SpineSkeleton\";\r\nimport \"./SpineTempletLoader\";\r\n\r\nlet c = ClassUtils.regClass;\r\n\r\nc(\"SpineSkeleton\", SpineSkeleton);\r\nc(\"ExternalSkin\", ExternalSkin);\r\nc(\"ExternalSkinItem\", ExternalSkinItem);"],"names":["ILaya","Loader","Matrix","Sprite","Event","SoundManager","Handler","LayaEnv","FilterMode","WrapMode","Resource","URL","Utils","ClassUtils"],"mappings":"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"}