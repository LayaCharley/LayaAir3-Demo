{"version":3,"file":"laya.particle.js","sources":["../../src/layaAir/laya/particle/emitter/EmitterBase.ts","../../bin/tsc/layaAir/laya/particle/shader/Particle.vs.glsl","../../bin/tsc/layaAir/laya/particle/shader/Particle.ps.glsl","../../src/layaAir/laya/particle/shader/ParticleShader.ts","../../src/layaAir/laya/particle/shader/value/ParticleShaderValue.ts","../../src/layaAir/laya/particle/ParticleData.ts","../../src/layaAir/laya/particle/ParticleTemplate2D.ts","../../src/layaAir/laya/particle/emitter/Emitter2D.ts","../../src/layaAir/laya/particle/Particle2D.ts","../../src/layaAir/laya/particle/ParticleSetting.ts","../../src/layaAir/laya/particle/ParticleTemplate2DLoader.ts","../../src/layaAir/laya/particle/ModuleDef.ts","../../src/layaAir/laya/particle/ParticleEmitter.ts"],"sourcesContent":["import { ParticleTemplate2D } from \"../ParticleTemplate2D\"\r\n\r\n/**\r\n * <code>EmitterBase</code> 类是粒子发射器类\r\n */\r\nexport class EmitterBase {\r\n    /**\r\n     * 积累的帧时间\r\n     */\r\n    protected _frameTime: number = 0;\r\n    /**\r\n     * 粒子发射速率\r\n     */\r\n    protected _emissionRate: number = 60; // emitted particles per second\r\n    /**\r\n     * 当前剩余发射时间\r\n     */\r\n    protected _emissionTime: number = 0;\r\n    /**\r\n     * 发射粒子最小时间间隔\r\n     */\r\n    minEmissionTime: number = 1 / 60;\r\n\r\n    /**@internal */\r\n    _template: ParticleTemplate2D;\r\n\r\n    /**\r\n     * 设置粒子粒子模板\r\n     * @param particleTemplate 粒子模板\r\n     *\r\n     */\r\n    set particleTemplate(particleTemplate: ParticleTemplate2D) {\r\n        this._template = particleTemplate;\r\n    }\r\n\r\n    /**\r\n     * 设置粒子发射速率\r\n     * @param emissionRate 粒子发射速率 (个/秒)\r\n     */\r\n    set emissionRate(_emissionRate: number) {\r\n        if (_emissionRate <= 0) return;\r\n        this._emissionRate = _emissionRate;\r\n        (_emissionRate > 0) && (this.minEmissionTime = 1 / _emissionRate);\r\n    }\r\n\r\n    /**\r\n     * 获取粒子发射速率\r\n     * @return 发射速率  粒子发射速率 (个/秒)\r\n     */\r\n    get emissionRate(): number {\r\n        return this._emissionRate;\r\n    }\r\n\r\n    /**\r\n     * 开始发射粒子\r\n     * @param duration 发射持续的时间(秒)\r\n     */\r\n    start(duration: number = Number.MAX_VALUE): void {\r\n        if (this._emissionRate != 0)\r\n            this._emissionTime = duration;\r\n    }\r\n\r\n    /**\r\n     * 停止发射粒子\r\n     * @param clearParticles 是否清理当前的粒子\r\n     */\r\n    stop(): void {\r\n        this._emissionTime = 0;\r\n    }\r\n\r\n    /**\r\n     * 清理当前的活跃粒子\r\n     * @param clearTexture 是否清理贴图数据,若清除贴图数据将无法再播放\r\n     */\r\n    clear(): void {\r\n        this._emissionTime = 0;\r\n    }\r\n\r\n    /**\r\n     * 发射一个粒子\r\n     *\r\n     */\r\n    emit(): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * 时钟前进\r\n     * @param passedTime 前进时间\r\n     *\r\n     */\r\n    advanceTime(passedTime: number = 1): void {\r\n        this._emissionTime -= passedTime;\r\n        if (this._emissionTime < 0) return;\r\n        this._frameTime += passedTime;\r\n        if (this._frameTime < this.minEmissionTime) return;\r\n        while (this._frameTime > this.minEmissionTime) {\r\n            this._frameTime -= this.minEmissionTime;\r\n            this.emit();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","attribute vec4 a_CornerTextureCoordinate;\r\nattribute vec3 a_Position;\r\nattribute vec3 a_Velocity;\r\nattribute vec4 a_StartColor;\r\nattribute vec4 a_EndColor;\r\nattribute vec3 a_SizeRotation;\r\nattribute vec2 a_Radius;\r\nattribute vec4 a_Radian;\r\nattribute float a_AgeAddScale;\r\nattribute float a_Time;\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n\r\nuniform float u_CurrentTime;\r\nuniform float u_Duration;\r\nuniform float u_EndVelocity;\r\nuniform vec3 u_Gravity;\r\n\r\nuniform vec2 size;\r\nuniform mat4 u_mmat;\r\n\r\nvec4 ComputeParticlePosition(in vec3 position, in vec3 velocity,in float age,in float normalizedAge)\r\n{\r\n\r\n   float startVelocity = length(velocity);//起始标量速度\r\n   float endVelocity = startVelocity * u_EndVelocity;//结束标量速度\r\n\r\n   float velocityIntegral = startVelocity * normalizedAge +(endVelocity - startVelocity) * normalizedAge *normalizedAge/2.0;//计算当前速度的标量（单位空间），vt=v0*t+(1/2)*a*(t^2)\r\n   \r\n   vec3 addPosition = normalize(velocity) * velocityIntegral * u_Duration;//计算受自身速度影响的位置，转换标量到矢量    \r\n   addPosition += u_Gravity * age * normalizedAge;//计算受重力影响的位置\r\n   \r\n   float radius=mix(a_Radius.x, a_Radius.y, normalizedAge); //计算粒子受半径和角度影响（无需计算角度和半径时，可用宏定义优化屏蔽此计算）\r\n   float radianHorizontal =mix(a_Radian.x,a_Radian.z,normalizedAge);\r\n   float radianVertical =mix(a_Radian.y,a_Radian.w,normalizedAge);\r\n   \r\n   float r =cos(radianVertical)* radius;\r\n   addPosition.y += sin(radianVertical) * radius;\r\n\t\r\n   addPosition.x += cos(radianHorizontal) *r;\r\n   addPosition.z += sin(radianHorizontal) *r;\r\n  \r\n   addPosition.y=-addPosition.y;//2D粒子位置更新需要取负，2D粒子坐标系Y轴正向朝上\r\n   position+=addPosition;\r\n   return  vec4(position,1.0);\r\n}\r\n\r\nfloat ComputeParticleSize(in float startSize,in float endSize, in float normalizedAge)\r\n{    \r\n    float size = mix(startSize, endSize, normalizedAge);\r\n    return size;\r\n}\r\n\r\nmat2 ComputeParticleRotation(in float rot,in float age)\r\n{    \r\n    float rotation =rot * age;\r\n    //计算2x2旋转矩阵.\r\n    float c = cos(rotation);\r\n    float s = sin(rotation);\r\n    return mat2(c, -s, s, c);\r\n}\r\n\r\nvec4 ComputeParticleColor(in vec4 startColor,in vec4 endColor,in float normalizedAge)\r\n{\r\n\tvec4 color=mix(startColor,endColor,normalizedAge);\r\n    //硬编码设置，使粒子淡入很快，淡出很慢,6.7的缩放因子把置归一在0到1之间，可以谷歌x*(1-x)*(1-x)*6.7的制图表\r\n    color.a *= normalizedAge * (1.0-normalizedAge) * (1.0-normalizedAge) * 6.7;\r\n   \r\n    return color;\r\n}\r\n\r\nvoid main()\r\n{\r\n   float age = u_CurrentTime - a_Time;\r\n   age *= 1.0 + a_AgeAddScale;\r\n   float normalizedAge = clamp(age / u_Duration,0.0,1.0);\r\n   gl_Position = ComputeParticlePosition(a_Position, a_Velocity, age, normalizedAge);//计算粒子位置\r\n   float pSize = ComputeParticleSize(a_SizeRotation.x,a_SizeRotation.y, normalizedAge);\r\n   mat2 rotation = ComputeParticleRotation(a_SizeRotation.z, age);\r\n\t\r\n    mat4 mat=u_mmat;\r\n    gl_Position=vec4((mat*gl_Position).xy,0.0,1.0);\r\n    gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize*vec2(mat[0][0],mat[1][1]);\r\n    gl_Position=vec4((gl_Position.x/size.x-0.5)*2.0,(0.5-gl_Position.y/size.y)*2.0,0.0,1.0);\r\n   \r\n   v_Color = ComputeParticleColor(a_StartColor,a_EndColor, normalizedAge);\r\n   v_TextureCoordinate =a_CornerTextureCoordinate.zw;\r\n}\r\n\r\n","#if defined(GL_FRAGMENT_PRECISION_HIGH)\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\nuniform sampler2D u_texture;\r\n\r\nvoid main()\r\n{\t\r\n\tgl_FragColor=texture2D(u_texture,v_TextureCoordinate)*v_Color;\r\n\tgl_FragColor.xyz *= v_Color.w;\r\n}","import { Shader } from \"../../webgl/shader/Shader\";\r\n\r\nimport parvs from \"./Particle.vs.glsl\";\r\nimport parps from \"./Particle.ps.glsl\";\r\n/**\r\n *  @private\r\n */\r\nexport class ParticleShader extends Shader {\r\n\tstatic vs: string = parvs;// this.__INCLUDESTR__(\"files/Particle.vs\");\r\n\tstatic ps: string = parps;//this.__INCLUDESTR__(\"files/Particle.ps\");\r\n\r\n\t//TODO:coverage\r\n\tconstructor() {\r\n\t\tsuper(parvs, parps, \"ParticleShader\", null, ['a_CornerTextureCoordinate', 0, 'a_Position', 1, 'a_Velocity', 2, 'a_StartColor', 3,\r\n\t\t\t'a_EndColor', 4, 'a_SizeRotation', 5, 'a_Radius', 6, 'a_Radian', 7, 'a_AgeAddScale', 8, 'a_Time', 9]);\r\n\t}\r\n}\r\n\r\n","import { ParticleShader } from \"../ParticleShader\"\r\nimport { Value2D } from \"../../../webgl/shader/d2/value/Value2D\";\r\nimport { RenderState2D } from \"../../../webgl/utils/RenderState2D\";\r\nimport { ShaderValue } from \"../../../webgl/shader/ShaderValue\";\r\n\r\n\r\n/**\r\n * 2D粒子\r\n */\r\nexport class ParticleShaderValue extends Value2D {\r\n    private static pShader: ParticleShader = null; //new ParticleShader();\r\n    /*\r\n    public var a_CornerTextureCoordinate:Array=[4, WebGLContext.FLOAT, false, 116, 0];\r\n    public var a_Position:Array=[3, WebGLContext.FLOAT, false, 116, 16];\r\n    public var a_Velocity:Array=[3, WebGLContext.FLOAT, false, 116, 28];\r\n    public var a_StartColor:Array=[4, WebGLContext.FLOAT, false, 116, 40];\r\n    public var a_EndColor:Array=[4, WebGLContext.FLOAT, false, 116, 56];\r\n    public var a_SizeRotation:Array=[3, WebGLContext.FLOAT, false, 116, 72];\r\n    public var a_Radius:Array = [2, WebGLContext.FLOAT, false, 116, 84];\r\n    public var a_Radian:Array=[4, WebGLContext.FLOAT, false, 116, 92];\r\n    public var a_AgeAddScale:Array=[1, WebGLContext.FLOAT, false, 116, 108];\r\n    public var a_Time:Array=[1, WebGLContext.FLOAT, false, 116, 112];\r\n    */\r\n    u_CurrentTime: number;\r\n    u_Duration: number;\r\n    u_Gravity: Float32Array; //v3\r\n    u_EndVelocity: number;\r\n    u_texture: any;\r\n\r\n    constructor() {\r\n        super(0, 0);\r\n        if (!ParticleShaderValue.pShader) {\r\n            ParticleShaderValue.pShader = new ParticleShader();\r\n        }\r\n        /* �ŵ� ParticleShader ����\r\n        this._attribLocation = ['a_CornerTextureCoordinate', 0, 'a_Position', 1, 'a_Velocity', 2, 'a_StartColor', 3,\r\n                                'a_EndColor',4,'a_SizeRotation',5,'a_Radius',6,'a_Radian',7,'a_AgeAddScale',8,'a_Time',9];\r\n        */\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    upload(): void {\r\n        var size: any[] = this.size;\r\n        size[0] = RenderState2D.width;\r\n        size[1] = RenderState2D.height;\r\n        this.alpha = this.ALPHA * RenderState2D.worldAlpha;\r\n        ParticleShaderValue.pShader.upload((<ShaderValue>this));\r\n    }\r\n}\r\n\r\n","import { ParticleSetting } from \"./ParticleSetting\";\r\nimport { MathUtil } from \"../maths/MathUtil\";\r\n\r\n/**\r\n *  @private\r\n */\r\nexport class ParticleData {\r\n    private static _tempVelocity: Float32Array = new Float32Array(3);\r\n    private static _tempStartColor: Float32Array = new Float32Array(4);\r\n    private static _tempEndColor: Float32Array = new Float32Array(4);\r\n    private static _tempSizeRotation: Float32Array = new Float32Array(3);\r\n    private static _tempRadius: Float32Array = new Float32Array(2);\r\n    private static _tempRadian: Float32Array = new Float32Array(4);\r\n\r\n    position: Float32Array;\r\n    velocity: Float32Array;\r\n    startColor: Float32Array;\r\n    endColor: Float32Array;\r\n    sizeRotation: Float32Array;\r\n    radius: Float32Array;\r\n    radian: Float32Array;\r\n    durationAddScale: number;\r\n    time: number;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    static create(settings: ParticleSetting, position: Float32Array, velocity: Float32Array, time: number): ParticleData {\r\n        var particleData: ParticleData = new ParticleData();\r\n        particleData.position = position;\r\n\r\n        MathUtil.scaleVector3(velocity, settings.emitterVelocitySensitivity, ParticleData._tempVelocity);\r\n        var horizontalVelocity: number = MathUtil.lerp(settings.minHorizontalVelocity, settings.maxHorizontalVelocity, Math.random());\r\n        var horizontalAngle: number = Math.random() * Math.PI * 2;\r\n        ParticleData._tempVelocity[0] += horizontalVelocity * Math.cos(horizontalAngle);\r\n        ParticleData._tempVelocity[2] += horizontalVelocity * Math.sin(horizontalAngle);\r\n        ParticleData._tempVelocity[1] += MathUtil.lerp(settings.minVerticalVelocity, settings.maxVerticalVelocity, Math.random());\r\n        particleData.velocity = ParticleData._tempVelocity;\r\n\r\n        particleData.startColor = ParticleData._tempStartColor;\r\n        particleData.endColor = ParticleData._tempEndColor;\r\n        var i: number;\r\n        if (settings.disableColor) {\r\n            for (i = 0; i < 3; i++) {\r\n                particleData.startColor[i] = 1;\r\n                particleData.endColor[i] = 1;\r\n            }\r\n            particleData.startColor[i] = MathUtil.lerp(settings.minStartColor[i], settings.maxStartColor[i], Math.random());//R、G、B、A插值\r\n            particleData.endColor[i] = MathUtil.lerp(settings.minEndColor[i], settings.maxEndColor[i], Math.random());//R、G、B、A插值\r\n\r\n        }\r\n        else {\r\n            if (settings.colorComponentInter) {\r\n                for (i = 0; i < 4; i++) {\r\n                    particleData.startColor[i] = MathUtil.lerp(settings.minStartColor[i], settings.maxStartColor[i], Math.random());//R、G、B、A插值\r\n                    particleData.endColor[i] = MathUtil.lerp(settings.minEndColor[i], settings.maxEndColor[i], Math.random());//R、G、B、A插值\r\n                }\r\n            } else {\r\n                MathUtil.lerpVector4(settings.minStartColor, settings.maxStartColor, Math.random(), particleData.startColor);//RGBA统一插值\r\n                MathUtil.lerpVector4(settings.minEndColor, settings.maxEndColor, Math.random(), particleData.endColor);//RGBA统一插值\r\n            }\r\n        }\r\n\r\n        particleData.sizeRotation = ParticleData._tempSizeRotation;\r\n        var sizeRandom: number = Math.random();\r\n        particleData.sizeRotation[0] = MathUtil.lerp(settings.minStartSize, settings.maxStartSize, sizeRandom);//StartSize\r\n        particleData.sizeRotation[1] = MathUtil.lerp(settings.minEndSize, settings.maxEndSize, sizeRandom);//EndSize\r\n        particleData.sizeRotation[2] = MathUtil.lerp(settings.minRotateSpeed, settings.maxRotateSpeed, Math.random());//Rotation\r\n\r\n        particleData.radius = ParticleData._tempRadius;\r\n        var radiusRandom: number = Math.random();\r\n        particleData.radius[0] = MathUtil.lerp(settings.minStartRadius, settings.maxStartRadius, radiusRandom);//StartRadius\r\n        particleData.radius[1] = MathUtil.lerp(settings.minEndRadius, settings.maxEndRadius, radiusRandom);//EndRadius\r\n\r\n        particleData.radian = ParticleData._tempRadian;\r\n        particleData.radian[0] = MathUtil.lerp(settings.minHorizontalStartRadian, settings.maxHorizontalStartRadian, Math.random());//StartHorizontalRadian\r\n        particleData.radian[1] = MathUtil.lerp(settings.minVerticalStartRadian, settings.maxVerticalStartRadian, Math.random());//StartVerticleRadian\r\n        var useEndRadian: boolean = settings.useEndRadian;\r\n        particleData.radian[2] = useEndRadian ? MathUtil.lerp(settings.minHorizontalEndRadian, settings.maxHorizontalEndRadian, Math.random()) : particleData.radian[0];//EndHorizontalRadian\r\n        particleData.radian[3] = useEndRadian ? MathUtil.lerp(settings.minVerticalEndRadian, settings.maxVerticalEndRadian, Math.random()) : particleData.radian[1];//EndVerticleRadian\r\n\r\n        particleData.durationAddScale = settings.ageAddScale * Math.random();\r\n\r\n        particleData.time = time;\r\n        return particleData;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { ParticleSetting } from \"./ParticleSetting\";\r\nimport { ISubmit } from \"../webgl/submit/ISubmit\";\r\nimport { ParticleShaderValue } from \"./shader/value/ParticleShaderValue\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { BlendMode } from \"../webgl/canvas/BlendMode\";\r\nimport { MeshParticle2D } from \"../webgl/utils/MeshParticle2D\";\r\nimport { VertexBuffer2D } from \"../webgl/utils/VertexBuffer2D\";\r\nimport { Stat } from \"../utils/Stat\";\r\nimport { RenderStateContext } from \"../RenderEngine/RenderStateContext\";\r\nimport { LayaGL } from \"../layagl/LayaGL\";\r\nimport { MeshTopology } from \"../RenderEngine/RenderEnum/RenderPologyMode\";\r\nimport { IndexFormat } from \"../RenderEngine/RenderEnum/IndexFormat\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Resource } from \"../resource/Resource\";\r\nimport { ParticleData } from \"./ParticleData\";\r\n\r\nexport class ParticleTemplate2D extends Resource implements ISubmit {\r\n    /**\r\n     * 粒子配置数据 \r\n     */\r\n    public readonly settings: ParticleSetting;\r\n    /**\r\n     * 粒子贴图 \r\n     */\r\n    public readonly texture: Texture;\r\n\r\n    protected _vertices: Float32Array;\r\n    protected _mesh: MeshParticle2D;\r\n    protected _conchMesh: any;\r\n\r\n    protected _floatCountPerVertex: number = 29;//0~3为CornerTextureCoordinate,4~6为Position,7~9Velocity,10到13为StartColor,14到17为EndColor,18到20位SizeRotation，21到22位Radius,23到26位Radian，27为DurationAddScaleShaderValue,28为Time\r\n\r\n    protected _firstActiveElement: number = 0;\r\n    protected _firstNewElement: number = 0;\r\n    protected _firstFreeElement: number = 0;\r\n    protected _firstRetiredElement: number = 0;\r\n    /**@internal */\r\n    _currentTime: number = 0;\r\n    protected _drawCounter: number;\r\n\r\n    static activeBlendType: number = -1;\r\n    x: number = 0;\r\n\r\n    y: number = 0;\r\n    protected _blendFn: Function;\r\n    sv: ParticleShaderValue = new ParticleShaderValue();\r\n\r\n    /**@internal */\r\n    _key: any = {};\r\n\r\n    constructor(settings: ParticleSetting, texture: Texture) {\r\n        super();\r\n\r\n        this.settings = settings;\r\n        this.texture = texture;\r\n        this.texture._addReference();\r\n\r\n        this.sv.u_Duration = this.settings.duration;\r\n        this.sv.u_Gravity = this.settings.gravity;\r\n        this.sv.u_EndVelocity = this.settings.endVelocity;\r\n\r\n        this._blendFn = BlendMode.fns[settings.blendState]; //context._targets?BlendMode.targetFns[blendType]:BlendMode.fns[blendType];\r\n        this._mesh = MeshParticle2D.getAMesh(this.settings.maxPartices);\r\n\r\n        this.initialize();\r\n    }\r\n\r\n    getRenderType(): number { return -111 }\r\n\r\n    releaseRender(): void { }\r\n\r\n    protected initialize(): void {\r\n        var floatStride: number = 0;\r\n        this._vertices = this._mesh._vb.getFloat32Array();\r\n        floatStride = this._mesh._stride / 4;\r\n        var bufi: number = 0;\r\n        var bufStart: number = 0;\r\n        for (var i: number = 0; i < this.settings.maxPartices; i++) {\r\n            var random: number = Math.random();\r\n            var cornerYSegement: number = this.settings.textureCount ? 1.0 / this.settings.textureCount : 1.0;\r\n            var cornerY: number;\r\n\r\n            for (cornerY = 0; cornerY < this.settings.textureCount; cornerY += cornerYSegement) {\r\n                if (random < cornerY + cornerYSegement)\r\n                    break;\r\n            }\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = 0;\r\n            this._vertices[bufi++] = cornerY;\r\n            bufi = (bufStart += floatStride);\r\n\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = cornerY;\r\n            bufi = bufStart += floatStride;\r\n\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = cornerY + cornerYSegement;\r\n            bufi = bufStart += floatStride;\r\n\r\n            this._vertices[bufi++] = -1;\r\n            this._vertices[bufi++] = 1;\r\n            this._vertices[bufi++] = 0;\r\n            this._vertices[bufi++] = cornerY + cornerYSegement;\r\n            bufi = bufStart += floatStride;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param position \r\n     * @param velocity \r\n     * @override\r\n     */\r\n    addParticleArray(position: Float32Array, velocity: Float32Array): void {\r\n        // TODO Auto Generated method stub\r\n        position[0] += this.x;\r\n        position[1] += this.y;\r\n\r\n        //由于循环队列判断算法，当下一个freeParticle等于retiredParticle时不添加例子，意味循环队列中永远有一个空位。（由于此判断算法快速、简单，所以放弃了使循环队列饱和的复杂算法（需判断freeParticle在retiredParticle前、后两种情况并不同处理））\r\n        var nextFreeParticle: number = this._firstFreeElement + 1;\r\n\r\n        if (nextFreeParticle >= this.settings.maxPartices)\r\n            nextFreeParticle = 0;\r\n\r\n        if (nextFreeParticle === this._firstRetiredElement)\r\n            return;\r\n\r\n        //计算vb数据，填入 _vertices\r\n        /**\r\n         * _mesh.addParticle(settings, position, velocity, _currentTime)\r\n         */\r\n        var particleData: ParticleData = ParticleData.create(this.settings, position, velocity, this._currentTime);\r\n\r\n        var startIndex: number = this._firstFreeElement * this._floatCountPerVertex * 4;\r\n        for (var i: number = 0; i < 4; i++) {\r\n            var j: number, offset: number;\r\n            for (j = 0, offset = 4; j < 3; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.position[j];\r\n\r\n            for (j = 0, offset = 7; j < 3; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.velocity[j];\r\n\r\n            for (j = 0, offset = 10; j < 4; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.startColor[j];\r\n\r\n            for (j = 0, offset = 14; j < 4; j++)\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.endColor[j];\r\n\r\n            for (j = 0, offset = 18; j < 3; j++)//StartSize,EndSize,Rotation\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.sizeRotation[j];\r\n\r\n            for (j = 0, offset = 21; j < 2; j++)//StartRadius,EndRadius\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.radius[j];\r\n\r\n            for (j = 0, offset = 23; j < 4; j++)//StartHorizontalRadian,StartVerticleRadian,EndHorizontalRadian,EndVerticleRadian\r\n                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.radian[j];\r\n\r\n            this._vertices[startIndex + i * this._floatCountPerVertex + 27] = particleData.durationAddScale;\r\n\r\n            this._vertices[startIndex + i * this._floatCountPerVertex + 28] = particleData.time;\r\n        }\r\n\r\n        this._firstFreeElement = nextFreeParticle;\r\n    }\r\n\r\n    /*\r\n    override protected function loadContent():void \r\n    {\r\n        var indexes:Uint16Array = new Uint16Array(settings.maxPartices * 6);\r\n    \t\r\n        for (var i:int = 0; i < settings.maxPartices; i++) {\r\n            indexes[i * 6 + 0] = (i * 4 + 0);\r\n            indexes[i * 6 + 1] = (i * 4 + 1);\r\n            indexes[i * 6 + 2] = (i * 4 + 2);\r\n        \t\r\n            indexes[i * 6 + 3] = (i * 4 + 0);\r\n            indexes[i * 6 + 4] = (i * 4 + 2);\r\n            indexes[i * 6 + 5] = (i * 4 + 3);\r\n        }\r\n    \t\r\n        _indexBuffer2D.clear();\r\n        _indexBuffer2D.append(indexes);\r\n        _indexBuffer2D.upload();\r\n    }\r\n    */\r\n    /**\r\n     * @override\r\n     */\r\n    addNewParticlesToVertexBuffer(): void {\r\n        var _vertexBuffer2D: VertexBuffer2D = this._mesh._vb;\r\n        _vertexBuffer2D.buffer2D.clear();\r\n        _vertexBuffer2D.buffer2D.append(this._vertices);\r\n\r\n        var start: number;\r\n        if (this._firstNewElement < this._firstFreeElement) {\r\n            // 如果新增加的粒子在Buffer中是连续的区域，只upload一次\r\n            start = this._firstNewElement * 4 * this._floatCountPerVertex * 4;\r\n            _vertexBuffer2D.buffer2D.subUpload(start, start, start + (this._firstFreeElement - this._firstNewElement) * 4 * this._floatCountPerVertex * 4);\r\n        } else {\r\n            //如果新增粒子区域超过Buffer末尾则循环到开头，需upload两次\r\n            start = this._firstNewElement * 4 * this._floatCountPerVertex * 4;\r\n            _vertexBuffer2D.buffer2D.subUpload(start, start, start + (this.settings.maxPartices - this._firstNewElement) * 4 * this._floatCountPerVertex * 4);\r\n\r\n            if (this._firstFreeElement > 0) {\r\n                _vertexBuffer2D.buffer2D.setNeedUpload();\r\n                _vertexBuffer2D.buffer2D.subUpload(0, 0, this._firstFreeElement * 4 * this._floatCountPerVertex * 4);\r\n            }\r\n        }\r\n        this._firstNewElement = this._firstFreeElement;\r\n    }\r\n\r\n\r\n    renderSubmit(): number {\r\n        if (this.texture && this.texture.valid) {\r\n            this.update(ILaya.timer._delta);\r\n            this.sv.u_CurrentTime = this._currentTime;\r\n            if (this._firstNewElement != this._firstFreeElement) {\r\n                this.addNewParticlesToVertexBuffer();\r\n            }\r\n\r\n            this.blend();\r\n\r\n            if (this._firstActiveElement != this._firstFreeElement) {\r\n                //var gl: WebGLRenderingContext = RenderStateContext.mainContext;\r\n                this._mesh.useMesh();\r\n                //_vertexBuffer2D.bind();\r\n                //_indexBuffer2D.bind();\r\n                this.sv.u_texture = this.texture._getSource();\r\n                this.sv.upload();\r\n\r\n\r\n                if (this._firstActiveElement < this._firstFreeElement) {\r\n                    LayaGL.renderDrawContext.drawElements2DTemp(MeshTopology.Triangles, (this._firstFreeElement - this._firstActiveElement) * 6, IndexFormat.UInt16, this._firstActiveElement * 6 * 2);\r\n                }\r\n                else {\r\n\r\n                    LayaGL.renderDrawContext.drawElements2DTemp(MeshTopology.Triangles, (this.settings.maxPartices - this._firstActiveElement) * 6, IndexFormat.UInt16, this._firstActiveElement * 6 * 2);\r\n                    if (this._firstFreeElement > 0)\r\n                        LayaGL.renderDrawContext.drawElements2DTemp(MeshTopology.Triangles, this._firstFreeElement * 6, IndexFormat.UInt16, 0);\r\n                }\r\n            }\r\n            this._drawCounter++;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    updateParticleForNative(): void {\r\n        if (this.texture && this.texture.valid) {\r\n            this.update(ILaya.timer._delta);\r\n            this.sv.u_CurrentTime = this._currentTime;\r\n            if (this._firstNewElement != this._firstFreeElement) {\r\n                this._firstNewElement = this._firstFreeElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(elapsedTime: number): void {\r\n        this._currentTime += elapsedTime / 1000;\r\n        this.retireActiveParticles();\r\n        this.freeRetiredParticles();\r\n\r\n        if (this._firstActiveElement == this._firstFreeElement)\r\n            this._currentTime = 0;\r\n\r\n        if (this._firstRetiredElement == this._firstActiveElement)\r\n            this._drawCounter = 0;\r\n    }\r\n\r\n    private retireActiveParticles(): void {\r\n        const epsilon: number = 0.0001;\r\n        var particleDuration: number = this.settings.duration;\r\n        while (this._firstActiveElement != this._firstNewElement) {\r\n            var offset: number = this._firstActiveElement * this._floatCountPerVertex * 4;\r\n            var index: number = offset + 28;//28为Time\r\n            var particleAge: number = this._currentTime - this._vertices[index];\r\n            particleAge *= (1.0 + this._vertices[offset + 27]);//真实时间\r\n            if (particleAge + epsilon < particleDuration)\r\n                break;\r\n\r\n            this._vertices[index] = this._drawCounter;\r\n\r\n            this._firstActiveElement++;\r\n\r\n            if (this._firstActiveElement >= this.settings.maxPartices)\r\n                this._firstActiveElement = 0;\r\n        }\r\n    }\r\n\r\n    private freeRetiredParticles(): void {\r\n        while (this._firstRetiredElement != this._firstActiveElement) {\r\n            var age: number = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * 4 + 28];//28为Time\r\n            //GPU从不滞后于CPU两帧，出于显卡驱动BUG等安全因素考虑滞后三帧\r\n            if (age < 3)\r\n                break;\r\n\r\n            this._firstRetiredElement++;\r\n\r\n            if (this._firstRetiredElement >= this.settings.maxPartices)\r\n                this._firstRetiredElement = 0;\r\n        }\r\n    }\r\n\r\n    getMesh(): MeshParticle2D {\r\n        return this._mesh;\r\n    }\r\n\r\n    getConchMesh(): any {\r\n        return this._conchMesh;\r\n    }\r\n\r\n    getFirstNewElement(): number {\r\n        return this._firstNewElement;\r\n    }\r\n\r\n    getFirstFreeElement(): number {\r\n        return this._firstFreeElement;\r\n    }\r\n\r\n    getFirstActiveElement(): number {\r\n        return this._firstActiveElement;\r\n    }\r\n\r\n    getFirstRetiredElement(): number {\r\n        return this._firstRetiredElement;\r\n    }\r\n\r\n    setFirstFreeElement(_value: number): void {\r\n        this._firstFreeElement = _value;\r\n    }\r\n\r\n    setFirstNewElement(_value: number): void {\r\n        this._firstNewElement = _value;\r\n    }\r\n\r\n    addDrawCounter(): void {\r\n        this._drawCounter++;\r\n    }\r\n\r\n    blend(): void {\r\n        if (BlendMode.activeBlendFunction !== this._blendFn) {\r\n            RenderStateContext.setBlend(true);\r\n            this._blendFn();\r\n            BlendMode.activeBlendFunction = this._blendFn;\r\n        }\r\n    }\r\n\r\n    protected _disposeResource(): void {\r\n        this.texture._removeReference();\r\n        this._mesh.releaseMesh();\r\n    }\r\n}\r\n\r\n","import { EmitterBase } from \"./EmitterBase\";\r\nimport { ParticleSetting } from \"../ParticleSetting\";\r\nimport { ParticleTemplate2D } from \"../ParticleTemplate2D\";\r\n\r\n/**\r\n * \r\n * @private\r\n */\r\nexport class Emitter2D extends EmitterBase {\r\n    setting: ParticleSetting;\r\n    private _posRange: Float32Array;\r\n    private _emitFun: Function;\r\n\r\n    constructor(_template: ParticleTemplate2D) {\r\n        super();\r\n        this.template = _template;\r\n    }\r\n    set template(template: ParticleTemplate2D) {\r\n        this._template = template;\r\n        if (!template) {\r\n            this._emitFun = null;\r\n            this.setting = null;\r\n            this._posRange = null;\r\n        };\r\n        this.setting = template.settings;\r\n        this._posRange = this.setting.positionVariance;\r\n        if (this._template instanceof ParticleTemplate2D) {\r\n            this._emitFun = this.webGLEmit;\r\n        }\r\n    }\r\n    get template(): ParticleTemplate2D {\r\n        return this._template;\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    emit(): void {\r\n        super.emit();\r\n        if (this._emitFun != null)\r\n            this._emitFun();\r\n    }\r\n\r\n    getRandom(value: number): number {\r\n        return (Math.random() * 2 - 1) * value;\r\n    }\r\n\r\n    webGLEmit(): void {\r\n        var pos: Float32Array = new Float32Array(3);\r\n        pos[0] = this.getRandom(this._posRange[0]);\r\n        pos[1] = this.getRandom(this._posRange[1]);\r\n        pos[2] = this.getRandom(this._posRange[2]);\r\n        var v: Float32Array = new Float32Array(3);\r\n        v[0] = 0;\r\n        v[1] = 0;\r\n        v[2] = 0;\r\n        this._template.addParticleArray(pos, v);\r\n    }\r\n    canvasEmit(): void {\r\n        var pos: Float32Array = new Float32Array(3);\r\n        pos[0] = this.getRandom(this._posRange[0]);\r\n        pos[1] = this.getRandom(this._posRange[1]);\r\n        pos[2] = this.getRandom(this._posRange[2]);\r\n        var v: Float32Array = new Float32Array(3);\r\n        v[0] = 0;\r\n        v[1] = 0;\r\n        v[2] = 0;\r\n        this._template.addParticleArray(pos, v);\r\n    }\r\n\r\n}\r\n\r\n","import { ParticleTemplate2D } from \"./ParticleTemplate2D\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { Context } from \"../resource/Context\";\r\nimport { EmitterBase } from \"./emitter/EmitterBase\"\r\nimport { Emitter2D } from \"./emitter/Emitter2D\"\r\nimport { DrawParticleCmd } from \"../display/cmd/DrawParticleCmd\"\r\n\r\n/**\r\n * <code>Particle2D</code> 类是2D粒子播放类\r\n *\r\n */\r\nexport class Particle2D extends Sprite {\r\n    /**@private */\r\n    private _matrix4: Float32Array = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);//默认4x4矩阵\r\n    private _source: string;\r\n    /**@private */\r\n    private _template: ParticleTemplate2D;\r\n    /**@private */\r\n    private _canvasTemplate: any;\r\n    /**@private */\r\n    private _emitter: EmitterBase;\r\n    /**是否自动播放*/\r\n    autoPlay: boolean = true;\r\n\r\n    /**\r\n     * 创建一个新的 <code>Particle2D</code> 类实例。\r\n     * @param setting 粒子配置数据\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.customRenderEnable = true;\r\n    }\r\n\r\n    /**\r\n     * 得到粒子模板的地址\r\n     * @return templet.\r\n     */\r\n    get source(): string {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    set source(value: string) {\r\n        this._source = value;\r\n\r\n        if (value) {\r\n            ILaya.loader.load(value).then((template: ParticleTemplate2D) => {\r\n                if (template && !template.isCreateFromURL(this._source))\r\n                    return;\r\n\r\n                this.init(template);\r\n            });\r\n        }\r\n        else\r\n            this.init(null);\r\n    }\r\n\r\n    get template(): ParticleTemplate2D {\r\n        return this._template;\r\n    }\r\n\r\n    /**\r\n     * 设置 粒子模板\r\n     * @param value 粒子模板\r\n     */\r\n    set template(value: ParticleTemplate2D) {\r\n        this.init(value);\r\n    }\r\n\r\n    /**\r\n     * 获取粒子发射器\r\n     */\r\n    get emitter(): EmitterBase {\r\n        return this._emitter;\r\n    }\r\n\r\n    /**\r\n     * 设置粒子配置数据\r\n     * @param settings 粒子配置数据\r\n     */\r\n    init(template: ParticleTemplate2D): void {\r\n        if (this._template) {\r\n            this.reset();\r\n        }\r\n\r\n        this._template = template;\r\n        if (!this._template)\r\n            return;\r\n\r\n        this._template._addReference();\r\n        this.customRenderEnable = true;//设置custom渲染\r\n\r\n        //this.graphics._saveToCmd(Render.context._drawParticle, [_particleTemplate]);\r\n        this.graphics.addCmd(DrawParticleCmd.create((<ParticleTemplate2D>this._template)));\r\n        // canvas 不支持\r\n        if (!this._emitter) {\r\n            this._emitter = new Emitter2D(this._template);\r\n        } else {\r\n            ((<Emitter2D>this._emitter)).template = this._template;\r\n        }\r\n        if (this.autoPlay) {\r\n            this.emitter.start();\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放\r\n     */\r\n    play(): void {\r\n        ILaya.timer.frameLoop(1, this, this._loop);\r\n    }\r\n\r\n    /**\r\n     * 停止\r\n     */\r\n    stop(): void {\r\n        ILaya.timer.clear(this, this._loop);\r\n    }\r\n\r\n    /**@private */\r\n    private _loop(): void {\r\n        this.advanceTime(1 / 60);\r\n    }\r\n\r\n    /**\r\n     * 时钟前进\r\n     * @param passedTime 时钟前进时间\r\n     */\r\n    advanceTime(passedTime: number = 1): void {\r\n        if (this._canvasTemplate) {\r\n            this._canvasTemplate.advanceTime(passedTime);\r\n        }\r\n        if (this._emitter) {\r\n            this._emitter.advanceTime(passedTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param context \r\n     * @param x \r\n     * @param y \r\n     * @override\r\n     */\r\n    customRender(context: Context, x: number, y: number): void {\r\n        this._matrix4[0] = context._curMat.a;\r\n        this._matrix4[1] = context._curMat.b;\r\n        this._matrix4[4] = context._curMat.c;\r\n        this._matrix4[5] = context._curMat.d;\r\n        this._matrix4[12] = context._curMat.tx;\r\n        this._matrix4[13] = context._curMat.ty;\r\n        if (!this._template) return;\r\n        var sv: any = ((<ParticleTemplate2D>this._template)).sv;\r\n        sv.u_mmat = this._matrix4;\r\n\r\n        if (this._canvasTemplate) {\r\n            this._canvasTemplate.render(context, x, y);\r\n        }\r\n    }\r\n\r\n    private reset() {\r\n        this.stop();\r\n    }\r\n\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        if (this._template)\r\n            this.reset();\r\n    }\r\n}","/**\r\n * <code>ParticleSettings</code> 类是粒子配置数据类\r\n */\r\nexport class ParticleSetting {\r\n    /**贴图*/\r\n    textureName: string = null;\r\n    /**贴图个数,默认为1可不设置*/\r\n    textureCount: number = 1;\r\n    /**由于循环队列判断算法，最大饱和粒子数为maxPartices-1*/\r\n    maxPartices: number = 100;\r\n    /**粒子持续时间(单位:秒）*/\r\n    duration: number = 1;\r\n    /**如果大于0，某些粒子的持续时间会小于其他粒子,并具有随机性(单位:无）*/\r\n    ageAddScale: number = 0;\r\n\r\n    /**粒子受发射器速度的敏感度（需在自定义发射器中编码设置）*/\r\n    emitterVelocitySensitivity: number = 1;\r\n\r\n    /**最小开始尺寸（单位：2D像素、3D坐标）*/\r\n    minStartSize: number = 100;\r\n    /**最大开始尺寸（单位：2D像素、3D坐标）*/\r\n    maxStartSize: number = 100;\r\n    /**最小结束尺寸（单位：2D像素、3D坐标）*/\r\n    minEndSize: number = 100;\r\n    /**最大结束尺寸（单位：2D像素、3D坐标）*/\r\n    maxEndSize: number = 100;\r\n\r\n    /**最小水平速度（单位：2D像素、3D坐标）*/\r\n    minHorizontalVelocity: number = 0;\r\n    /**最大水平速度（单位：2D像素、3D坐标）*/\r\n    maxHorizontalVelocity: number = 0;\r\n    /**最小垂直速度（单位：2D像素、3D坐标）*/\r\n    minVerticalVelocity: number = 0;\r\n    /**最大垂直速度（单位：2D像素、3D坐标）*/\r\n    maxVerticalVelocity: number = 0;\r\n    /**等于1时粒子从出生到消亡保持一致的速度，等于0时粒子消亡时速度为0，大于1时粒子会保持加速（单位：无）*/\r\n    endVelocity: number = 1;\r\n\r\n    /**（单位：2D像素、3D坐标）*/\r\n    gravity: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    /**最小旋转速度（单位：2D弧度/秒、3D弧度/秒）*/\r\n    minRotateSpeed: number = 0;\r\n    /**最大旋转速度（单位：2D弧度/秒、3D弧度/秒）*/\r\n    maxRotateSpeed: number = 0;\r\n\r\n    /**最小开始半径（单位：2D像素、3D坐标）*/\r\n    minStartRadius: number = 0;\r\n    /**最大开始半径（单位：2D像素、3D坐标）*/\r\n    maxStartRadius: number = 0;\r\n    /**最小结束半径（单位：2D像素、3D坐标）*/\r\n    minEndRadius: number = 0;\r\n    /**最大结束半径（单位：2D像素、3D坐标）*/\r\n    maxEndRadius: number = 0;\r\n\r\n    /**最小水平开始弧度（单位：2D弧度、3D弧度）*/\r\n    minHorizontalStartRadian: number = 0;\r\n    /**最大水平开始弧度（单位：2D弧度、3D弧度）*/\r\n    maxHorizontalStartRadian: number = 0;\r\n    /**最小垂直开始弧度（单位：2D弧度、3D弧度）*/\r\n    minVerticalStartRadian: number = 0;\r\n    /**最大垂直开始弧度（单位：2D弧度、3D弧度）*/\r\n    maxVerticalStartRadian: number = 0;\r\n\r\n    /**是否使用结束弧度,false为结束时与起始弧度保持一致,true为根据minHorizontalEndRadian、maxHorizontalEndRadian、minVerticalEndRadian、maxVerticalEndRadian计算结束弧度。*/\r\n    useEndRadian: boolean = true;\r\n    /**最小水平结束弧度（单位：2D弧度、3D弧度）*/\r\n    minHorizontalEndRadian: number = 0;\r\n    /**最大水平结束弧度（单位：2D弧度、3D弧度）*/\r\n    maxHorizontalEndRadian: number = 0;\r\n    /**最小垂直结束弧度（单位：2D弧度、3D弧度）*/\r\n    minVerticalEndRadian: number = 0;\r\n    /**最大垂直结束弧度（单位：2D弧度、3D弧度）*/\r\n    maxVerticalEndRadian: number = 0;\r\n\r\n    /**最小开始颜色*/\r\n    minStartColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n    /**最大开始颜色*/\r\n    maxStartColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n    /**最小结束颜色*/\r\n    minEndColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n    /**最大结束颜色*/\r\n    maxEndColor: Float32Array = new Float32Array([1, 1, 1, 1]);\r\n\r\n    /**false代表RGBA整体插值，true代表RGBA逐分量插值*/\r\n    colorComponentInter: boolean = false;\r\n    /**false代表使用参数颜色数据，true代表使用原图颜色数据*/\r\n    disableColor: boolean = false;\r\n    /**混合模式，待调整，引擎中暂无BlendState抽象*/\r\n    blendState: number = 0;\r\n\r\n    //.........................................................3D发射器参数.........................................................\r\n    /**发射器类型,\"point\",\"box\",\"sphere\",\"ring\"*/\r\n    emitterType: string = \"null\";\r\n    /**发射器发射速率*/\r\n    emissionRate: number = 0;\r\n\r\n    /**点发射器位置*/\r\n    pointEmitterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**点发射器位置随机值*/\r\n    pointEmitterPositionVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**点发射器速度*/\r\n    pointEmitterVelocity: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**点发射器速度随机值*/\r\n    pointEmitterVelocityAddVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    /**盒发射器中心位置*/\r\n    boxEmitterCenterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**盒发射器尺寸*/\r\n    boxEmitterSize: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**盒发射器速度*/\r\n    boxEmitterVelocity: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**盒发射器速度随机值*/\r\n    boxEmitterVelocityAddVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    /**球发射器中心位置*/\r\n    sphereEmitterCenterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**球发射器半径*/\r\n    sphereEmitterRadius: number = 1;\r\n    /**球发射器速度*/\r\n    sphereEmitterVelocity: number = 0;\r\n    /**球发射器速度随机值*/\r\n    sphereEmitterVelocityAddVariance: number = 0;\r\n\r\n    /**环发射器中心位置*/\r\n    ringEmitterCenterPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n    /**环发射器半径*/\r\n    ringEmitterRadius: number = 30;\r\n    /**环发射器速度*/\r\n    ringEmitterVelocity: number = 0;\r\n    /**环发射器速度随机值*/\r\n    ringEmitterVelocityAddVariance: number = 0;\r\n    /**环发射器up向量，0代表X轴,1代表Y轴,2代表Z轴*/\r\n    ringEmitterUp: number = 2;\r\n    //.........................................................3D发射器参数.........................................................\r\n\r\n    //.........................................................2D发射器参数.........................................................\r\n    /**发射器位置随机值,2D使用*/\r\n    positionVariance: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    //.........................................................2D发射器参数.........................................................\r\n}\r\n\r\nconst defaultSetting = new ParticleSetting();\r\nexport function checkSetting(setting: any): ParticleSetting {\r\n    var key: string;\r\n    for (key in defaultSetting) {\r\n        if (!(key in setting)) {\r\n            setting[key] = (defaultSetting as any)[key];\r\n        }\r\n    }\r\n    //强转一下防止出错。这几个变量会直接传给shader，如果不是数字的话，有的runtime受不了（例如微信）\r\n    setting.endVelocity = +setting.endVelocity;\r\n    setting.gravity[0] = +setting.gravity[0];\r\n    setting.gravity[1] = +setting.gravity[1];\r\n    setting.gravity[2] = +setting.gravity[2];\r\n\r\n    return setting;\r\n}\r\n\r\n\r\n","import { ILoadTask, IResourceLoader, Loader } from \"../net/Loader\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { checkSetting } from \"./ParticleSetting\";\r\nimport { ParticleTemplate2D } from \"./ParticleTemplate2D\";\r\n\r\nclass ParticleTemplate2DLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\r\n            if (!data)\r\n                return null;\r\n\r\n            let settings = checkSetting(data);\r\n\r\n            return task.loader.load(settings.textureName, task.options, task.progress.createCallback()).then((tex: Texture) => {\r\n                if (!tex)\r\n                    return null;\r\n\r\n                return new ParticleTemplate2D(settings, tex);\r\n            });\r\n\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"part\"], ParticleTemplate2DLoader);","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { Particle2D } from \"./Particle2D\";\r\n\r\nimport \"./ParticleTemplate2DLoader\";\r\n\r\nlet c = ClassUtils.regClass;\r\n\r\nc(\"Particle2D\", Particle2D);","import { ParticleTemplate2D } from \"./ParticleTemplate2D\";\r\nimport { MathUtil } from \"../maths/MathUtil\";\r\n\r\n/**\r\n *  @private\r\n */\r\nexport class ParticleEmitter {\r\n    private _templet: ParticleTemplate2D;\r\n    private _timeBetweenParticles: number;\r\n    private _previousPosition: Float32Array;\r\n    private _timeLeftOver: number = 0;\r\n\r\n    private _tempVelocity: Float32Array = new Float32Array([0, 0, 0]);\r\n    private _tempPosition: Float32Array = new Float32Array([0, 0, 0]);\r\n\r\n    constructor(templet: ParticleTemplate2D, particlesPerSecond: number, initialPosition: Float32Array) {\r\n        this._templet = templet;\r\n        this._timeBetweenParticles = 1.0 / particlesPerSecond;\r\n        this._previousPosition = initialPosition;\r\n    }\r\n\r\n    update(elapsedTime: number, newPosition: Float32Array): void {\r\n        elapsedTime = elapsedTime / 1000;//需秒为单位\r\n        if (elapsedTime > 0) {\r\n            MathUtil.subtractVector3(newPosition, this._previousPosition, this._tempVelocity);\r\n            MathUtil.scaleVector3(this._tempVelocity, 1 / elapsedTime, this._tempVelocity);\r\n\r\n            var timeToSpend: number = this._timeLeftOver + elapsedTime;\r\n            var currentTime: number = -this._timeLeftOver;\r\n\r\n            while (timeToSpend > this._timeBetweenParticles) {\r\n                currentTime += this._timeBetweenParticles;\r\n                timeToSpend -= this._timeBetweenParticles;\r\n\r\n                MathUtil.lerpVector3(this._previousPosition, newPosition, currentTime / elapsedTime, this._tempPosition);\r\n\r\n                this._templet.addParticleArray(this._tempPosition, this._tempVelocity);\r\n            }\r\n\r\n            this._timeLeftOver = timeToSpend;\r\n        }\r\n        this._previousPosition[0] = newPosition[0];\r\n        this._previousPosition[1] = newPosition[1];\r\n        this._previousPosition[2] = newPosition[2];\r\n    }\r\n}\r\n\r\n"],"names":["Shader","Value2D","RenderState2D","MathUtil","Resource","BlendMode","MeshParticle2D","ILaya","LayaGL","MeshTopology","IndexFormat","RenderStateContext","Sprite","DrawParticleCmd","Loader","ClassUtils"],"mappings":"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"}