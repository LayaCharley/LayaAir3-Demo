{"version":3,"names":["IAniLib","Skeleton","AnimationTemplet","Templet","AnimationContent","AnimationNodeContent","KeyFramesContent","AnimationParser01","static","templet","reader","i","j","k","n","l","m","o","data","__getBuffer","aniClassName","readUTFString","_aniClassName","publicData","strList","split","aniCount","getUint8","publicDataPos","getUint32","publicExtDataPos","slice","publicRead","Byte","_publicExtData","byteLength","_useParent","_anis","length","ani","nodes","name","getUint16","_aniMap","bone3DMap","playTime","getFloat32","boneCount","totalKeyframeDatasLength","node","childs","nameIndex","getInt16","keyFrame","parentIndex","parent","lerpType","keyframeParamsOffset","pos","keyframeDataCount","keyframeWidth","interpolationMethod","interpolation","push","privateDataLen","extenData","keyframeCount","startTime","duration","interpolationData","interDataLength","Float32Array","dData","nextData","_calculateKeyFrame","AnimationParser02","_DATA","offset","_reader","size","count","_BLOCK","blockStarts","blockLengths","prePos","_strings","_templet","READ_DATA","READ_BLOCK","READ_STRINGS","index","blockName","fn","Error","call","arrayBuffer","getByte","aniName","lastKeyFrame","keyframeDataOffset","keyframeDataLength","keyframeArrayBuffer","AnimationState","constructor","stopped","paused","playing","AnimationPlayer","EventDispatcher","super","this","isCache","playbackRate","_destroyed","_currentAnimationClipIndex","_currentKeyframeIndex","_currentTime","_overallDuration","Number","MAX_VALUE","_stopWhenCircleFinish","_elapsedPlaybackTime","_startUpdateLoopCount","_cachePlayRate","cacheFrameRate","returnToZeroStopped","value","state","stop","_computeFullKeyframeIndices","playStart","_playStart","playEnd","_playEnd","playDuration","_playDuration","overallDuration","currentAnimationClipIndex","currentKeyframeIndex","currentPlayTime","currentFrameTime","_currentFrameTime","cachePlayRate","_cacheFrameRate","_cacheFrameRateInterval","currentTime","Stat","loopCount","cacheFrameInterval","Math","floor","_paused","event","Event","PAUSED","cacheFrameRateInterval","destroyed","_onTempletLoadedComputeFullKeyframeIndices","_onAnimationTempletLoaded","_calculatePlayDuration","oriDuration","getAniDuration","_setPlayParams","time","_setPlayParamsWhenStop","currentAniClipPlayDuration","endTime","_update","elapsedTime","STOPPED","COMPLETE","_destroy","offAll","play","PLAYED","playByFrame","playStartFrame","playEndFrame","fpsIn3DBuilder","interval","immediate","destroy","BezierLerp","t","px0","py0","px1","py1","key","_getBezierParamKey","vKey","_bezierResultCache","len","points","_getBezierPoints","_bezierPointsCache","controlPoints","Bezier","getBezierPoints","Resource","unfixedLastAniIndex","_fullFrames","_boneCurKeyFrm","bone","out","outOfs","dt","interData","amount","MathUtil","slerpQuaternionArray","getBezierRate","keyFrames","_onAsynLoaded","propertyParams","_aniVersion","parse","getAnimationCount","getAnimation","aniIndex","getNodes","getNodeIndexWithName","getNodeCount","getTotalkeyframesLength","getPublicExtData","getAnimationDataWithCache","cacheDatas","frameIndex","aniDatas","keyDatas","setAnimationDataWithCache","getNodeKeyFrame","nodeframes","nodeid","tm","cid","frmNum","kinfo","getOriginalData","originalData","nodesFrameIndices","playCurTime","curKFrm","kfrm","dataOffset","interDataLen","dataIndex","type","getNodesCurrentFrameIndex","unfixedCurrentFrameIndexes","Uint32Array","unfixedCurrentTimes","getOriginalDataUnfixedRate","unfixedKeyframes","_LinearInterpolation_0","_QuaternionInterpolation_1","_AngleInterpolation_2","_RadiansInterpolation_3","_Matrix4x4Interpolation_4","_NoInterpolation_5","_BezierInterpolation_6","_BezierInterpolation_7","GraphicsAni","Graphics","drawSkin","skinA","alpha","drawTriangles","texture","vertices","uvs","indexes","transform","Matrix","EMPTY","_caches","pop","graphics","clear","IkConstraint","bones","isSpine","isDebug","_targetBone","targetBoneIndex","_bones","boneIndexs","mix","bendDirection","apply","_applyIk1","resultMatrix","tx","ty","_applyIk2","_applyIk3","targetX","targetY","pp","parentBone","id","a","d","b","c","x","y","rotationIK","atan2","radDeg","skX","scX","skY","update","updatePos","_sp","child","bendDir","os1","os2","s2","px","resultTransform","py","psx","psy","scY","csx","cy","cwx","cwy","cx","u","abs","Sprite","ILaya","stage","addChild","drawCircle","setRotation","a1","a2","dx","dy","l1","sqrt","l2","cos","acos","sin","aa","bb","dd","ta","c1","c2","q","r0","r1","r","minAngle","minDist","minX","minY","maxAngle","maxDist","maxX","maxY","PI","angle","os","rotation","lLL","lL","parentX","parentY","childX","childY","dX","dY","lPP","lP","lTT","lT","rate","h","hX","hY","rX","rY","pRotation","pTarMatrix","childRotation","childTarMatrix","_tempMatrix","identity","rotate","scale","getScaleX","getScaleY","translate","copyTo","updateChild","degRad","PathConstraint","_debugKey","_segments","_curves","position","spacing","rotateMix","translateMix","tBoneIds","boneList","target","tTranslateMix","tRotateMix","tRotate","tSpacingMode","spacingMode","tLengthSpacing","tRotateMode","rotateMode","tTangents","tScale","lengths","spacesCount","spaces","_spaces","max","positions","computeWorldPositions","positionMode","tLinePos","drawLines","p","boneX","boneY","offsetRotation","tip","s","computeWorldVertices2","boneSlot","start","worldVertices","tMatrix","tBones","currDisplayData","tWeights","weights","tTriangles","triangles","v","skip","w","wx","wy","vx","vy","skeletonBones","weight","parentName","tBoneMt","deformData","_tempMt","tangents","percentPosition","percentSpacing","world","pathLength","curve","space","prev","tVertices","verticesLength","verLen","curveCount","prevCurve","curves","tmpx","tmpy","dddfx","dddfy","ddfx","ddfy","dfx","dfy","x1","y1","cx1","cy1","cx2","cy2","x2","y2","segment","segments","curveLength","addBeforePosition","addAfterPosition","ii","addCurvePosition","temp","tt","ttt","uu","uuu","ut","ut3","uut3","utt3","BEFORE","AFTER","TfConstraint","_temp","_data","targetIndex","scaleMix","shearMix","tTfBone","tb","tc","td","offsetX","offsetY","localToWorld","bs","ts","offsetScaleX","offsetScaleY","by","offsetShearY","aniMode","_boneMatrixArray","_lastTime","_currAniIndex","_pause","_aniClipIndex","_clipIndex","_skinIndex","_skinName","_aniMode","_index","_total","_indexControl","_eventIndex","_drawOrderIndex","_drawOrder","_lastAniClipIndex","_lastUpdateAniClipIndex","_playAudio","_soundChannelArr","_animationName","_loop","player","_player","getAnimNum","_curOriginalData","total","skinName","showSkinByName","animationName","loop","init","source","_source","loader","load","then","isCreateFromURL","reset","_graphicsCache","_yReverseMatrix","yReverseMatrix","_addReference","_parseSrcBoneMatrix","_boneList","mBoneArr","_rootBone","mRootBone","_aniSectionDic","aniSectionDic","ikArr","_ikArr","pathArr","_pathDic","tPathData","tPathConstraint","tBoneSlot","_boneSlotDic","tfArr","_tfArr","skinDataArray","getSkinIndexByName","on","_onPlay","_onStop","_onPause","LayaEnv","isPlaying","path","complete","runWith","tEventArr","eventAniArr","tEventData","LABEL","srcBoneMatrixArr","boneSlotDic","_bindBoneBoneSlotDic","bindBoneBoneSlotDic","_boneSlotArray","boneSlotArray","tArr","tBS","tBSArr","copy","_emitMissedEvents","startIndex","autoKey","tCurrTime","timer","currTimer","preIndex","dTime","audioValue","channel","SoundManager","playSound","_path","Handler","create","_onAniSoundStoped","tGraphics","getGrahicsDataWithCache","_createGraphics","_getGrahicsDataWithCache","force","isStopped","splice","curTime","tDrawOrderArr","drawOrderAniArr","tDrawOrderData","drawOrder","tSectionArr","tStartIndex","origDt","resultTrans","tParentTransform","tMatrixDataLen","skewX","skewY","tSlotDic","tSlotAlphaDic","tBoneData","tBendDirectionDic","tMixDic","TEMP","tIkConstraint","tPathStr","tSrcBone","tDBBoneSlotArr","tDBBoneSlot","setParentMatrix","tDeformDic","tDeformAniArr","deformAniArr","tSkin","tSkinDeformAni","tDeformAniData","_setDeform","tSlotData2","tSlotData3","isNaN","attachmentNames","showDisplayByName","showDisplayByIndex","tObject","attachmentName","draw","setGrahicsDataWithCache","_checkIsAllParsed","_setGrahicsDataWithCache","deleteAniData","tDeformSlotData","tDeformSlotDisplayData","deformSlotDataList","deformSlotDisplayList","slotIndex","attachment","getAniNameByIndex","getSlotByName","freshSlotIndex","showSkinByIndex","skinIndex","showSlotData","tSkinData","_clearCache","showSlotSkinByIndex","slotName","showSlotSkinByName","replaceSlotSkinName","oldName","newName","replaceDisplayByName","replaceSlotSkinByIndex","oldIndex","newIndex","replaceDisplayByIndex","setSlotSkin","replaceSkin","gp","recycle","nameOrIndex","end","freshSkin","playAudio","animation","Browser","now","frameLoop","pause","resume","audioBuffer","_removeReference","destroyChild","Transform","initData","undefined","getMatrix","mMatrix","skew","sinX","cosX","sinY","cosY","setTo","Bone","inheritScale","inheritRotation","_children","setTempMatrix","matrix","pMatrix","tResultMatrix","mul","resultRotation","tAngle","tParentMatrix","worldX","worldY","tTestMatrix","rd","_sprite","updateDraw","ShowBones","drawLine","fillText","findBone","boneName","tResult","local","localX","localY","TfConstraintData","PathConstraintData","DeformAniData","DeformSlotData","DeformSlotDisplayData","timeList","vectices","tweenKeyList","binarySearch1","values","low","high","current","tVertexCount","tFrameIndex","lastVertices","tPrev","tPrevVertices","tNextVertices","tPreFrameTime","tFrameTime","DrawOrderData","EventData","UVTools","bigUV","smallUV","rst","startX","width","startY","height","dWidth","dHeight","Utils","copyArray","MeshData","Uint16Array","useUvTransform","canvasPadding","getBounds","Rectangle","_getWrapRec","SkinMeshForGraphic","init2","ps","verticles","_ps","BoneSlot","srcDisplayIndex","displayIndex","originalIndex","_replaceDic","slotData","freshIndex","currSlotData","currTexture","getDisplayByName","tarName","tarIndex","displayArr","tName","getTexture","createTexture","_texture","_diyTexture","_curDiyUV","parentMatrix","_parentMatrix","arrA","arrB","getSaveVerticle","useSameMatrixAndVerticle","_preGraphicVerticle","isSameArr","mtA","mtB","getSaveMatrix","_preGraphicMatrix","isSameMatrix","newMatrix","clone","boneMatrixArray","noUseSave","tSkinSprite","tTexture","tCurrentMatrix","getDisplayMatrix","tRotateKey","_resultMatrix","_tempResultMatrix","_checkTransform","drawTexture","_skinSprite","createSkinMesh","tIBArray","tUVs","getRelativeUV","uv","getAbsoluteUV","_mVerticleArr","tResultMatrix2","tCurrentMatrix2","skinMesh","skinSprite","tUvs","tX","tY","tRx","tRy","nn","tB","tWeight","_tempVerticleArr","f","drawBonePoint","SkinData","slotArr","SkinSlotDisplayData","Texture","bitmap","sourceWidth","sourceHeight","destory","SlotData","IkConstraintData","boneNames","LAYA_ANIMATION_VISION","skinDic","subTextureDic","isParseFail","skinSlotDisplayDataArr","_isParseAudio","buildArmature","sk","_parse","createURL","skeletonData","lastIndexOf","_mainTexture","console","log","tByte","tWidth","tHeight","tFrameX","tFrameY","tFrameWidth","tFrameHeight","tTempleData","tTextureLen","getInt32","tTextureName","tTextureNameArr","tBone","tParentBone","tParentName","tAniCount","tRootBone","tBoneLen","tBoneDic","root","tResultTransform","tIkConstraintData","tLen","boneLength","tMatrixArray","tIkBoneLen","tTfConstraintData","tIkLen","targetBoneName","tTfBoneLen","tPathConstraintData","tTfLen","getUTFString","tPathBoneLen","tDeformSlotLen","tDeformSlotDisplayLen","tDeformTimeLen","tDTime","tDeformVecticesLen","tDeformVectices","tPathLen","tDeformAniLen","tDeformSkinLen","tSkinDic","tDrawOrderLen","tDoLen","tDrawOrderAniLen","tEventLen","tEventAniLen","intValue","floatValue","stringValue","tAttachmentLen","tBoneSlotLen","tSlotData","tDisplayData","tSlotDataLen","tDisplayDataLen","tUvLen","tWeightLen","tTriangleLen","tVerticeLen","tLengthLen","tNameArray","tNameStartIndex","tSkinDataLen","tBoneId","substring","freshDisplayIndex","tAniDataO","_disposeResource","_a","tAni","Loader","registerLoader","task","Promise","all","fetch","url","progress","createCallback","options","replaceFileExtension","res","ClassUtils","regClass","MovieClip","parentMovieClip","_start","_Pos","_ended","_loadedImage","_endFrame","_ids","_idOfSprite","_reset","_playing","_parentMovieClip","_isRoot","_movieClipList","_setBitUp","NodeFlags","DISPLAY","_clear","_setDisplay","_onDisplay","updates","_playIndex","_displayFrame","_labels","addLabel","label","removeLabel","_count","_parseFrame","_completeHandler","handler","run","gotoAndStop","obj","clearRes","removeChildren","_curIndex","rm","_preIndex","mc","sp","tPos","ttype","eStr","ifAdd","pid","spp","loadImage","basePath","mat","_getMatrix","_setData","_initState","zOrder","removeSelf","_ValueList","visible","mt","setPos","setSize","setScale","getString","updateZOrder","FRAME","END","atlas","atlasPath","BUFFER","ERROR","dir","_initData","preState","READY","playTo"],"sources":["../../src/layaAir/laya/ani/AniLibPack.ts","../../src/layaAir/laya/ani/AnimationContent.ts","../../src/layaAir/laya/ani/AnimationNodeContent.ts","../../src/layaAir/laya/ani/KeyFramesContent.ts","../../src/layaAir/laya/ani/AnimationParser01.ts","../../src/layaAir/laya/ani/AnimationParser02.ts","../../src/layaAir/laya/ani/AnimationState.ts","../../src/layaAir/laya/ani/AnimationPlayer.ts","../../src/layaAir/laya/ani/math/BezierLerp.ts","../../src/layaAir/laya/ani/AnimationTemplet.ts","../../src/layaAir/laya/ani/GraphicsAni.ts","../../src/layaAir/laya/ani/bone/IkConstraint.ts","../../src/layaAir/laya/ani/bone/PathConstraint.ts","../../src/layaAir/laya/ani/bone/TfConstraint.ts","../../src/layaAir/laya/ani/bone/Skeleton.ts","../../src/layaAir/laya/ani/bone/Transform.ts","../../src/layaAir/laya/ani/bone/Bone.ts","../../src/layaAir/laya/ani/bone/TfConstraintData.ts","../../src/layaAir/laya/ani/bone/PathConstraintData.ts","../../src/layaAir/laya/ani/bone/DeformAniData.ts","../../src/layaAir/laya/ani/bone/DeformSlotData.ts","../../src/layaAir/laya/ani/bone/DeformSlotDisplayData.ts","../../src/layaAir/laya/ani/bone/DrawOrderData.ts","../../src/layaAir/laya/ani/bone/EventData.ts","../../src/layaAir/laya/ani/bone/UVTools.ts","../../src/layaAir/laya/ani/bone/canvasmesh/MeshData.ts","../../src/layaAir/laya/ani/bone/canvasmesh/SkinMeshForGraphic.ts","../../src/layaAir/laya/ani/bone/BoneSlot.ts","../../src/layaAir/laya/ani/bone/SkinData.ts","../../src/layaAir/laya/ani/bone/SkinSlotDisplayData.ts","../../src/layaAir/laya/ani/bone/SlotData.ts","../../src/layaAir/laya/ani/bone/IkConstraintData.ts","../../src/layaAir/laya/ani/bone/Templet.ts","../../src/layaAir/laya/ani/TempletLoader.ts","../../src/layaAir/laya/ani/ModuleDef.ts","../../src/layaAir/laya/ani/swf/MovieClip.ts"],"sourcesContent":["import { Skeleton } from \"./bone/Skeleton\";\r\nimport { AnimationTemplet } from \"./AnimationTemplet\";\r\nimport { Templet } from \"./bone/Templet\";\r\n/**\r\n * @internal\r\n */\r\nexport class IAniLib {\r\n    static Skeleton: typeof Skeleton = null;\r\n    static AnimationTemplet: typeof AnimationTemplet = null;\r\n    static Templet: typeof Templet = null;\r\n}\r\n","import { AnimationNodeContent } from \"./AnimationNodeContent\";\r\n/**\r\n * @internal\r\n * @author ...\r\n */\r\nexport class AnimationContent {\r\n\tnodes: AnimationNodeContent[];\r\n\tname: string;\r\n\tplayTime: number;\r\n\tbone3DMap: any;\r\n\ttotalKeyframeDatasLength: number;\r\n}\r\n\r\n","import { KeyFramesContent } from \"./KeyFramesContent\";\r\n/**\r\n * @internal\r\n */\r\nexport class AnimationNodeContent {\r\n\tname: string;\r\n\tparentIndex: number;\r\n\tparent: AnimationNodeContent;\r\n\tkeyframeWidth: number;\r\n\tlerpType: number;\r\n\tinterpolationMethod: any[];\r\n\tchilds: any[];\r\n\tkeyFrame: KeyFramesContent[];// = new Vector.<KeyFramesContent>;\r\n\tplayTime: number;\r\n\textenData: ArrayBuffer;\r\n\tdataOffset: number;\r\n}\r\n\r\n","/**\r\n * 关键帧\r\n */\r\nexport class KeyFramesContent {\r\n\t//TODO 这个对内存影响较大，建议减少一下\r\n\t/**开始时间 */\r\n\tstartTime: number;\r\n\t/**持续时间 */\r\n\tduration: number;\r\n\t/**私有插值方式 */\r\n\tinterpolationData: any[];//私有插值方式 [type0(插值类型),Data0(插值数据,可为空)，type1(插值类型),Data1(插值数据,可为空)] 注意：254全线性插值，255全不插值\r\n\t/**数据 */\r\n\tdata: Float32Array;//= new Float32Array();\t数据\r\n\t/**数据变化量 */\r\n\tdData: Float32Array;//= new Float32Array();\t数据变化量\r\n\t/**下一次的数据 */\r\n\tnextData: Float32Array;//= new Float32Array();\r\n\r\n}\r\n\r\n\r\n","import { AnimationTemplet } from \"./AnimationTemplet\";\r\nimport { AnimationContent } from \"./AnimationContent\";\r\nimport { AnimationNodeContent } from \"./AnimationNodeContent\";\r\nimport { KeyFramesContent } from \"./KeyFramesContent\";\r\nimport { IAniLib } from \"./AniLibPack\";\r\nimport { Byte } from \"../utils/Byte\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AnimationParser01 {\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tstatic parse(templet: AnimationTemplet, reader: Byte): void {\r\n\t\tvar data: ArrayBuffer = reader.__getBuffer();\r\n\t\tvar i: number, j: number, k: number, n: number, l: number, m: number, o: number;\r\n\t\t//if (head != KeyframesAniTemplet.LAYA_ANIMATION_VISION)\r\n\t\t//{\r\n\t\t//trace(\"[Error] Version \" + _aniVersion + \" The engine is inconsistent, update to the version \" + KeyframesAniTemplet.LAYA_ANIMATION_VISION + \" please.\");\r\n\t\t//return;\r\n\t\t//}\r\n\t\tvar aniClassName: string = reader.readUTFString();//字符串(动画播放器类名，缺省为ANI)\r\n\t\ttemplet._aniClassName = aniClassName;\r\n\t\tvar strList: any[] = reader.readUTFString().split(\"\\n\");//字符串(\\n分割 UTF8 )\r\n\t\tvar aniCount: number = reader.getUint8();//动画块数:Uint8\r\n\r\n\t\tvar publicDataPos: number = reader.getUint32();//公用数据POS\t\r\n\t\tvar publicExtDataPos: number = reader.getUint32();//公用扩展数据POS\r\n\r\n\t\tvar publicData: ArrayBuffer;//获取公用数据\r\n\t\tif (publicDataPos > 0)\r\n\t\t\tpublicData = data.slice(publicDataPos, publicExtDataPos);\r\n\t\tvar publicRead: Byte = new Byte(publicData);\r\n\r\n\t\tif (publicExtDataPos > 0)//获取公用扩展数据\r\n\t\t\ttemplet._publicExtData = data.slice(publicExtDataPos, data.byteLength);\r\n\r\n\t\ttemplet._useParent = !!reader.getUint8();\r\n\t\ttemplet._anis.length = aniCount;\r\n\r\n\t\tfor (i = 0; i < aniCount; i++) {\r\n\t\t\tvar ani: AnimationContent = templet._anis[i] = new AnimationContent();\r\n\t\t\t//[IF-SCRIPT] {};//不要删除\r\n\t\t\tani.nodes = [];\r\n\t\t\tvar name: string = ani.name = strList[reader.getUint16()];//获得骨骼名字\r\n\r\n\t\t\ttemplet._aniMap[name] = i;//按名字可以取得动画索引\r\n\t\t\tani.bone3DMap = {};\r\n\t\t\tani.playTime = reader.getFloat32();//本骨骼播放时间\r\n\t\t\tvar boneCount: number = ani.nodes.length = reader.getUint8();//得到本动画骨骼数目\r\n\r\n\t\t\tani.totalKeyframeDatasLength = 0;\r\n\r\n\t\t\tfor (j = 0; j < boneCount; j++) {\r\n\t\t\t\tvar node: AnimationNodeContent = ani.nodes[j] = new AnimationNodeContent();\r\n\t\t\t\t//[IF-SCRIPT] {};//不要删除\r\n\t\t\t\tnode.childs = [];\r\n\r\n\t\t\t\tvar nameIndex: number = reader.getInt16();\r\n\t\t\t\tif (nameIndex >= 0) {\r\n\t\t\t\t\tnode.name = strList[nameIndex];//骨骼名字\r\n\t\t\t\t\tani.bone3DMap[node.name] = j;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.keyFrame = [];\r\n\t\t\t\tnode.parentIndex = reader.getInt16();//父对象编号，相对本动画(INT16,-1表示没有)\r\n\t\t\t\tnode.parentIndex == -1 ? node.parent = null : node.parent = ani.nodes[node.parentIndex]\r\n\r\n\t\t\t\tnode.lerpType = reader.getUint8();//该节点插值类型:0为不插值，1为逐节点插值，2为私有插值\r\n\r\n\t\t\t\tvar keyframeParamsOffset: number = reader.getUint32();//相对于数据扩展区的偏移地址\r\n\t\t\t\tpublicRead.pos = keyframeParamsOffset;//切换到数据区偏移地址\r\n\r\n\t\t\t\tvar keyframeDataCount: number = node.keyframeWidth = publicRead.getUint16();//keyframe数据宽度:Uint8\t\t\r\n\t\t\t\tani.totalKeyframeDatasLength += keyframeDataCount;\r\n\t\t\t\t//每个数据的插值方式:Uint8*keyframe数据宽度\r\n\t\t\t\tif (node.lerpType === 0 || node.lerpType === 1)//是否逐节点插值\r\n\t\t\t\t{\r\n\t\t\t\t\tnode.interpolationMethod = [];\r\n\t\t\t\t\tnode.interpolationMethod.length = keyframeDataCount;\r\n\t\t\t\t\tfor (k = 0; k < keyframeDataCount; k++)\r\n\t\t\t\t\t\tnode.interpolationMethod[k] = IAniLib.AnimationTemplet.interpolation[publicRead.getUint8()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (node.parent != null)\r\n\t\t\t\t\tnode.parent.childs.push(node);\r\n\r\n\t\t\t\tvar privateDataLen: number = reader.getUint16();//\"UINT16\", [1],//私有数据长度\r\n\t\t\t\tif (privateDataLen > 0) {\r\n\t\t\t\t\t//\"BYTE\", [1],//私有数据\r\n\t\t\t\t\tnode.extenData = data.slice(reader.pos, reader.pos + privateDataLen);\r\n\t\t\t\t\treader.pos += privateDataLen;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\t\tnode.keyFrame.length = keyframeCount;\r\n\t\t\t\tvar startTime: number = 0;\r\n\t\t\t\tvar keyFrame: KeyFramesContent;\r\n\t\t\t\tfor (k = 0, n = keyframeCount; k < n; k++) {\r\n\t\t\t\t\tkeyFrame = node.keyFrame[k] = new KeyFramesContent();\r\n\t\t\t\t\t//[IF-SCRIPT] {};//不要删除\r\n\t\t\t\t\tkeyFrame.duration = reader.getFloat32();\r\n\t\t\t\t\tkeyFrame.startTime = startTime;\r\n\r\n\t\t\t\t\tif (node.lerpType === 2)//是否逐帧插值\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyFrame.interpolationData = [];\r\n\t\t\t\t\t\tvar interDataLength: number = reader.getUint8();//插值数据长度\r\n\t\t\t\t\t\tvar lerpType: number;\r\n\t\t\t\t\t\tlerpType = reader.getFloat32();\r\n\t\t\t\t\t\tswitch (lerpType) {\r\n\t\t\t\t\t\t\tcase 254: //全线性插值\r\n\t\t\t\t\t\t\t\tkeyFrame.interpolationData.length = keyframeDataCount;\r\n\t\t\t\t\t\t\t\tfor (o = 0; o < keyframeDataCount; o++)\r\n\t\t\t\t\t\t\t\t\tkeyFrame.interpolationData[o] = 0;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 255: //全不插值\r\n\t\t\t\t\t\t\t\tkeyFrame.interpolationData.length = keyframeDataCount;\r\n\t\t\t\t\t\t\t\tfor (o = 0; o < keyframeDataCount; o++)\r\n\t\t\t\t\t\t\t\t\tkeyFrame.interpolationData[o] = 5;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tkeyFrame.interpolationData.push(lerpType);\r\n\t\t\t\t\t\t\t\tfor (m = 1; m < interDataLength; m++) {\r\n\t\t\t\t\t\t\t\t\tkeyFrame.interpolationData.push(reader.getFloat32());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//for (m = 0; m < interDataLength; m++) {\r\n\t\t\t\t\t\t//var lerpData:int = read.getFloat32();//插值数据\r\n\t\t\t\t\t\t//switch (lerpData) {\r\n\t\t\t\t\t\t//case 254: //全线性插值\r\n\t\t\t\t\t\t//keyFrame.interpolationData.length = keyframeDataCount;\r\n\t\t\t\t\t\t//for (o = 0; o < keyframeDataCount; o++)\r\n\t\t\t\t\t\t//keyFrame.interpolationData[o] = 0;\r\n\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t//case 255: //全不插值\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\t//keyFrame.interpolationData.length = keyframeDataCount;\r\n\t\t\t\t\t\t//for (o = 0; o < keyframeDataCount; o++)\r\n\t\t\t\t\t\t//keyFrame.interpolationData[o] = 5;\r\n\t\t\t\t\t\t//break;\r\n\t\t\t\t\t\t//default: \r\n\t\t\t\t\t\t//keyFrame.interpolationData.push(lerpData);\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t\t//}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkeyFrame.data = new Float32Array(keyframeDataCount);\r\n\t\t\t\t\tkeyFrame.dData = new Float32Array(keyframeDataCount);\r\n\t\t\t\t\tkeyFrame.nextData = new Float32Array(keyframeDataCount);\r\n\t\t\t\t\tfor (l = 0; l < keyframeDataCount; l++) {\r\n\t\t\t\t\t\tkeyFrame.data[l] = reader.getFloat32();\r\n\t\t\t\t\t\tif (keyFrame.data[l] > -0.00000001 && keyFrame.data[l] < 0.00000001) keyFrame.data[l] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstartTime += keyFrame.duration;\r\n\t\t\t\t}\r\n\t\t\t\tkeyFrame.startTime = ani.playTime;//因工具BUG，矫正最后一帧startTime\r\n\t\t\t\tnode.playTime = ani.playTime;//节点总时间可能比总时长大，次处修正\r\n\t\t\t\ttemplet._calculateKeyFrame(node, keyframeCount, keyframeDataCount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { AnimationTemplet } from \"./AnimationTemplet\";\r\nimport { AnimationContent } from \"./AnimationContent\";\r\nimport { AnimationNodeContent } from \"./AnimationNodeContent\";\r\nimport { KeyFramesContent } from \"./KeyFramesContent\";\r\nimport { IAniLib } from \"./AniLibPack\";\r\nimport { Byte } from \"../utils/Byte\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class AnimationParser02 {\r\n\t/**@internal */\r\n\tprivate static _templet: AnimationTemplet;\r\n\t/**@internal */\r\n\tprivate static _reader: Byte;\r\n\t/**@internal */\r\n\tprivate static _strings: any[] = [];\r\n\t/**@internal */\r\n\tprivate static _BLOCK: any = { count: 0 };\r\n\t/**@internal */\r\n\tprivate static _DATA: any = { offset: 0, size: 0 };\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tprivate static READ_DATA(): void {\r\n\t\tAnimationParser02._DATA.offset = AnimationParser02._reader.getUint32();\r\n\t\tAnimationParser02._DATA.size = AnimationParser02._reader.getUint32();\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t//TODO:coverage\r\n\tprivate static READ_BLOCK(): void {\r\n\t\tvar count: number = AnimationParser02._BLOCK.count = AnimationParser02._reader.getUint16();\r\n\t\tvar blockStarts: any[] = AnimationParser02._BLOCK.blockStarts = [];\r\n\t\tvar blockLengths: any[] = AnimationParser02._BLOCK.blockLengths = [];\r\n\t\tfor (var i: number = 0; i < count; i++) {\r\n\t\t\tblockStarts.push(AnimationParser02._reader.getUint32());\r\n\t\t\tblockLengths.push(AnimationParser02._reader.getUint32());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t//TODO:coverage\r\n\tprivate static READ_STRINGS(): void {\r\n\t\tvar offset: number = AnimationParser02._reader.getUint32();\r\n\t\tvar count: number = AnimationParser02._reader.getUint16();\r\n\t\tvar prePos: number = AnimationParser02._reader.pos;\r\n\t\tAnimationParser02._reader.pos = offset + AnimationParser02._DATA.offset;\r\n\r\n\t\tfor (var i: number = 0; i < count; i++)\r\n\t\t\tAnimationParser02._strings[i] = AnimationParser02._reader.readUTFString();\r\n\r\n\t\tAnimationParser02._reader.pos = prePos;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t//TODO:coverage\r\n\tstatic parse(templet: AnimationTemplet, reader: Byte): void {\r\n\t\tAnimationParser02._templet = templet;\r\n\t\tAnimationParser02._reader = reader;\r\n\t\tvar arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n\t\tAnimationParser02.READ_DATA();\r\n\t\tAnimationParser02.READ_BLOCK();\r\n\t\tAnimationParser02.READ_STRINGS();\r\n\t\tfor (var i: number = 0, n: number = AnimationParser02._BLOCK.count; i < n; i++) {\r\n\t\t\tvar index: number = reader.getUint16();\r\n\t\t\tvar blockName: string = AnimationParser02._strings[index];\r\n\t\t\tvar fn: Function = (AnimationParser02 as any)[\"READ_\" + blockName];\r\n\t\t\tif (fn == null)\r\n\t\t\t\tthrow new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n\t\t\telse\r\n\t\t\t\tfn.call(null);\r\n\t\t}\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\tstatic READ_ANIMATIONS(): void {\r\n\t\tvar reader: Byte = AnimationParser02._reader;\r\n\t\tvar arrayBuffer: ArrayBuffer = reader.__getBuffer();\r\n\t\tvar i: number, j: number, k: number, n: number, l: number;\r\n\t\tvar keyframeWidth: number = reader.getUint16();\r\n\t\tvar interpolationMethod: any[] = [];\r\n\t\tinterpolationMethod.length = keyframeWidth;\r\n\t\tfor (i = 0; i < keyframeWidth; i++)\r\n\t\t\tinterpolationMethod[i] = IAniLib.AnimationTemplet.interpolation[reader.getByte()];\r\n\r\n\t\tvar aniCount: number = reader.getUint8();\r\n\t\tAnimationParser02._templet._anis.length = aniCount;\r\n\r\n\t\tfor (i = 0; i < aniCount; i++) {\r\n\t\t\tvar ani: AnimationContent = AnimationParser02._templet._anis[i] = new AnimationContent();\r\n\t\t\tani.nodes = [];\r\n\t\t\tvar aniName: string = ani.name = AnimationParser02._strings[reader.getUint16()];\r\n\t\t\tAnimationParser02._templet._aniMap[aniName] = i;//按名字可以取得动画索引\r\n\t\t\tani.bone3DMap = {};\r\n\t\t\tani.playTime = reader.getFloat32();\r\n\t\t\tvar boneCount: number = ani.nodes.length = reader.getInt16();\r\n\t\t\tani.totalKeyframeDatasLength = 0;\r\n\t\t\tfor (j = 0; j < boneCount; j++) {\r\n\t\t\t\tvar node: AnimationNodeContent = ani.nodes[j] = new AnimationNodeContent();\r\n\t\t\t\tnode.keyframeWidth = keyframeWidth;//TODO:存在骨骼里是否合并，需要优化到动画中更合理。\r\n\t\t\t\tnode.childs = [];\r\n\r\n\t\t\t\tvar nameIndex: number = reader.getUint16();\r\n\t\t\t\tif (nameIndex >= 0) {\r\n\t\t\t\t\tnode.name = AnimationParser02._strings[nameIndex];//骨骼名字\r\n\t\t\t\t\tani.bone3DMap[node.name] = j;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.keyFrame = [];\r\n\t\t\t\tnode.parentIndex = reader.getInt16();//父对象编号，相对本动画(INT16,-1表示没有)\r\n\t\t\t\tnode.parentIndex == -1 ? node.parent = null : node.parent = ani.nodes[node.parentIndex]\r\n\r\n\t\t\t\tani.totalKeyframeDatasLength += keyframeWidth;\r\n\r\n\t\t\t\tnode.interpolationMethod = interpolationMethod;//TODO:\r\n\r\n\t\t\t\tif (node.parent != null)\r\n\t\t\t\t\tnode.parent.childs.push(node);\r\n\r\n\t\t\t\tvar keyframeCount: number = reader.getUint16();\r\n\t\t\t\tnode.keyFrame.length = keyframeCount;\r\n\t\t\t\tvar keyFrame: KeyFramesContent = null, lastKeyFrame: KeyFramesContent = null;\r\n\t\t\t\tfor (k = 0, n = keyframeCount; k < n; k++) {\r\n\t\t\t\t\tkeyFrame = node.keyFrame[k] = new KeyFramesContent();\r\n\t\t\t\t\tkeyFrame.startTime = reader.getFloat32();\r\n\r\n\t\t\t\t\t(lastKeyFrame) && (lastKeyFrame.duration = keyFrame.startTime - lastKeyFrame.startTime);\r\n\r\n\t\t\t\t\tkeyFrame.dData = new Float32Array(keyframeWidth);\r\n\t\t\t\t\tkeyFrame.nextData = new Float32Array(keyframeWidth);\r\n\r\n\t\t\t\t\tvar offset: number = AnimationParser02._DATA.offset;\r\n\r\n\t\t\t\t\tvar keyframeDataOffset: number = reader.getUint32();\r\n\t\t\t\t\tvar keyframeDataLength: number = keyframeWidth * 4;\r\n\t\t\t\t\tvar keyframeArrayBuffer: ArrayBuffer = arrayBuffer.slice(offset + keyframeDataOffset, offset + keyframeDataOffset + keyframeDataLength);\r\n\t\t\t\t\tkeyFrame.data = new Float32Array(keyframeArrayBuffer);\r\n\t\t\t\t\tlastKeyFrame = keyFrame;\r\n\t\t\t\t}\r\n\t\t\t\tkeyFrame.duration = 0;\r\n\r\n\t\t\t\tnode.playTime = ani.playTime;//节点总时间可能比总时长大，次处修正\r\n\t\t\t\tAnimationParser02._templet._calculateKeyFrame(node, keyframeCount, keyframeWidth);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport class AnimationState {\r\n\tstatic stopped: number = 0;\r\n\tstatic paused: number = 1;\r\n\tstatic playing: number = 2;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n}\r\n\r\n","import { AnimationTemplet } from \"./AnimationTemplet\";\r\nimport { AnimationState } from \"./AnimationState\";\r\nimport { Stat } from \"../utils/Stat\";\r\nimport { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\n\r\n\r\n/**开始播放时调度。\r\n * @eventType Event.PLAYED\r\n * */\r\n/*[Event(name = \"played\", type = \"laya.events.Event\")]*/\r\n/**暂停时调度。\r\n * @eventType Event.PAUSED\r\n * */\r\n/*[Event(name = \"paused\", type = \"laya.events.Event\")]*/\r\n/**完成一次循环时调度。\r\n * @eventType Event.COMPLETE\r\n * */\r\n/*[Event(name = \"complete\", type = \"laya.events.Event\")]*/\r\n/**停止时调度。\r\n * @eventType Event.STOPPED\r\n * */\r\n/*[Event(name = \"stopped\", type = \"laya.events.Event\")]*/\r\n\r\n/**\r\n * <code>AnimationPlayer</code> 类用于动画播放器。\r\n */\r\nexport class AnimationPlayer extends EventDispatcher {\r\n\t/**@internal */\r\n\tprivate _destroyed: boolean;\r\n\t/** @internal 数据模板*/\r\n\tprivate _templet: AnimationTemplet;\r\n\t/** @internal 当前精确时间，不包括重播时间*/\r\n\tprivate _currentTime: number;\r\n\t/** @internal 当前帧时间，不包括重播时间*/\r\n\tprivate _currentFrameTime: number;\t// 这个是根据当前帧数反向计算的时间。\r\n\t/** @internal 动画播放的起始时间位置*/\r\n\tprivate _playStart: number;\r\n\t/** @internal 动画播放的结束时间位置*/\r\n\tprivate _playEnd: number;\r\n\t/** @internal 动画播放一次的总时间*/\r\n\tprivate _playDuration: number;\r\n\t/** @internal 动画播放总时间*/\r\n\tprivate _overallDuration: number;\r\n\t/** @internal 是否在一次动画结束时停止。 设置这个标志后就不会再发送complete事件了*/\r\n\tprivate _stopWhenCircleFinish: boolean;\r\n\t/**@internal 已播放时间，包括重播时间*/\r\n\t_elapsedPlaybackTime: number;\r\n\t/** @internal 播放时帧数*/\r\n\tprivate _startUpdateLoopCount: number;\r\n\t/** @internal 当前动画索引*/\r\n\tprivate _currentAnimationClipIndex: number;\r\n\t/** @internal 当前帧数*/\r\n\tprivate _currentKeyframeIndex: number;\r\n\t/** @internal 是否暂停*/\r\n\tprivate _paused: boolean;\r\n\t/** @internal 默认帧率,必须大于0*/\r\n\tprivate _cacheFrameRate: number;\r\n\t/** @internal 帧率间隔时间*/\r\n\tprivate _cacheFrameRateInterval: number;\r\n\t/** @internal 缓存播放速率*/\r\n\tprivate _cachePlayRate: number;\r\n\r\n\t/**是否缓存*/\r\n\tisCache: boolean = true;\r\n\t/** 播放速率*/\r\n\tplaybackRate: number = 1.0;\r\n\t/** 停止时是否归零*/\r\n\treturnToZeroStopped: boolean;\r\n\r\n\t/**\r\n\t * 获取动画数据模板\r\n\t * @param\tvalue 动画数据模板\r\n\t */\r\n\tget templet(): AnimationTemplet {\r\n\t\treturn this._templet;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置动画数据模板,注意：修改此值会有计算开销。\r\n\t * @param\tvalue 动画数据模板\r\n\t */\r\n\tset templet(value: AnimationTemplet) {\r\n\t\tif (!(this.state === AnimationState.stopped))\r\n\t\t\tthis.stop(true);\r\n\r\n\t\tif (this._templet !== value) {\r\n\t\t\tthis._templet = value;\r\n\t\t\t//if (value.loaded)\r\n\t\t\tthis._computeFullKeyframeIndices();\r\n\t\t\t//else\r\n\t\t\t//value.once(Event.LOADED, this, _onTempletLoadedComputeFullKeyframeIndices, [_cachePlayRate, _cacheFrameRate]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 动画播放的起始时间位置。\r\n\t * @return\t 起始时间位置。\r\n\t */\r\n\tget playStart(): number {\r\n\t\treturn this._playStart;\r\n\t}\r\n\r\n\t/**\r\n\t * 动画播放的结束时间位置。\r\n\t * @return\t 结束时间位置。\r\n\t */\r\n\tget playEnd(): number {\r\n\t\treturn this._playEnd;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取动画播放一次的总时间\r\n\t * @return\t 动画播放一次的总时间\r\n\t */\r\n\tget playDuration(): number {\r\n\t\treturn this._playDuration;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取动画播放的总总时间\r\n\t * @return\t 动画播放的总时间\r\n\t */\r\n\tget overallDuration(): number {\r\n\t\treturn this._overallDuration;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前动画索引\r\n\t * @return\tvalue 当前动画索引\r\n\t */\r\n\tget currentAnimationClipIndex(): number {\r\n\t\treturn this._currentAnimationClipIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前帧数\r\n\t * @return\t 当前帧数\r\n\t */\r\n\tget currentKeyframeIndex(): number {\r\n\t\treturn this._currentKeyframeIndex;\r\n\t}\r\n\r\n\t/**\r\n\t *  获取当前精确时间，不包括重播时间\r\n\t * @return\tvalue 当前时间\r\n\t */\r\n\tget currentPlayTime(): number {\r\n\t\treturn this._currentTime + this._playStart;\r\n\t}\r\n\r\n\t/**\r\n\t *  获取当前帧时间，不包括重播时间\r\n\t * @return\tvalue 当前时间\r\n\t */\r\n\tget currentFrameTime(): number {\r\n\t\treturn this._currentFrameTime;\r\n\t}\r\n\r\n\t/**\r\n\t *  获取缓存播放速率。*\r\n\t * @return\t 缓存播放速率。\r\n\t */\r\n\tget cachePlayRate(): number {\r\n\t\treturn this._cachePlayRate;\r\n\t}\r\n\r\n\t/**\r\n\t *  设置缓存播放速率,默认值为1.0,注意：修改此值会有计算开销。*\r\n\t * @return\tvalue 缓存播放速率。\r\n\t */\r\n\tset cachePlayRate(value: number) {\r\n\t\tif (this._cachePlayRate !== value) {\r\n\t\t\tthis._cachePlayRate = value;\r\n\t\t\tif (this._templet)\r\n\t\t\t\t//if (_templet.loaded)\r\n\t\t\t\tthis._computeFullKeyframeIndices();\r\n\t\t\t//else\r\n\t\t\t//_templet.once(Event.LOADED, this, _onTempletLoadedComputeFullKeyframeIndices, [value, _cacheFrameRate]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  获取默认帧率*\r\n\t * @return\tvalue 默认帧率\r\n\t */\r\n\tget cacheFrameRate(): number {\r\n\t\treturn this._cacheFrameRate;\r\n\t}\r\n\r\n\t/**\r\n\t *  设置默认帧率,每秒60帧,注意：修改此值会有计算开销。*\r\n\t * @return\tvalue 缓存帧率\r\n\t */\r\n\tset cacheFrameRate(value: number) {\r\n\t\tif (this._cacheFrameRate !== value) {\r\n\t\t\tthis._cacheFrameRate = value;\r\n\t\t\tthis._cacheFrameRateInterval = 1000.0 / this._cacheFrameRate;\r\n\t\t\tif (this._templet)\r\n\t\t\t\t//if (_templet.loaded)\r\n\t\t\t\tthis._computeFullKeyframeIndices();\r\n\t\t\t//else\r\n\t\t\t//_templet.once(Event.LOADED, this, _onTempletLoadedComputeFullKeyframeIndices, [_cachePlayRate, value]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 设置当前播放位置\r\n\t * @param\tvalue 当前时间\r\n\t */\r\n\tset currentTime(value: number) {\r\n\t\tif (this._currentAnimationClipIndex === -1 || !this._templet /*|| !_templet.loaded*/)\r\n\t\t\treturn;\r\n\r\n\t\tif (value < this._playStart || value > this._playEnd)\r\n\t\t\tthrow new Error(\"AnimationPlayer:value must large than playStartTime,small than playEndTime.\");\r\n\r\n\t\tthis._startUpdateLoopCount = Stat.loopCount;\r\n\t\tvar cacheFrameInterval: number = this._cacheFrameRateInterval * this._cachePlayRate;\r\n\t\tthis._currentTime = value /*% playDuration*/;\r\n\t\tthis._currentKeyframeIndex = Math.floor(this.currentPlayTime / cacheFrameInterval);\r\n\t\tthis._currentFrameTime = this._currentKeyframeIndex * cacheFrameInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前是否暂停\r\n\t * @return\t是否暂停\r\n\t */\r\n\tget paused(): boolean {\r\n\t\treturn this._paused;\r\n\t}\r\n\r\n\t/**\r\n\t * 设置是否暂停\r\n\t * @param\tvalue 是否暂停\r\n\t */\r\n\tset paused(value: boolean) {\r\n\t\tthis._paused = value;\r\n\t\tvalue && this.event(Event.PAUSED);\r\n\t}\r\n\r\n\t/**\r\n\t * 获取缓存帧率间隔时间\r\n\t * @return\t缓存帧率间隔时间\r\n\t */\r\n\tget cacheFrameRateInterval(): number {\r\n\t\treturn this._cacheFrameRateInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前播放状态\r\n\t * @return\t当前播放状态\r\n\t */\r\n\tget state(): number {\r\n\t\tif (this._currentAnimationClipIndex === -1)\r\n\t\t\treturn AnimationState.stopped;\r\n\t\tif (this._paused)\r\n\t\t\treturn AnimationState.paused;\r\n\t\treturn AnimationState.playing;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取是否已销毁。\r\n\t * @return 是否已销毁。\r\n\t */\r\n\tget destroyed(): boolean {\r\n\t\treturn this._destroyed;\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个 <code>AnimationPlayer</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._destroyed = false;\r\n\t\tthis._currentAnimationClipIndex = -1;\r\n\t\tthis._currentKeyframeIndex = -1;\r\n\t\tthis._currentTime = 0.0;\r\n\t\tthis._overallDuration = Number.MAX_VALUE;\r\n\t\tthis._stopWhenCircleFinish = false;\r\n\t\tthis._elapsedPlaybackTime = 0;\r\n\t\tthis._startUpdateLoopCount = -1;\r\n\t\tthis._cachePlayRate = 1.0;\r\n\t\tthis.cacheFrameRate = 60;\r\n\t\tthis.returnToZeroStopped = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_onTempletLoadedComputeFullKeyframeIndices(cachePlayRate: number, cacheFrameRate: number, templet: AnimationTemplet): void {\r\n\t\tif (this._templet === templet && this._cachePlayRate === cachePlayRate && this._cacheFrameRate === cacheFrameRate)\r\n\t\t\tthis._computeFullKeyframeIndices();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _computeFullKeyframeIndices(): void {\r\n\t\treturn;// 先改成实时计算了。否则占用内存太多\r\n\t\tvar templet: AnimationTemplet = this._templet;\r\n\t\tif (templet._fullFrames)\r\n\t\t\treturn;\r\n\r\n\r\n\r\n\t\tvar anifullFrames: any[] = this._templet._fullFrames = [];\r\n\r\n\t\tvar cacheFrameInterval: number = this._cacheFrameRateInterval * this._cachePlayRate;\r\n\r\n\t\tfor (var i: number = 0, iNum: number = templet.getAnimationCount(); i < iNum; i++) {\r\n\t\t\tvar aniFullFrame: any[] = [];\r\n\t\t\tif (!templet.getAnimation(i).nodes) {\r\n\t\t\t\tanifullFrames.push(aniFullFrame);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor (var j: number = 0, jNum: number = templet.getAnimation(i).nodes.length; j < jNum; j++) {\r\n\t\t\t\tvar node: any = templet.getAnimation(i).nodes[j];\r\n\t\t\t\tvar frameCount: number = Math.round(node.playTime / cacheFrameInterval);\r\n\t\t\t\tvar nodeFullFrames: Uint16Array = new Uint16Array(frameCount + 1);//本骨骼对应的全帧关键帧编号\r\n\t\t\t\t// 先把关键帧所在的位置填上\r\n\t\t\t\tvar stidx: number = -1;// 第一帧的位置，应该是0\r\n\t\t\t\tvar nodeframes: any[] = node.keyFrame;\r\n\t\t\t\tfor (var n: number = 0, nNum: number = nodeframes.length; n < nNum; n++) {\r\n\t\t\t\t\tvar keyFrame: any = nodeframes[n];\r\n\t\t\t\t\tvar pos: number = Math.round(keyFrame.startTime / cacheFrameInterval);\r\n\t\t\t\t\tif (stidx < 0 && pos > 0) {\r\n\t\t\t\t\t\tstidx = pos;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pos <= frameCount) {// 实际大小是frameCount+1\r\n\t\t\t\t\t\tnodeFullFrames[pos] = n;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 再把空隙填满\r\n\t\t\t\tvar cf: number = 0;\r\n\t\t\t\tfor (n = stidx; n < frameCount; n++) {\t// 实际大小是frameCount+1 \r\n\t\t\t\t\tif (nodeFullFrames[n] == 0) {\r\n\t\t\t\t\t\tnodeFullFrames[n] = cf;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcf = nodeFullFrames[n]; \t// 新的开始\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\taniFullFrame.push(nodeFullFrames);\r\n\t\t\t}\r\n\t\t\tanifullFrames.push(aniFullFrame);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _onAnimationTempletLoaded(): void {\r\n\t\t(this.destroyed) || (this._calculatePlayDuration());\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _calculatePlayDuration(): void {\r\n\t\tif (this.state !== AnimationState.stopped) {//防止动画已停止，异步回调导致BUG\r\n\t\t\tvar oriDuration: number = this._templet.getAniDuration(this._currentAnimationClipIndex);\r\n\t\t\t(this._playEnd === 0) && (this._playEnd = oriDuration);\r\n\r\n\t\t\tif (this._playEnd > oriDuration)//以毫秒为最小时间单位,取整。FillTextureSprite\r\n\t\t\t\tthis._playEnd = oriDuration;\r\n\r\n\t\t\tthis._playDuration = this._playEnd - this._playStart;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tprivate _setPlayParams(time: number, cacheFrameInterval: number): void {\r\n\t\tthis._currentTime = time;\r\n\t\tthis._currentKeyframeIndex = Math.floor((this.currentPlayTime) / cacheFrameInterval + 0.01);\r\n\t\tthis._currentFrameTime = this._currentKeyframeIndex * cacheFrameInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * 动画停止了对应的参数。目前都是设置时间为最后\r\n\t * @private\r\n\t */\r\n\tprivate _setPlayParamsWhenStop(currentAniClipPlayDuration: number, cacheFrameInterval: number, playEnd: number = -1): void {\r\n\t\tthis._currentTime = currentAniClipPlayDuration;\r\n\t\tvar endTime: number = playEnd > 0 ? playEnd : currentAniClipPlayDuration;\r\n\t\tthis._currentKeyframeIndex = Math.floor(endTime / cacheFrameInterval + 0.01);\r\n\t\tthis._currentKeyframeIndex = Math.floor(currentAniClipPlayDuration / cacheFrameInterval + 0.01);\r\n\t\tthis._currentFrameTime = this._currentKeyframeIndex * cacheFrameInterval;\r\n\t\tthis._currentAnimationClipIndex = -1;//动画结束\t\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_update(elapsedTime: number): void {\r\n\t\tif (this._currentAnimationClipIndex === -1 || this._paused || !this._templet /*|| !_templet.loaded*/)//动画停止或暂停，不更新\r\n\t\t\treturn;\r\n\r\n\t\tvar cacheFrameInterval: number = this._cacheFrameRateInterval * this._cachePlayRate;\r\n\t\tvar time: number = 0;\t// 时间间隔\r\n\t\t// 计算经过的时间\r\n\t\t(this._startUpdateLoopCount !== Stat.loopCount) && (time = elapsedTime * this.playbackRate, this._elapsedPlaybackTime += time);//elapsedTime为距离上一帧时间,首帧播放如果_startPlayLoopCount===Stat.loopCount，则不累加时间\r\n\r\n\t\tvar currentAniClipPlayDuration: number = this.playDuration;\r\n\t\t// 如果设置了总播放时间，并且超过总播放时间了，就发送stop事件\r\n\t\t// 如果没有设置_overallDuration，且播放时间超过的动画总时间，也发送stop事件？  也就是说单次播放不会发出complete事件？\r\n\t\t// 如果设置了loop播放，则会设置 _overallDuration \r\n\t\ttime += this._currentTime;\r\n\t\tif ((this._overallDuration !== 0 && this._elapsedPlaybackTime >= this._overallDuration) || (this._overallDuration === 0 && this._elapsedPlaybackTime >= currentAniClipPlayDuration\r\n\t\t\t|| (this._overallDuration === 0 && time >= this.playEnd))) {\r\n\t\t\tthis._setPlayParamsWhenStop(currentAniClipPlayDuration, cacheFrameInterval, this.playEnd);\t// (总播放时间,缓存帧的时间间隔(33.33))\r\n\t\t\tthis.event(Event.STOPPED);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (currentAniClipPlayDuration > 0) {// 如果设置了 总动画时间，一般都设置了把，就是动画文件本身记录的时间\r\n\t\t\tif (time >= currentAniClipPlayDuration) {\t// 如果超出了总动画时间\r\n\t\t\t\tif (this._stopWhenCircleFinish) {// 如果只播放一次，就发送stop事件\r\n\t\t\t\t\tthis._setPlayParamsWhenStop(currentAniClipPlayDuration, cacheFrameInterval);// (总播放时间,缓存帧的时间间隔(33.33))\r\n\t\t\t\t\tthis._stopWhenCircleFinish = false;\r\n\t\t\t\t\tthis.event(Event.STOPPED);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 如果多次播放,发送complete事件\r\n\t\t\t\t\ttime = time % currentAniClipPlayDuration;\r\n\t\t\t\t\tthis._setPlayParams(time, cacheFrameInterval);\r\n\t\t\t\t\tthis.event(Event.COMPLETE);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis._setPlayParams(time, cacheFrameInterval);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._stopWhenCircleFinish) {\r\n\t\t\t\tthis._setPlayParamsWhenStop(currentAniClipPlayDuration, cacheFrameInterval);\r\n\t\t\t\tthis._stopWhenCircleFinish = false;\r\n\t\t\t\tthis.event(Event.STOPPED);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._currentTime = this._currentFrameTime = this._currentKeyframeIndex = 0;\r\n\t\t\tthis.event(Event.COMPLETE);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_destroy(): void {\r\n\t\tthis.offAll();\r\n\t\tthis._templet = null;\r\n\t\t//_fullFrames = null;\r\n\t\tthis._destroyed = true;\r\n\t}\r\n\r\n\t/**\r\n\t * 播放动画。\r\n\t * @param\tindex 动画索引。\r\n\t * @param\tplaybackRate 播放速率。\r\n\t * @param\tduration 播放时长（0为1次,Number.MAX_VALUE为循环播放）。\r\n\t * @param\tplayStart 播放的起始时间位置。\r\n\t * @param\tplayEnd 播放的结束时间位置。（0为动画一次循环的最长结束时间位置）。\r\n\t */\r\n\tplay(index: number = 0, playbackRate: number = 1.0, overallDuration: number = /*int.MAX_VALUE*/ 2147483647, playStart: number = 0, playEnd: number = 0): void {\r\n\t\tif (!this._templet)\r\n\t\t\tthrow new Error(\"AnimationPlayer:templet must not be null,maybe you need to set url.\");\r\n\r\n\t\tif (overallDuration < 0 || playStart < 0 || playEnd < 0)\r\n\t\t\tthrow new Error(\"AnimationPlayer:overallDuration,playStart and playEnd must large than zero.\");\r\n\r\n\t\tif ((playEnd !== 0) && (playStart > playEnd))\r\n\t\t\tthrow new Error(\"AnimationPlayer:start must less than end.\");\r\n\r\n\t\tthis._currentTime = 0;\r\n\t\tthis._currentFrameTime = 0;\r\n\t\tthis._elapsedPlaybackTime = 0;\r\n\t\tthis.playbackRate = playbackRate;\r\n\t\tthis._overallDuration = overallDuration;\r\n\t\tthis._playStart = playStart;\r\n\t\tthis._playEnd = playEnd;\r\n\t\tthis._paused = false;\r\n\t\tthis._currentAnimationClipIndex = index;\r\n\t\tthis._currentKeyframeIndex = 0;\r\n\t\tthis._startUpdateLoopCount = Stat.loopCount;\r\n\t\tthis.event(Event.PLAYED);\r\n\r\n\t\t//if (_templet.loaded)\r\n\t\tthis._calculatePlayDuration();\r\n\t\t//else\r\n\t\t//_templet.once(Event.LOADED, this, _onAnimationTempletLoaded);\r\n\r\n\t\tthis._update(0);//如果分段播放,可修正帧率\r\n\t}\r\n\r\n\t/**\r\n\t * 播放动画。\r\n\t * @param\tindex 动画索引。\r\n\t * @param\tplaybackRate 播放速率。\r\n\t * @param\tduration 播放时长（0为1次,Number.MAX_VALUE为循环播放）。\r\n\t * @param\tplayStartFrame 播放的原始起始帧率位置。\r\n\t * @param\tplayEndFrame 播放的原始结束帧率位置。（0为动画一次循环的最长结束时间位置）。\r\n\t */\r\n\tplayByFrame(index: number = 0, playbackRate: number = 1.0, overallDuration: number = /*int.MAX_VALUE*/ 2147483647, playStartFrame: number = 0, playEndFrame: number = 0, fpsIn3DBuilder: number = 30): void {\r\n\t\tvar interval: number = 1000.0 / fpsIn3DBuilder;\r\n\t\tthis.play(index, playbackRate, overallDuration, playStartFrame * interval, playEndFrame * interval);\r\n\t}\r\n\r\n\t/**\r\n\t * 停止播放当前动画\r\n\t * 如果不是立即停止就等待动画播放完成后再停止\r\n\t * @param\timmediate 是否立即停止\r\n\t */\r\n\tstop(immediate: boolean = true): void {\r\n\t\tif (immediate) {\r\n\t\t\tthis._currentTime = this._currentFrameTime = this._currentKeyframeIndex = 0;\r\n\t\t\tthis._currentAnimationClipIndex = -1;\r\n\t\t\tthis.event(Event.STOPPED);\r\n\t\t} else {\r\n\t\t\tthis._stopWhenCircleFinish = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tdestroy(): void {\r\n\r\n\t}\r\n\r\n}\r\n\r\n","import { Bezier } from \"../../maths/Bezier\";\r\n\r\n/**\r\n * @internal\r\n * ...\r\n * @author ww\r\n */\r\nexport class BezierLerp {\r\n\r\n    constructor() {\r\n\r\n    }\r\n    /**@internal */\r\n    private static _bezierResultCache: any = {};\r\n    /**@internal */\r\n    private static _bezierPointsCache: any = {};\r\n\r\n    //TODO:coverage\r\n    static getBezierRate(t: number, px0: number, py0: number, px1: number, py1: number): number {\r\n        var key: number = BezierLerp._getBezierParamKey(px0, py0, px1, py1);\r\n        var vKey: number = key * 100 + t;\r\n        if (BezierLerp._bezierResultCache[vKey]) return BezierLerp._bezierResultCache[vKey];\r\n        var points: any[] = BezierLerp._getBezierPoints(px0, py0, px1, py1, key);\r\n        var i: number, len: number;\r\n        len = points.length;\r\n        for (i = 0; i < len; i += 2) {\r\n            if (t <= points[i]) {\r\n                BezierLerp._bezierResultCache[vKey] = points[i + 1];\r\n                return points[i + 1];\r\n            }\r\n        }\r\n        BezierLerp._bezierResultCache[vKey] = 1;\r\n        return 1;\r\n    }\r\n\r\n    //TODO:coverage\r\n    /**@internal */\r\n    private static _getBezierParamKey(px0: number, py0: number, px1: number, py1: number): number {\r\n        return (((px0 * 100 + py0) * 100 + px1) * 100 + py1) * 100;\r\n    }\r\n\r\n    //TODO:coverage\r\n    /**@internal */\r\n    private static _getBezierPoints(px0: number, py0: number, px1: number, py1: number, key: number): any[] {\r\n        if (BezierLerp._bezierPointsCache[key]) return BezierLerp._bezierPointsCache[key];\r\n        var controlPoints: any[];\r\n        controlPoints = [0, 0, px0, py0, px1, py1, 1, 1];\r\n        var bz: Bezier;\r\n        bz = new Bezier();\r\n        var points: any[];\r\n        points = bz.getBezierPoints(controlPoints, 100, 3);\r\n        BezierLerp._bezierPointsCache[key] = points;\r\n        return points;\r\n    }\r\n}\r\n\r\n\r\n","import { AnimationNodeContent } from \"./AnimationNodeContent\";\r\nimport { AnimationContent } from \"./AnimationContent\";\r\nimport { KeyFramesContent } from \"./KeyFramesContent\";\r\nimport { AnimationParser01 } from \"./AnimationParser01\";\r\nimport { AnimationParser02 } from \"./AnimationParser02\";\r\nimport { Resource } from \"../resource/Resource\";\r\nimport { MathUtil } from \"../maths/MathUtil\";\r\nimport { IAniLib } from \"./AniLibPack\";\r\nimport { Byte } from \"../utils/Byte\";\r\nimport { BezierLerp } from \"./math/BezierLerp\";\r\n\r\n/**\r\n * <code>AnimationTemplet</code> 类用于动画模板资源。\r\n */\r\nexport class AnimationTemplet extends Resource {\r\n    /**插值函数 */\r\n    static interpolation: any[] = [AnimationTemplet._LinearInterpolation_0, AnimationTemplet._QuaternionInterpolation_1, AnimationTemplet._AngleInterpolation_2, AnimationTemplet._RadiansInterpolation_3, AnimationTemplet._Matrix4x4Interpolation_4, AnimationTemplet._NoInterpolation_5, AnimationTemplet._BezierInterpolation_6, AnimationTemplet._BezierInterpolation_7];\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _LinearInterpolation_0(bone: AnimationNodeContent, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null): number {\r\n        out[outOfs] = data[index] + dt * dData[index];\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _QuaternionInterpolation_1(bone: any, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null): number {\r\n        var amount: number = duration === 0 ? 0 : dt / duration;\r\n        MathUtil.slerpQuaternionArray(data, index, nextData, index, amount, out, outOfs);//(dt/duration)为amount比例\r\n        return 4;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _AngleInterpolation_2(bone: AnimationNodeContent, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _RadiansInterpolation_3(bone: AnimationNodeContent, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _Matrix4x4Interpolation_4(bone: any, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null): number {\r\n        for (let i = 0; i < 16; i++, index++)\r\n            out[outOfs + i] = data[index] + dt * dData[index];\r\n        return 16;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _NoInterpolation_5(bone: AnimationNodeContent, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null): number {\r\n        out[outOfs] = data[index];\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _BezierInterpolation_6(bone: AnimationNodeContent, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null, offset: number = 0): number {\r\n        out[outOfs] = data[index] + (nextData[index] - data[index]) * BezierLerp.getBezierRate(dt / duration, interData[offset], interData[offset + 1], interData[offset + 2], interData[offset + 3]);\r\n        return 5;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    private static _BezierInterpolation_7(bone: AnimationNodeContent, index: number, out: Float32Array, outOfs: number, data: Float32Array, dt: number, dData: Float32Array, duration: number, nextData: Float32Array, interData: any[] = null, offset: number = 0): number {\r\n        //interData=[x0,y0,x1,y1,start,d,offTime,allTime]\r\n        out[outOfs] = interData[offset + 4] + interData[offset + 5] * BezierLerp.getBezierRate((dt * 0.001 + interData[offset + 6]) / interData[offset + 7], interData[offset], interData[offset + 1], interData[offset + 2], interData[offset + 3]);\r\n        return 9;\r\n    }\r\n\r\n    /**\r\n     * 加载动画模板。\r\n     * @param url 动画模板地址。\r\n     */\r\n    //TODO:coverage\r\n    //public static function load(url_load:String):AnimationTemplet {\r\n    //return Laya.loader.create(url, null, null, AnimationTemplet);\r\n    //}\r\n\r\n    /**@internal */\r\n    _aniVersion: string;\r\n    /**@internal */\r\n    _anis: AnimationContent[] = [];\r\n    /**@internal */\r\n    _aniMap: any = {};\r\n    /**@internal */\r\n    _publicExtData: ArrayBuffer;//公共扩展数据\r\n    /**@internal */\r\n    _useParent: boolean;//是否采用对象树数据格式\r\n    /**@private */\r\n    protected unfixedCurrentFrameIndexes: Uint32Array;\r\n    /**@private */\r\n    protected unfixedCurrentTimes: Float32Array;\r\n    /**@private */\r\n    protected unfixedKeyframes: KeyFramesContent[];\r\n    /**@private */\r\n    protected unfixedLastAniIndex: number = -1;\r\n    /**@internal */\r\n    _aniClassName: string;\r\n    /**@internal */\r\n    _animationDatasCache: any;\r\n    /**@internal */\r\n    _fullFrames: any[] = null;\r\n\r\n    /**@private */\r\n    private _boneCurKeyFrm: any[] = [];\t// 记录每个骨骼当前在动画的第几帧。这个是为了去掉缓存的帧索引数据。TODO 其实这个应该放到skeleton中\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _calculateKeyFrame(node: AnimationNodeContent, keyframeCount: number, keyframeDataCount: number): void {\r\n        var keyFrames: KeyFramesContent[] = node.keyFrame;\r\n        keyFrames[keyframeCount] = keyFrames[0];\r\n        for (var i: number = 0; i < keyframeCount; i++) {\r\n            var keyFrame: KeyFramesContent = keyFrames[i];\r\n            for (var j: number = 0; j < keyframeDataCount; j++) {\r\n                keyFrame.dData[j] = (keyFrame.duration === 0) ? 0 : (keyFrames[i + 1].data[j] - keyFrame.data[j]) / keyFrame.duration;//末帧dData数据为0\r\n                keyFrame.nextData[j] = keyFrames[i + 1].data[j];\r\n            }\r\n        }\r\n        keyFrames.length--;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    //TODO:coverage\r\n    _onAsynLoaded(data: any, propertyParams: any = null): void {\r\n        var reader: Byte = new Byte(data);\r\n        this._aniVersion = reader.readUTFString();\r\n        switch (this._aniVersion) {\r\n            case \"LAYAANIMATION:02\":\r\n                AnimationParser02.parse(this, reader);\r\n                break;\r\n            default:\r\n                AnimationParser01.parse(this, reader);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取动画数量\r\n     */\r\n    getAnimationCount(): number {\r\n        return this._anis.length;\r\n    }\r\n\r\n    /**\r\n     * 通过索引获取动画\r\n     * @param aniIndex \r\n     */\r\n    getAnimation(aniIndex: number): any {\r\n        return this._anis[aniIndex];\r\n    }\r\n\r\n    /**\r\n     * 获取动画时长\r\n     * @param aniIndex \r\n     */\r\n    getAniDuration(aniIndex: number): number {\r\n        return this._anis[aniIndex].playTime;\r\n    }\r\n\r\n    //TODO:coverage\r\n    /**获取动画nodes信息 */\r\n    getNodes(aniIndex: number): any {\r\n        return this._anis[aniIndex].nodes;\r\n    }\r\n\r\n    /**获取动画骨骼信息 */\r\n    getNodeIndexWithName(aniIndex: number, name: string): number {\r\n        return this._anis[aniIndex].bone3DMap[name];\r\n    }\r\n\r\n    /**获取nodes长度 */\r\n    getNodeCount(aniIndex: number): number {\r\n        return this._anis[aniIndex].nodes.length;\r\n    }\r\n\r\n    /**获取keyframes长度 */\r\n    getTotalkeyframesLength(aniIndex: number): number {\r\n        return this._anis[aniIndex].totalKeyframeDatasLength;\r\n    }\r\n\r\n    /**获取附加数据 */\r\n    getPublicExtData(): ArrayBuffer {\r\n        return this._publicExtData;\r\n    }\r\n\r\n    //TODO:coverage\r\n    /**获取动画信息数据 */\r\n    getAnimationDataWithCache(key: any, cacheDatas: any, aniIndex: number, frameIndex: number): Float32Array {\r\n        var aniDatas: any = cacheDatas[aniIndex];\r\n        if (!aniDatas) {\r\n            return null;\r\n        } else {\r\n            var keyDatas: any[] = aniDatas[key];\r\n            if (!keyDatas)\r\n                return null;\r\n            else {\r\n                return keyDatas[frameIndex];\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO:coverage\r\n    /**设置动画信息数据 */\r\n    setAnimationDataWithCache(key: any, cacheDatas: any[], aniIndex: number, frameIndex: number, data: any): void {\r\n        var aniDatas: any = (cacheDatas[aniIndex]) || (cacheDatas[aniIndex] = {});\r\n        var aniDatasCache: any[] = (aniDatas[key]) || (aniDatas[key] = []);\r\n        aniDatasCache[frameIndex] = data;\r\n    }\r\n\r\n    /**\r\n     * 计算当前时间应该对应关键帧的哪一帧\r\n     * @param\tnodeframes\t当前骨骼的关键帧数据\r\n     * @param\tnodeid\t\t骨骼id，因为要使用和更新 _boneCurKeyFrm\r\n     * @param\ttm\r\n     * @return\r\n     * 问题\r\n     * \t最后一帧有问题，例如倒数第二帧时间是0.033ms,则后两帧非常靠近，当实际给最后一帧的时候，根据帧数计算出的时间实际上落在倒数第二帧\r\n     *  \t使用与AnimationPlayer一致的累积时间就行\r\n     */\r\n    getNodeKeyFrame(nodeframes: KeyFramesContent[], nodeid: number, tm: number): number {\r\n        var cid: any = this._boneCurKeyFrm[nodeid];\r\n        var frmNum: number = nodeframes.length;\r\n\r\n        if (cid == void 0 || cid >= frmNum) {\r\n            cid = this._boneCurKeyFrm[nodeid] = 0;\r\n        }\r\n\r\n        var kinfo: KeyFramesContent = nodeframes[cid];\r\n\r\n        var curFrmTm: number = kinfo.startTime;\r\n        var dt: number = tm - curFrmTm;\r\n        // 缓存命中的情况\r\n        if (dt == 0 || (dt > 0 && kinfo.duration > dt)) {\r\n            return cid;\r\n        }\r\n        // 否则就要前后判断在第几帧\r\n        var i: number = 0;\r\n        if (dt > 0) {\r\n            // 在后面\r\n            tm = tm + 0.01;// 有个问题，由于浮点精度的问题可能导致 前后 st+duration  st+duration 接不上。导致cid+1的起始时间>tm，所以时间加上一点\r\n            for (i = cid + 1; i < frmNum; i++) {\r\n                kinfo = nodeframes[i];\r\n                if (kinfo.startTime <= tm && kinfo.startTime + kinfo.duration > tm) {\r\n                    this._boneCurKeyFrm[nodeid] = i;\r\n                    return i;\r\n                }\r\n            }\r\n            return frmNum - 1;\r\n        } else {\r\n            // 在前面\r\n            for (i = 0; i < cid; i++) {\r\n                kinfo = nodeframes[i];\r\n                if (kinfo.startTime <= tm && kinfo.startTime + kinfo.duration > tm) {\r\n                    this._boneCurKeyFrm[nodeid] = i;\r\n                    return i;\r\n                }\r\n            }\r\n            return cid;\t// 可能误差导致，返回最后一个\r\n        }\r\n        return 0;\t// 这个怎么做\r\n    }\r\n\r\n    /**\r\n     * 获取原始数据\r\n     * @param\taniIndex\r\n     * @param\toriginalData\r\n     * @param\tnodesFrameIndices\r\n     * @param\tframeIndex\r\n     * @param\tplayCurTime\r\n     */\r\n    getOriginalData(aniIndex: number, originalData: Float32Array, nodesFrameIndices: any[], frameIndex: number, playCurTime: number): void {\r\n        var oneAni: AnimationContent = this._anis[aniIndex];\r\n\r\n        var nodes: AnimationNodeContent[] = oneAni.nodes;\r\n\r\n        // 当前帧缓存数组可能大小需要调整\r\n        var curKFrm: any[] = this._boneCurKeyFrm;\r\n        if (curKFrm.length < nodes.length) {\r\n            curKFrm.length = nodes.length;\r\n        }\r\n        //playCurTime %= oneAni.playTime;\r\n        var j: number = 0;\r\n        for (var i: number = 0, n: number = nodes.length, outOfs: number = 0; i < n; i++) {\r\n            var node: AnimationNodeContent = nodes[i];\r\n\r\n            var key: KeyFramesContent;\r\n            //key = node.keyFrame[nodesFrameIndices[i][frameIndex]];\r\n            var kfrm: KeyFramesContent[] = node.keyFrame;\r\n            key = kfrm[this.getNodeKeyFrame(kfrm, i, playCurTime)];\r\n\r\n            node.dataOffset = outOfs;\r\n\r\n            var dt: number = playCurTime - key.startTime;\r\n\r\n            var lerpType: number = node.lerpType;\r\n            if (lerpType) {\r\n                switch (lerpType) {\r\n                    case 0:\r\n                    case 1:\r\n                        for (j = 0; j < node.keyframeWidth;)\r\n                            j += node.interpolationMethod[j](node, j, originalData, outOfs + j, key.data, dt, key.dData, key.duration, key.nextData);\r\n                        break;\r\n                    case 2:\r\n                        var interpolationData: any[] = key.interpolationData;\r\n                        var interDataLen: number = interpolationData.length;\r\n                        var dataIndex: number = 0;\r\n                        for (j = 0; j < interDataLen;) {\r\n                            var type: number = interpolationData[j];\r\n                            switch (type) {\r\n                                case 6:\r\n                                    j += AnimationTemplet.interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData, interpolationData, j + 1);\r\n                                    break;\r\n                                case 7:\r\n                                    j += AnimationTemplet.interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData, interpolationData, j + 1);\r\n                                    break;\r\n                                default:\r\n                                    j += AnimationTemplet.interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData);\r\n\r\n                            }\r\n                            //if (type === 6)\r\n                            //j += interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData, interpolationData.slice(j+1, j + 5));\r\n                            //else\r\n                            //j += interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData);\r\n                            dataIndex++;\r\n                        }\r\n                        break;\r\n                }\r\n            } else {\r\n                for (j = 0; j < node.keyframeWidth;)\r\n                    j += node.interpolationMethod[j](node, j, originalData, outOfs + j, key.data, dt, key.dData, key.duration, key.nextData);\r\n            }\r\n\r\n            outOfs += node.keyframeWidth;\r\n        }\r\n    }\r\n\r\n    //TODO:coverage\r\n    /**获取nodes信息 */\r\n    getNodesCurrentFrameIndex(aniIndex: number, playCurTime: number): Uint32Array {\r\n        var ani: AnimationContent = this._anis[aniIndex];\r\n        var nodes: AnimationNodeContent[] = ani.nodes;\r\n\r\n        if (aniIndex !== this.unfixedLastAniIndex) {\r\n            this.unfixedCurrentFrameIndexes = new Uint32Array(nodes.length);\r\n            this.unfixedCurrentTimes = new Float32Array(nodes.length);\r\n            this.unfixedLastAniIndex = aniIndex;\r\n        }\r\n\r\n        for (var i = 0, n = nodes.length; i < n; i++) {\r\n            var node = nodes[i];\r\n            if (playCurTime < this.unfixedCurrentTimes[i])\r\n                this.unfixedCurrentFrameIndexes[i] = 0;\r\n            this.unfixedCurrentTimes[i] = playCurTime;\r\n\r\n            while ((this.unfixedCurrentFrameIndexes[i] < node.keyFrame.length)) {\r\n                if (node.keyFrame[this.unfixedCurrentFrameIndexes[i]].startTime > this.unfixedCurrentTimes[i])\r\n                    break;\r\n\r\n                this.unfixedCurrentFrameIndexes[i]++;\r\n            }\r\n            this.unfixedCurrentFrameIndexes[i]--;\r\n        }\r\n        return this.unfixedCurrentFrameIndexes;\r\n    }\r\n\r\n    //TODO:coverage\r\n    /**获取原始数据 */\r\n    getOriginalDataUnfixedRate(aniIndex: number, originalData: Float32Array, playCurTime: number): void {\r\n        var oneAni: AnimationContent = this._anis[aniIndex];\r\n\r\n        var nodes: AnimationNodeContent[] = oneAni.nodes;\r\n\r\n        if (aniIndex !== this.unfixedLastAniIndex) {\r\n            this.unfixedCurrentFrameIndexes = new Uint32Array(nodes.length);\r\n            this.unfixedCurrentTimes = new Float32Array(nodes.length);\r\n            this.unfixedKeyframes = [];\r\n            this.unfixedLastAniIndex = aniIndex;\r\n        }\r\n\r\n        var j: number = 0;\r\n        for (var i: number = 0, n: number = nodes.length, outOfs: number = 0; i < n; i++) {\r\n            var node: AnimationNodeContent = nodes[i];\r\n\r\n            if (playCurTime < this.unfixedCurrentTimes[i])\r\n                this.unfixedCurrentFrameIndexes[i] = 0;\r\n\r\n            this.unfixedCurrentTimes[i] = playCurTime;\r\n\r\n            while (this.unfixedCurrentFrameIndexes[i] < node.keyFrame.length) {\r\n                if (node.keyFrame[this.unfixedCurrentFrameIndexes[i]].startTime > this.unfixedCurrentTimes[i])\r\n                    break;\r\n\r\n                this.unfixedKeyframes[i] = node.keyFrame[this.unfixedCurrentFrameIndexes[i]];\r\n                this.unfixedCurrentFrameIndexes[i]++;\r\n            }\r\n\r\n            var key: KeyFramesContent = this.unfixedKeyframes[i];\r\n            node.dataOffset = outOfs;\r\n            var dt: number = playCurTime - key.startTime;\r\n            var lerpType: number = node.lerpType;\r\n            if (lerpType) {\r\n                switch (node.lerpType) {\r\n                    case 0:\r\n                    case 1:\r\n                        for (j = 0; j < node.keyframeWidth;)\r\n                            j += node.interpolationMethod[j](node, j, originalData, outOfs + j, key.data, dt, key.dData, key.duration, key.nextData);\r\n                        break;\r\n                    case 2:\r\n                        var interpolationData: any[] = key.interpolationData;\r\n                        var interDataLen: number = interpolationData.length;\r\n                        var dataIndex: number = 0;\r\n                        for (j = 0; j < interDataLen;) {\r\n                            var type: number = interpolationData[j];\r\n                            switch (type) {\r\n                                case 6:\r\n                                    j += AnimationTemplet.interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData, interpolationData, j + 1);\r\n                                    break;\r\n                                case 7:\r\n                                    j += AnimationTemplet.interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData, interpolationData, j + 1);\r\n                                    break;\r\n                                default:\r\n                                    j += AnimationTemplet.interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData);\r\n\r\n                            }\r\n                            //if (type === 6)\r\n                            //j += interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData, interpolationData.slice(j+1, j + 5));\r\n                            //else\r\n                            //j += interpolation[type](node, dataIndex, originalData, outOfs + dataIndex, key.data, dt, key.dData, key.duration, key.nextData);\r\n                            dataIndex++;\r\n                        }\r\n                        break;\r\n                }\r\n            } else {\r\n                for (j = 0; j < node.keyframeWidth;)\r\n                    j += node.interpolationMethod[j](node, j, originalData, outOfs + j, key.data, dt, key.dData, key.duration, key.nextData);\r\n            }\r\n\r\n            outOfs += node.keyframeWidth;\r\n        }\r\n    }\r\n}\r\n\r\nIAniLib.AnimationTemplet = AnimationTemplet;","import { SkinMeshForGraphic } from \"./bone/canvasmesh/SkinMeshForGraphic\"\r\nimport { Matrix } from \"../maths/Matrix\";\r\nimport { Graphics } from \"../display/Graphics\";\r\n/**\r\n * Graphic动画\r\n */\r\nexport class GraphicsAni extends Graphics {\r\n\r\n\t/**\r\n\t * @private\r\n\t * 画自定义蒙皮动画\r\n\t * @param\tskin\r\n\t */\r\n\t//TODO:coverage\r\n\tdrawSkin(skinA: SkinMeshForGraphic, alpha: number): void {\r\n\t\tthis.drawTriangles(skinA.texture, 0, 0, (<Float32Array>skinA.vertices), (<Float32Array>skinA.uvs), (<Uint16Array>skinA.indexes), skinA.transform || Matrix.EMPTY, alpha);\r\n\t}\r\n\r\n\tprivate static _caches: any[] = [];\r\n\t/**\r\n\t * 获取一个GraphicsAni\r\n\t * @returns \r\n\t */\r\n\tstatic create(): GraphicsAni {\r\n\t\tvar rs: GraphicsAni = GraphicsAni._caches.pop();\r\n\t\treturn rs || new GraphicsAni();\r\n\t}\r\n\r\n\t/**\r\n\t * 回收清理GraphicAni\r\n\t * @param graphics \r\n\t */\r\n\t//TODO:coverage\r\n\tstatic recycle(graphics: GraphicsAni): void {\r\n\t\tgraphics.clear();\r\n\t\tGraphicsAni._caches.push(graphics);\r\n\t}\r\n}\r\n\r\n\r\n","import { IkConstraintData } from \"./IkConstraintData\";\r\nimport { Bone } from \"./Bone\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { ILaya } from \"../../../ILaya\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class IkConstraint {\r\n\r\n\t/**@internal */\r\n\tprivate _targetBone: Bone;\r\n\t/**@internal */\r\n\tprivate _bones: Bone[];\r\n\t/**@internal */\r\n\t//private _data: IkConstraintData;\r\n\tname: string;\r\n\tmix: number;\r\n\tbendDirection: number;\r\n\tisSpine: boolean = true;\r\n\tstatic radDeg: number = 180 / Math.PI;\r\n\tstatic degRad: number = Math.PI / 180;\r\n\t/**@internal */\r\n\tprivate static _tempMatrix: Matrix = new Matrix();\r\n\r\n\t//TODO:coverage\r\n\tconstructor(data: IkConstraintData, bones: Bone[]) {\r\n\t\t//this._data = data;\r\n\t\tthis._targetBone = bones[data.targetBoneIndex];\r\n\t\tthis.isSpine = data.isSpine;\r\n\t\tif (this._bones == null) this._bones = [];\r\n\t\tthis._bones.length = 0;\r\n\t\tfor (var i: number = 0, n: number = data.boneIndexs.length; i < n; i++) {\r\n\t\t\tthis._bones.push(bones[data.boneIndexs[i]]);\r\n\t\t}\r\n\t\tthis.name = data.name;\r\n\t\tthis.mix = data.mix;\r\n\t\tthis.bendDirection = data.bendDirection;\r\n\t}\r\n\r\n\tapply(): void {\r\n\t\tswitch (this._bones.length) {\r\n\t\t\tcase 1:\r\n\t\t\t\tthis._applyIk1(this._bones[0], this._targetBone.resultMatrix.tx, this._targetBone.resultMatrix.ty, this.mix);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this.isSpine) {\r\n\t\t\t\t\tthis._applyIk2(this._bones[0], this._bones[1], this._targetBone.resultMatrix.tx, this._targetBone.resultMatrix.ty, this.bendDirection, this.mix);// tIkConstraintData.mix);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._applyIk3(this._bones[0], this._bones[1], this._targetBone.resultMatrix.tx, this._targetBone.resultMatrix.ty, this.bendDirection, this.mix);// tIkConstraintData.mix);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\t/**@internal */\r\n\tprivate _applyIk1(bone: Bone, targetX: number, targetY: number, alpha: number): void {\r\n\t\tvar pp: Bone = bone.parentBone;\r\n\t\tvar id: number = 1 / (pp.resultMatrix.a * pp.resultMatrix.d - pp.resultMatrix.b * pp.resultMatrix.c);\r\n\t\tvar x: number = targetX - pp.resultMatrix.tx;\r\n\t\tvar y: number = targetY - pp.resultMatrix.ty;\r\n\t\tvar tx: number = (x * pp.resultMatrix.d - y * pp.resultMatrix.c) * id - bone.transform.x;\r\n\t\tvar ty: number = (y * pp.resultMatrix.a - x * pp.resultMatrix.b) * id - bone.transform.y;\r\n\t\tvar rotationIK: number = Math.atan2(ty, tx) * IkConstraint.radDeg - 0 - bone.transform.skX;\r\n\t\tif (bone.transform.scX < 0) rotationIK += 180;\r\n\t\tif (rotationIK > 180)\r\n\t\t\trotationIK -= 360;\r\n\t\telse if (rotationIK < -180) rotationIK += 360;\r\n\t\tbone.transform.skX = bone.transform.skY = bone.transform.skX + rotationIK * alpha;\r\n\t\tbone.update();\r\n\t}\r\n\r\n\t//debug相关代码\r\n\t/**@internal */\r\n\tprivate _sp: Sprite;\r\n\tprivate isDebug: boolean = false;\r\n\r\n\t//TODO:coverage\r\n\tupdatePos(x: number, y: number): void {\r\n\t\tif (this._sp) {\r\n\t\t\tthis._sp.pos(x, y);\r\n\t\t}\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\t/**@internal */\r\n\tprivate _applyIk2(parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, alpha: number): void {\r\n\t\tif (alpha == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//spine 双骨骼ik计算\r\n\t\tvar px: number = parent.resultTransform.x, py: number = parent.resultTransform.y;\r\n\t\tvar psx: number = parent.transform.scX, psy: number = parent.transform.scY;\r\n\t\tvar csx: number = child.transform.scX;\r\n\t\tvar os1: number, os2: number, s2: number;\r\n\t\tif (psx < 0) {\r\n\t\t\tpsx = -psx;\r\n\t\t\tos1 = 180;\r\n\t\t\ts2 = -1;\r\n\t\t} else {\r\n\t\t\tos1 = 0;\r\n\t\t\ts2 = 1;\r\n\t\t}\r\n\t\tif (psy < 0) {\r\n\t\t\tpsy = -psy;\r\n\t\t\ts2 = -s2;\r\n\t\t}\r\n\t\tif (csx < 0) {\r\n\t\t\tcsx = -csx;\r\n\t\t\tos2 = 180;\r\n\t\t} else {\r\n\t\t\tos2 = 0\r\n\t\t}\r\n\r\n\t\tvar cx: number = child.resultTransform.x, cy: number, cwx: number, cwy: number;\r\n\t\tvar a: number = parent.resultMatrix.a, b: number = parent.resultMatrix.c;\r\n\t\tvar c: number = parent.resultMatrix.b, d: number = parent.resultMatrix.d;\r\n\t\tvar u: boolean = Math.abs(psx - psy) <= 0.0001;\r\n\t\t//求子骨骼的世界坐标点\r\n\t\tif (!u) {\r\n\t\t\tcy = 0;\r\n\t\t\tcwx = a * cx + parent.resultMatrix.tx;\r\n\t\t\tcwy = c * cx + parent.resultMatrix.ty;\r\n\t\t} else {\r\n\t\t\tcy = child.resultTransform.y;\r\n\t\t\tcwx = a * cx + b * cy + parent.resultMatrix.tx;\r\n\t\t\tcwy = c * cx + d * cy + parent.resultMatrix.ty;\r\n\t\t}\r\n\t\t//cwx,cwy为子骨骼应该在的世界坐标\r\n\r\n\t\tif (this.isDebug) {\r\n\t\t\tif (!this._sp) {\r\n\t\t\t\tthis._sp = new Sprite();\r\n\t\t\t\tILaya.stage.addChild(this._sp);\r\n\t\t\t}\r\n\t\t\tthis._sp.graphics.clear();\r\n\t\t\tthis._sp.graphics.drawCircle(targetX, targetY, 15, \"#ffff00\");\r\n\r\n\t\t\tthis._sp.graphics.drawCircle(cwx, cwy, 15, \"#ff00ff\");\r\n\t\t}\r\n\t\tparent.setRotation(Math.atan2(cwy - parent.resultMatrix.ty, cwx - parent.resultMatrix.tx));\r\n\t\tvar pp: Bone = parent.parentBone;\r\n\t\ta = pp.resultMatrix.a;\r\n\t\tb = pp.resultMatrix.c;\r\n\t\tc = pp.resultMatrix.b;\r\n\t\td = pp.resultMatrix.d;\r\n\t\t//逆因子\r\n\t\tvar id: number = 1 / (a * d - b * c);\r\n\t\t//求得IK中的子骨骼角度向量\r\n\t\tvar x: number = targetX - pp.resultMatrix.tx, y: number = targetY - pp.resultMatrix.ty;\r\n\t\tvar tx: number = (x * d - y * b) * id - px;\r\n\t\tvar ty: number = (y * a - x * c) * id - py;\r\n\r\n\t\t//求得子骨骼的角度向量\r\n\t\tx = cwx - pp.resultMatrix.tx;\r\n\t\ty = cwy - pp.resultMatrix.ty;\r\n\t\tvar dx: number = (x * d - y * b) * id - px;\r\n\t\tvar dy: number = (y * a - x * c) * id - py;\r\n\t\t//子骨骼的实际长度\r\n\t\tvar l1: number = Math.sqrt(dx * dx + dy * dy);\r\n\t\t//子骨骼的长度\r\n\t\tvar l2: number = child.length * csx;\r\n\t\tvar a1: number, a2: number;\r\n\t\tif (u) {\r\n\t\t\tl2 *= psx;\r\n\t\t\t//求IK的角度\r\n\t\t\tvar cos: number = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);\r\n\t\t\tif (cos < -1)\r\n\t\t\t\tcos = -1;\r\n\t\t\telse if (cos > 1) cos = 1;\r\n\t\t\ta2 = Math.acos(cos) * bendDir;\r\n\t\t\ta = l1 + l2 * cos;\r\n\t\t\tb = l2 * Math.sin(a2);\r\n\t\t\ta1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\r\n\t\t} else {\r\n\t\t\ta = psx * l2;\r\n\t\t\tb = psy * l2;\r\n\t\t\tvar aa: number = a * a, bb: number = b * b, dd: number = tx * tx + ty * ty, ta: number = Math.atan2(ty, tx);\r\n\t\t\tc = bb * l1 * l1 + aa * dd - aa * bb;\r\n\t\t\tvar c1: number = -2 * bb * l1, c2: number = bb - aa;\r\n\t\t\td = c1 * c1 - 4 * c2 * c;\r\n\t\t\tif (d > 0) {\r\n\t\t\t\tvar q: number = Math.sqrt(d);\r\n\t\t\t\tif (c1 < 0) q = -q;\r\n\t\t\t\tq = -(c1 + q) / 2;\r\n\t\t\t\tvar r0: number = q / c2, r1: number = c / q;\r\n\t\t\t\tvar r: number = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\r\n\t\t\t\tif (r * r <= dd) {\r\n\t\t\t\t\ty = Math.sqrt(dd - r * r) * bendDir;\r\n\t\t\t\t\ta1 = ta - Math.atan2(y, r);\r\n\t\t\t\t\ta2 = Math.atan2(y / psy, (r - l1) / psx);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar minAngle: number = 0, minDist: number = Number.MAX_VALUE, minX: number = 0, minY: number = 0;\r\n\t\t\tvar maxAngle: number = 0, maxDist: number = 0, maxX: number = 0, maxY: number = 0;\r\n\t\t\tx = l1 + a;\r\n\t\t\td = x * x;\r\n\t\t\tif (d > maxDist) {\r\n\t\t\t\tmaxAngle = 0;\r\n\t\t\t\tmaxDist = d;\r\n\t\t\t\tmaxX = x;\r\n\t\t\t}\r\n\t\t\tx = l1 - a;\r\n\t\t\td = x * x;\r\n\t\t\tif (d < minDist) {\r\n\t\t\t\tminAngle = Math.PI;\r\n\t\t\t\tminDist = d;\r\n\t\t\t\tminX = x;\r\n\t\t\t}\r\n\t\t\tvar angle: number = Math.acos(-a * l1 / (aa - bb));\r\n\t\t\tx = a * Math.cos(angle) + l1;\r\n\t\t\ty = b * Math.sin(angle);\r\n\t\t\td = x * x + y * y;\r\n\t\t\tif (d < minDist) {\r\n\t\t\t\tminAngle = angle;\r\n\t\t\t\tminDist = d;\r\n\t\t\t\tminX = x;\r\n\t\t\t\tminY = y;\r\n\t\t\t}\r\n\t\t\tif (d > maxDist) {\r\n\t\t\t\tmaxAngle = angle;\r\n\t\t\t\tmaxDist = d;\r\n\t\t\t\tmaxX = x;\r\n\t\t\t\tmaxY = y;\r\n\t\t\t}\r\n\t\t\tif (dd <= (minDist + maxDist) / 2) {\r\n\t\t\t\ta1 = ta - Math.atan2(minY * bendDir, minX);\r\n\t\t\t\ta2 = minAngle * bendDir;\r\n\t\t\t} else {\r\n\t\t\t\ta1 = ta - Math.atan2(maxY * bendDir, maxX);\r\n\t\t\t\ta2 = maxAngle * bendDir;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar os: number = Math.atan2(cy, cx) * s2;\r\n\t\tvar rotation: number = parent.resultTransform.skX;\r\n\t\ta1 = (a1 - os) * IkConstraint.radDeg + os1 - rotation;\r\n\t\tif (a1 > 180)\r\n\t\t\ta1 -= 360;\r\n\t\telse if (a1 < -180) a1 += 360;\r\n\t\tparent.resultTransform.x = px;\r\n\t\tparent.resultTransform.y = py;\r\n\t\tparent.resultTransform.skX = parent.resultTransform.skY = rotation + a1 * alpha;\r\n\t\trotation = child.resultTransform.skX;\r\n\t\trotation = rotation % 360;\r\n\t\ta2 = ((a2 + os) * IkConstraint.radDeg - 0) * s2 + os2 - rotation;\r\n\t\tif (a2 > 180)\r\n\t\t\ta2 -= 360;\r\n\t\telse if (a2 < -180) a2 += 360;\r\n\t\tchild.resultTransform.x = cx;\r\n\t\tchild.resultTransform.y = cy;\r\n\t\tchild.resultTransform.skX = child.resultTransform.skY = child.resultTransform.skY + a2 * alpha;\r\n\t\tparent.update();\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\t/**@internal */\r\n\tprivate _applyIk3(parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, alpha: number): void {\r\n\t\tif (alpha == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar cwx: number, cwy: number;\r\n\r\n\t\t// 龙骨双骨骼ik计算\r\n\r\n\t\tconst x: number = child.resultMatrix.a * child.length;\r\n\t\tconst y: number = child.resultMatrix.b * child.length;\r\n\r\n\t\tconst lLL: number = x * x + y * y;\r\n\t\t//child骨骼长度\r\n\t\tconst lL: number = Math.sqrt(lLL);\r\n\r\n\r\n\t\tvar parentX: number = parent.resultMatrix.tx;\r\n\t\tvar parentY: number = parent.resultMatrix.ty;\r\n\r\n\t\tvar childX: number = child.resultMatrix.tx;\r\n\t\tvar childY: number = child.resultMatrix.ty;\r\n\t\tvar dX: number = childX - parentX;\r\n\t\tvar dY: number = childY - parentY;\r\n\r\n\t\tconst lPP: number = dX * dX + dY * dY;\r\n\t\t//parent骨骼长度\r\n\t\tconst lP: number = Math.sqrt(lPP);\r\n\r\n\t\tdX = targetX - parent.resultMatrix.tx;\r\n\t\tdY = targetY - parent.resultMatrix.ty;\r\n\t\tconst lTT: number = dX * dX + dY * dY;\r\n\t\t//parent到ik的长度\r\n\t\tconst lT: number = Math.sqrt(lTT);\r\n\r\n\t\tvar ikRadianA: number = 0;\r\n\t\tif (lL + lP <= lT || lT + lL <= lP || lT + lP <= lL)//构不成三角形,被拉成直线\r\n\t\t{\r\n\t\t\tvar rate: number;\r\n\t\t\tif (lL + lP <= lT) {\r\n\t\t\t\trate = 1;\r\n\t\t\t} else {\r\n\t\t\t\trate = -1;\r\n\t\t\t}\r\n\t\t\tchildX = parentX + rate * (targetX - parentX) * lP / lT;\r\n\t\t\tchildY = parentY + rate * (targetY - parentY) * lP / lT;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst h: number = (lPP - lLL + lTT) / (2 * lTT);\r\n\t\t\tconst r: number = Math.sqrt(lPP - h * h * lTT) / lT;\r\n\t\t\tconst hX: number = parentX + (dX * h);\r\n\t\t\tconst hY: number = parentY + (dY * h);\r\n\t\t\tconst rX: number = -dY * r;\r\n\t\t\tconst rY: number = dX * r;\r\n\r\n\t\t\tif (bendDir > 0) {\r\n\t\t\t\tchildX = hX - rX;\r\n\t\t\t\tchildY = hY - rY;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchildX = hX + rX;\r\n\t\t\t\tchildY = hY + rY;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tcwx = childX;\r\n\t\tcwy = childY;\r\n\r\n\t\t//cwx,cwy为子骨骼应该在的世界坐标\r\n\r\n\t\tif (this.isDebug) {\r\n\t\t\tif (!this._sp) {\r\n\t\t\t\tthis._sp = new Sprite();\r\n\t\t\t\tILaya.stage.addChild(this._sp);\r\n\t\t\t}\r\n\t\t\tthis._sp.graphics.clear();\r\n\t\t\tthis._sp.graphics.drawCircle(parentX, parentY, 15, \"#ff00ff\");\r\n\t\t\tthis._sp.graphics.drawCircle(targetX, targetY, 15, \"#ffff00\");\r\n\r\n\t\t\tthis._sp.graphics.drawCircle(cwx, cwy, 15, \"#ff00ff\");\r\n\t\t}\r\n\r\n\r\n\t\t//根据当前计算出的世界坐标更新骨骼\r\n\r\n\t\t//更新parent\r\n\t\tvar pRotation: number;\r\n\t\tpRotation = Math.atan2(cwy - parent.resultMatrix.ty, cwx - parent.resultMatrix.tx);\r\n\t\tparent.setRotation(pRotation);\r\n\r\n\t\tvar pTarMatrix: Matrix;\r\n\t\tpTarMatrix = IkConstraint._tempMatrix;\r\n\t\tpTarMatrix.identity();\r\n\t\tpTarMatrix.rotate(pRotation);\r\n\t\tpTarMatrix.scale(parent.resultMatrix.getScaleX(), parent.resultMatrix.getScaleY());\r\n\t\tpTarMatrix.translate(parent.resultMatrix.tx, parent.resultMatrix.ty);\r\n\r\n\t\tpTarMatrix.copyTo(parent.resultMatrix);\r\n\t\tparent.updateChild();\r\n\r\n\r\n\t\t//更新child\r\n\t\tvar childRotation: number;\r\n\t\tchildRotation = Math.atan2(targetY - cwy, targetX - cwx);\r\n\t\tchild.setRotation(childRotation);\r\n\r\n\t\tvar childTarMatrix: Matrix;\r\n\t\tchildTarMatrix = IkConstraint._tempMatrix;\r\n\t\tchildTarMatrix.identity();\r\n\t\tchildTarMatrix.rotate(childRotation);\r\n\t\tchildTarMatrix.scale(child.resultMatrix.getScaleX(), child.resultMatrix.getScaleY());\r\n\t\tchildTarMatrix.translate(cwx, cwy);\r\n\r\n\t\tpTarMatrix.copyTo(child.resultMatrix);\r\n\t\tchild.updateChild();\r\n\t}\r\n}\r\n\r\n\r\n","import { BoneSlot } from \"./BoneSlot\";\r\nimport { PathConstraintData } from \"./PathConstraintData\";\r\nimport { Bone } from \"./Bone\";\r\nimport { Graphics } from \"../../display/Graphics\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\n\r\n\r\n/**\r\n * @internal\r\n * 路径作用器\r\n * 1，生成根据骨骼计算控制点\r\n * 2，根据控制点生成路径，并计算路径上的节点\r\n * 3，根据节点，重新调整骨骼位置\r\n */\r\nexport class PathConstraint {\r\n\r\n\t//private static NONE: number = -1;\r\n\tprivate static BEFORE: number = -2;\r\n\tprivate static AFTER: number = -3;\r\n\r\n\ttarget: BoneSlot;\r\n\tdata: PathConstraintData;\r\n\tbones: Bone[];\r\n\tposition: number;\r\n\tspacing: number;\r\n\trotateMix: number;\r\n\ttranslateMix: number;\r\n\r\n\t/**@internal */\r\n\tprivate _debugKey: boolean = false;\r\n\t/**@internal */\r\n\tprivate _segments: number[] = [];\r\n\t/**@internal */\r\n\tprivate _curves: number[] = [];\r\n\t/**@internal */\r\n\tprivate _spaces: number[];\r\n\r\n\tconstructor(data: PathConstraintData, bones: Bone[]) {\r\n\t\tthis.data = data;\r\n\t\tthis.position = data.position;\r\n\t\tthis.spacing = data.spacing;\r\n\t\tthis.rotateMix = data.rotateMix;\r\n\t\tthis.translateMix = data.translateMix;\r\n\t\tthis.bones = [];\r\n\t\tvar tBoneIds: number[] = this.data.bones;\r\n\t\tfor (var i: number = 0, n: number = tBoneIds.length; i < n; i++) {\r\n\t\t\tthis.bones.push(bones[tBoneIds[i]]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 计算骨骼在路径上的节点\r\n\t * @param\tboneSlot\r\n\t * @param\tboneMatrixArray\r\n\t * @param\tgraphics\r\n\t */\r\n\t//TODO:coverage\r\n\tapply(boneList: Bone[], graphics: Graphics): void {\r\n\t\tif (!this.target)\r\n\t\t\treturn;\r\n\t\tvar tTranslateMix: number = this.translateMix;\r\n\t\tvar tRotateMix: number = this.translateMix;\r\n\t\tvar tTranslate: boolean = tTranslateMix > 0;\r\n\t\tvar tRotate: boolean = tRotateMix > 0;\r\n\t\tvar tSpacingMode: string = this.data.spacingMode;\r\n\t\tvar tLengthSpacing: boolean = tSpacingMode == \"length\";\r\n\t\tvar tRotateMode: string = this.data.rotateMode;\r\n\t\tvar tTangents: boolean = tRotateMode == \"tangent\";\r\n\t\tvar tScale: boolean = tRotateMode == \"chainScale\";\r\n\r\n\t\tvar lengths: number[] = [];\r\n\t\tvar boneCount: number = this.bones.length;\r\n\t\tvar spacesCount: number = tTangents ? boneCount : boneCount + 1;\r\n\r\n\t\tvar spaces: number[] = [];\r\n\t\tthis._spaces = spaces;\r\n\t\tspaces[0] = this.position;\r\n\t\tvar spacing: number = this.spacing;\r\n\t\tif (tScale || tLengthSpacing) {\r\n\t\t\tfor (var i: number = 0, n: number = spacesCount - 1; i < n;) {\r\n\t\t\t\tvar bone: Bone = this.bones[i];\r\n\t\t\t\tvar length: number = bone.length;\r\n\t\t\t\t//var x:Number = length * bone.transform.getMatrix().a;\r\n\t\t\t\t//var y:Number = length * bone.transform.getMatrix().c;\r\n\t\t\t\tvar x: number = length * bone.resultMatrix.a;\r\n\t\t\t\tvar y: number = length * bone.resultMatrix.b;\r\n\t\t\t\tlength = Math.sqrt(x * x + y * y);\r\n\t\t\t\tif (tScale)\r\n\t\t\t\t\tlengths[i] = length;\r\n\t\t\t\tspaces[++i] = tLengthSpacing ? Math.max(0, length + spacing) : spacing;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (i = 1; i < spacesCount; i++) {\r\n\t\t\t\tspaces[i] = spacing;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar positions: number[] = this.computeWorldPositions(this.target, boneList, graphics, spacesCount, tTangents, this.data.positionMode == \"percent\", tSpacingMode == \"percent\");\r\n\t\tif (this._debugKey) {\r\n\t\t\tfor (i = 0; i < positions.length; i++) {\r\n\t\t\t\tgraphics.drawCircle(positions[i++], positions[i++], 5, \"#00ff00\");\r\n\t\t\t}\r\n\t\t\tvar tLinePos: any[] = [];\r\n\t\t\tfor (i = 0; i < positions.length; i++) {\r\n\t\t\t\ttLinePos.push(positions[i++], positions[i++]);\r\n\t\t\t}\r\n\t\t\tgraphics.drawLines(0, 0, tLinePos, \"#ff0000\");\r\n\t\t}\r\n\t\tvar skeletonX: number;\r\n\t\tvar skeletonY: number;\r\n\t\tvar boneX: number = positions[0];\r\n\t\tvar boneY: number = positions[1];\r\n\t\tvar offsetRotation: number = this.data.offsetRotation;\r\n\t\tvar tip: boolean = tRotateMode == \"chain\" && offsetRotation == 0;\r\n\t\tvar p: number;\r\n\t\tfor (i = 0, p = 3; i < boneCount; i++ , p += 3) {\r\n\t\t\tbone = this.bones[i];\r\n\t\t\tbone.resultMatrix.tx += (boneX - bone.resultMatrix.tx) * tTranslateMix;\r\n\t\t\tbone.resultMatrix.ty += (boneY - bone.resultMatrix.ty) * tTranslateMix;\r\n\r\n\t\t\tx = positions[p];\r\n\t\t\ty = positions[p + 1];\r\n\t\t\tvar dx: number = x - boneX, dy: number = y - boneY;\r\n\t\t\tif (tScale) {\r\n\t\t\t\tlength = lengths[i];\r\n\t\t\t\tif (length != 0) {\r\n\t\t\t\t\tvar s: number = (Math.sqrt(dx * dx + dy * dy) / length - 1) * tRotateMix + 1;\r\n\t\t\t\t\tbone.resultMatrix.a *= s;\r\n\t\t\t\t\tbone.resultMatrix.c *= s;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tboneX = x;\r\n\t\t\tboneY = y;\r\n\t\t\tif (tRotate) {\r\n\t\t\t\tvar a: number = bone.resultMatrix.a;\r\n\t\t\t\t//var b:Number = bone.resultMatrix.b;\r\n\t\t\t\t//var c:Number = bone.resultMatrix.c;\r\n\t\t\t\tvar b: number = bone.resultMatrix.c;\r\n\t\t\t\tvar c: number = bone.resultMatrix.b;\r\n\t\t\t\tvar d: number = bone.resultMatrix.d;\r\n\t\t\t\tvar r: number;\r\n\t\t\t\tvar cos: number;\r\n\t\t\t\tvar sin: number;\r\n\t\t\t\tif (tTangents) {\r\n\t\t\t\t\tr = positions[p - 1];\r\n\t\t\t\t}\r\n\t\t\t\telse if (spaces[i + 1] == 0) {\r\n\t\t\t\t\tr = positions[p + 2];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tr = Math.atan2(dy, dx);\r\n\t\t\t\t}\r\n\t\t\t\tr -= Math.atan2(c, a) - offsetRotation / 180 * Math.PI;\r\n\t\t\t\tif (tip) {\r\n\t\t\t\t\tcos = Math.cos(r);\r\n\t\t\t\t\tsin = Math.sin(r);\r\n\t\t\t\t\tlength = bone.length;\r\n\t\t\t\t\tboneX += (length * (cos * a - sin * c) - dx) * tRotateMix;\r\n\t\t\t\t\tboneY += (length * (sin * a + cos * c) - dy) * tRotateMix;\r\n\t\t\t\t}\r\n\t\t\t\tif (r > Math.PI) {\r\n\t\t\t\t\tr -= (Math.PI * 2);\r\n\t\t\t\t}\r\n\t\t\t\telse if (r < -Math.PI) {\r\n\t\t\t\t\tr += (Math.PI * 2);\r\n\t\t\t\t}\r\n\t\t\t\tr *= tRotateMix;\r\n\t\t\t\tcos = Math.cos(r);\r\n\t\t\t\tsin = Math.sin(r);\r\n\t\t\t\tbone.resultMatrix.a = cos * a - sin * c;\r\n\t\t\t\tbone.resultMatrix.c = cos * b - sin * d;\r\n\t\t\t\tbone.resultMatrix.b = sin * a + cos * c;\r\n\t\t\t\tbone.resultMatrix.d = sin * b + cos * d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**@internal */\r\n\tprivate static _tempMt: Matrix = new Matrix();\r\n\t/**\r\n\t * 计算顶点的世界坐标\r\n\t * @param\tboneSlot\r\n\t * @param\tboneList\r\n\t * @param\tstart\r\n\t * @param\tcount\r\n\t * @param\tworldVertices\r\n\t * @param\toffset\r\n\t */\r\n\t//TODO:coverage\r\n\tcomputeWorldVertices2(boneSlot: BoneSlot, boneList: Bone[], start: number, count: number, worldVertices: number[], offset: number): void {\r\n\t\tvar tBones: any[] = boneSlot.currDisplayData.bones;\r\n\t\tvar tWeights: any[] = boneSlot.currDisplayData.weights;\r\n\t\tvar tTriangles: any[] = boneSlot.currDisplayData.triangles;\r\n\r\n\t\tvar tMatrix: Matrix;\r\n\t\tvar i: number = 0;\r\n\t\tvar v: number = 0;\r\n\t\tvar skip: number = 0;\r\n\t\tvar n: number = 0;\r\n\t\tvar w: number = 0;\r\n\t\tvar b: number = 0;\r\n\t\tvar wx: number = 0;\r\n\t\tvar wy: number = 0;\r\n\t\tvar vx: number = 0;\r\n\t\tvar vy: number = 0;\r\n\t\tvar bone: Bone;\r\n\t\tvar len: number;\r\n\t\t//if (!tTriangles) tTriangles = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n\t\tif (tBones == null) {\r\n\t\t\tif (!tTriangles) tTriangles = tWeights;\r\n\t\t\tif (boneSlot.deformData)\r\n\t\t\t\ttTriangles = boneSlot.deformData;\r\n\t\t\tvar parentName: string;\r\n\t\t\tparentName = boneSlot.parent;\r\n\t\t\tif (boneList) {\r\n\t\t\t\tlen = boneList.length;\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\tif (boneList[i].name == parentName) {\r\n\t\t\t\t\t\tbone = boneList[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar tBoneMt: Matrix;\r\n\t\t\tif (bone) {\r\n\t\t\t\ttBoneMt = bone.resultMatrix;\r\n\t\t\t}\r\n\t\t\t//bone = boneSlot.parent;\r\n\r\n\r\n\t\t\tif (!tBoneMt) tBoneMt = PathConstraint._tempMt;\r\n\t\t\tvar x: number = tBoneMt.tx;\r\n\t\t\tvar y: number = tBoneMt.ty;\r\n\t\t\tvar a: number = tBoneMt.a, bb: number = tBoneMt.b, c: number = tBoneMt.c, d: number = tBoneMt.d;\r\n\t\t\tif (bone) d *= bone.d;\r\n\t\t\tfor (v = start, w = offset; w < count; v += 2, w += 2) {\r\n\t\t\t\tvx = tTriangles[v], vy = tTriangles[v + 1];\r\n\t\t\t\tworldVertices[w] = vx * a + vy * bb + x;\r\n\t\t\t\tworldVertices[w + 1] = -(vx * c + vy * d + y);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (i = 0; i < start; i += 2) {\r\n\t\t\tn = tBones[v];\r\n\t\t\tv += n + 1;\r\n\t\t\tskip += n;\r\n\t\t}\r\n\t\tvar skeletonBones: Bone[] = boneList;\r\n\t\tfor (w = offset, b = skip * 3; w < count; w += 2) {\r\n\t\t\twx = 0, wy = 0;\r\n\t\t\tn = tBones[v++];\r\n\t\t\tn += v;\r\n\t\t\tfor (; v < n; v++ , b += 3) {\r\n\t\t\t\ttMatrix = skeletonBones[tBones[v]].resultMatrix;\r\n\t\t\t\tvx = tWeights[b];\r\n\t\t\t\tvy = tWeights[b + 1];\r\n\t\t\t\tvar weight: number = tWeights[b + 2];\r\n\t\t\t\twx += (vx * tMatrix.a + vy * tMatrix.c + tMatrix.tx) * weight;\r\n\t\t\t\twy += (vx * tMatrix.b + vy * tMatrix.d + tMatrix.ty) * weight;\r\n\t\t\t}\r\n\t\t\tworldVertices[w] = wx;\r\n\t\t\tworldVertices[w + 1] = wy;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 计算路径上的节点\r\n\t * @param\tboneSlot\r\n\t * @param\tboneList\r\n\t * @param\tgraphics\r\n\t * @param\tspacesCount\r\n\t * @param\ttangents\r\n\t * @param\tpercentPosition\r\n\t * @param\tpercentSpacing\r\n\t * @return\r\n\t */\r\n\t//TODO:coverage\r\n\tprivate computeWorldPositions(boneSlot: BoneSlot, boneList: Bone[], graphics: Graphics, spacesCount: number, tangents: boolean, percentPosition: boolean, percentSpacing: boolean): number[] {\r\n\t\tvar tBones: any[] = boneSlot.currDisplayData.bones;\r\n\t\tvar tWeights: any[] = boneSlot.currDisplayData.weights;\r\n\t\tvar tTriangles: any[] = boneSlot.currDisplayData.triangles;\r\n\r\n\t\tvar tRx: number = 0;\r\n\t\tvar tRy: number = 0;\r\n\t\tvar nn: number = 0;\r\n\t\tvar tMatrix: Matrix;\r\n\t\tvar tX: number;\r\n\t\tvar tY: number;\r\n\t\tvar tB: number = 0;\r\n\t\tvar tWeight: number = 0;\r\n\t\tvar tVertices: number[] = [];\r\n\t\tvar i: number = 0, j: number = 0, n: number = 0;\r\n\t\tvar verticesLength: number = boneSlot.currDisplayData.verLen;\r\n\t\tvar target: BoneSlot = boneSlot;\r\n\t\tvar position: number = this.position;\r\n\t\tvar spaces: number[] = this._spaces;\r\n\t\tvar world: number[] = [];\r\n\t\tvar out: number[] = [];\r\n\t\tvar closed: boolean = false;\r\n\t\tvar curveCount: number = verticesLength / 6;\r\n\t\tvar prevCurve: number = -1;\r\n\t\tvar pathLength: number;\r\n\t\tvar o: number, curve: number;\r\n\t\tvar p: number;\r\n\t\tvar space: number;\r\n\t\tvar prev: number;\r\n\t\tvar length: number;\r\n\t\tif (!true) { //path.constantSpeed) {\r\n\t\t\tvar lengths: number[] = boneSlot.currDisplayData.lengths as number[];\r\n\t\t\tcurveCount -= closed ? 1 : 2;\r\n\t\t\tpathLength = lengths[curveCount];\r\n\t\t\tif (percentPosition)\r\n\t\t\t\tposition *= pathLength;\r\n\t\t\tif (percentSpacing) {\r\n\t\t\t\tfor (i = 0; i < spacesCount; i++)\r\n\t\t\t\t\tspaces[i] *= pathLength;\r\n\t\t\t}\r\n\t\t\tworld.length = 8;\r\n\t\t\t//world = this._world;\r\n\r\n\t\t\tfor (i = 0, o = 0, curve = 0; i < spacesCount; i++ , o += 3) {\r\n\t\t\t\tspace = spaces[i];\r\n\t\t\t\tposition += space;\r\n\t\t\t\tp = position;\r\n\r\n\t\t\t\tif (closed) {\r\n\t\t\t\t\tp %= pathLength;\r\n\t\t\t\t\tif (p < 0)\r\n\t\t\t\t\t\tp += pathLength;\r\n\t\t\t\t\tcurve = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse if (p < 0) {\r\n\t\t\t\t\tif (prevCurve != PathConstraint.BEFORE) {\r\n\t\t\t\t\t\tprevCurve = PathConstraint.BEFORE;\r\n\t\t\t\t\t\tthis.computeWorldVertices2(target, boneList, 2, 4, world, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addBeforePosition(p, world, 0, out, o);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse if (p > pathLength) {\r\n\t\t\t\t\tif (prevCurve != PathConstraint.AFTER) {\r\n\t\t\t\t\t\tprevCurve = PathConstraint.AFTER;\r\n\t\t\t\t\t\tthis.computeWorldVertices2(target, boneList, verticesLength - 6, 4, world, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addAfterPosition(p - pathLength, world, 0, out, o);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Determine curve containing position.\r\n\t\t\t\tfor (; ; curve++) {\r\n\t\t\t\t\tlength = lengths[curve];\r\n\t\t\t\t\tif (p > length)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tif (curve == 0)\r\n\t\t\t\t\t\tp /= length;\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tprev = lengths[curve - 1];\r\n\t\t\t\t\t\tp = (p - prev) / (length - prev);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (curve != prevCurve) {\r\n\t\t\t\t\tprevCurve = curve;\r\n\t\t\t\t\tif (closed && curve == curveCount) {\r\n\t\t\t\t\t\tthis.computeWorldVertices2(target, boneList, verticesLength - 4, 4, world, 0);\r\n\t\t\t\t\t\tthis.computeWorldVertices2(target, boneList, 0, 4, world, 4);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tthis.computeWorldVertices2(target, boneList, curve * 6 + 2, 8, world, 0);\r\n\t\t\t\t}\r\n\t\t\t\tthis.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || (i > 0 && space == 0));\r\n\t\t\t}\r\n\t\t\treturn out;\r\n\t\t}\r\n\r\n\t\t// World vertices.\r\n\t\tif (closed) {\r\n\t\t\tverticesLength += 2;\r\n\t\t\tworld[verticesLength - 2] = world[0];\r\n\t\t\tworld[verticesLength - 1] = world[1];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcurveCount--;\r\n\t\t\tverticesLength -= 4;\r\n\t\t\tthis.computeWorldVertices2(boneSlot, boneList, 2, verticesLength, tVertices, 0);\r\n\t\t\tif (this._debugKey) {\r\n\t\t\t\tfor (i = 0; i < tVertices.length;) {\r\n\t\t\t\t\tgraphics.drawCircle(tVertices[i++], tVertices[i++], 10, \"#ff0000\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tworld = tVertices;\r\n\t\t}\r\n\r\n\t\t// Curve lengths.\r\n\t\tthis._curves.length = curveCount;\r\n\t\tvar curves: number[] = this._curves;\r\n\t\tpathLength = 0;\r\n\t\tvar x1: number = world[0], y1: number = world[1], cx1: number = 0, cy1: number = 0, cx2: number = 0, cy2: number = 0, x2: number = 0, y2: number = 0;\r\n\t\tvar tmpx: number, tmpy: number, dddfx: number, dddfy: number, ddfx: number, ddfy: number, dfx: number, dfy: number;\r\n\t\tvar w: number;\r\n\t\tfor (i = 0, w = 2; i < curveCount; i++ , w += 6) {\r\n\t\t\tcx1 = world[w];\r\n\t\t\tcy1 = world[w + 1];\r\n\t\t\tcx2 = world[w + 2];\r\n\t\t\tcy2 = world[w + 3];\r\n\t\t\tx2 = world[w + 4];\r\n\t\t\ty2 = world[w + 5];\r\n\t\t\ttmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\r\n\t\t\ttmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\r\n\t\t\tdddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\r\n\t\t\tdddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\r\n\t\t\tddfx = tmpx * 2 + dddfx;\r\n\t\t\tddfy = tmpy * 2 + dddfy;\r\n\t\t\tdfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\r\n\t\t\tdfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tdfx += ddfx;\r\n\t\t\tdfy += ddfy;\r\n\t\t\tddfx += dddfx;\r\n\t\t\tddfy += dddfy;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tdfx += ddfx;\r\n\t\t\tdfy += ddfy;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tdfx += ddfx + dddfx;\r\n\t\t\tdfy += ddfy + dddfy;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tcurves[i] = pathLength;\r\n\t\t\tx1 = x2;\r\n\t\t\ty1 = y2;\r\n\t\t}\r\n\t\tif (percentPosition)\r\n\t\t\tposition *= pathLength;\r\n\t\tif (percentSpacing) {\r\n\t\t\tfor (i = 0; i < spacesCount; i++)\r\n\t\t\t\tspaces[i] *= pathLength;\r\n\t\t}\r\n\r\n\t\tvar segments: number[] = this._segments;\r\n\t\tvar curveLength: number = 0;\r\n\t\tvar segment: number;\r\n\t\tfor (i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++ , o += 3) {\r\n\t\t\tspace = spaces[i];\r\n\t\t\tposition += space;\r\n\t\t\tp = position;\r\n\r\n\t\t\tif (closed) {\r\n\t\t\t\tp %= pathLength;\r\n\t\t\t\tif (p < 0)\r\n\t\t\t\t\tp += pathLength;\r\n\t\t\t\tcurve = 0;\r\n\t\t\t}\r\n\t\t\telse if (p < 0) {\r\n\t\t\t\tthis.addBeforePosition(p, world, 0, out, o);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\telse if (p > pathLength) {\r\n\t\t\t\tthis.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine curve containing position.\r\n\t\t\tfor (; ; curve++) {\r\n\t\t\t\tlength = curves[curve];\r\n\t\t\t\tif (p > length)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tif (curve == 0)\r\n\t\t\t\t\tp /= length;\r\n\t\t\t\telse {\r\n\t\t\t\t\tprev = curves[curve - 1];\r\n\t\t\t\t\tp = (p - prev) / (length - prev);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Curve segment lengths.\r\n\t\t\tif (curve != prevCurve) {\r\n\t\t\t\tprevCurve = curve;\r\n\t\t\t\tvar ii: number = curve * 6;\r\n\t\t\t\tx1 = world[ii];\r\n\t\t\t\ty1 = world[ii + 1];\r\n\t\t\t\tcx1 = world[ii + 2];\r\n\t\t\t\tcy1 = world[ii + 3];\r\n\t\t\t\tcx2 = world[ii + 4];\r\n\t\t\t\tcy2 = world[ii + 5];\r\n\t\t\t\tx2 = world[ii + 6];\r\n\t\t\t\ty2 = world[ii + 7];\r\n\t\t\t\ttmpx = (x1 - cx1 * 2 + cx2) * 0.03;\r\n\t\t\t\ttmpy = (y1 - cy1 * 2 + cy2) * 0.03;\r\n\t\t\t\tdddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\r\n\t\t\t\tdddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\r\n\t\t\t\tddfx = tmpx * 2 + dddfx;\r\n\t\t\t\tddfy = tmpy * 2 + dddfy;\r\n\t\t\t\tdfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\r\n\t\t\t\tdfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\r\n\t\t\t\tcurveLength = Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\tsegments[0] = curveLength;\r\n\t\t\t\tfor (ii = 1; ii < 8; ii++) {\r\n\t\t\t\t\tdfx += ddfx;\r\n\t\t\t\t\tdfy += ddfy;\r\n\t\t\t\t\tddfx += dddfx;\r\n\t\t\t\t\tddfy += dddfy;\r\n\t\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\t\tsegments[ii] = curveLength;\r\n\t\t\t\t}\r\n\t\t\t\tdfx += ddfx;\r\n\t\t\t\tdfy += ddfy;\r\n\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\tsegments[8] = curveLength;\r\n\t\t\t\tdfx += ddfx + dddfx;\r\n\t\t\t\tdfy += ddfy + dddfy;\r\n\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\tsegments[9] = curveLength;\r\n\t\t\t\tsegment = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Weight by segment length.\r\n\t\t\tp *= curveLength;\r\n\t\t\tfor (; ; segment++) {\r\n\t\t\t\tlength = segments[segment];\r\n\t\t\t\tif (p > length)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tif (segment == 0)\r\n\t\t\t\t\tp /= length;\r\n\t\t\t\telse {\r\n\t\t\t\t\tprev = segments[segment - 1];\r\n\t\t\t\t\tp = segment + (p - prev) / (length - prev);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\r\n\t\t}\r\n\t\treturn out;\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\tprivate addBeforePosition(p: number, temp: number[], i: number, out: number[], o: number): void {\r\n\t\tvar x1: number = temp[i], y1: number = temp[i + 1], dx: number = temp[i + 2] - x1, dy: number = temp[i + 3] - y1, r: number = Math.atan2(dy, dx);\r\n\t\tout[o] = x1 + p * Math.cos(r);\r\n\t\tout[o + 1] = y1 + p * Math.sin(r);\r\n\t\tout[o + 2] = r;\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\tprivate addAfterPosition(p: number, temp: number[], i: number, out: number[], o: number): void {\r\n\t\tvar x1: number = temp[i + 2], y1: number = temp[i + 3], dx: number = x1 - temp[i], dy: number = y1 - temp[i + 1], r: number = Math.atan2(dy, dx);\r\n\t\tout[o] = x1 + p * Math.cos(r);\r\n\t\tout[o + 1] = y1 + p * Math.sin(r);\r\n\t\tout[o + 2] = r;\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\tprivate addCurvePosition(p: number, x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number, out: number[], o: number, tangents: boolean): void {\r\n\t\tif (p == 0)\r\n\t\t\tp = 0.0001;\r\n\t\tvar tt: number = p * p, ttt: number = tt * p, u: number = 1 - p, uu: number = u * u, uuu: number = uu * u;\r\n\t\tvar ut: number = u * p, ut3: number = ut * 3, uut3: number = u * ut3, utt3: number = ut3 * p;\r\n\t\tvar x: number = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y: number = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\r\n\t\tout[o] = x;\r\n\t\tout[o + 1] = y;\r\n\t\tif (tangents) {\r\n\t\t\tout[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tout[o + 2] = 0;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { TfConstraintData } from \"./TfConstraintData\";\r\nimport { Bone } from \"./Bone\";\r\n/**\r\n * @internal\r\n */\r\nexport class TfConstraint {\r\n\t/**@internal */\r\n\tprivate _data: TfConstraintData;\r\n\t/**@internal */\r\n\tprivate _bones: Bone[];\r\n\ttarget: Bone;\r\n\trotateMix: number;\r\n\ttranslateMix: number;\r\n\tscaleMix: number;\r\n\tshearMix: number;\r\n\t/**@internal */\r\n\tprivate _temp: number[] = [];\r\n\r\n\t//TODO:coverage\r\n\tconstructor(data: TfConstraintData, bones: Bone[]) {\r\n\t\tthis._data = data;\r\n\t\tif (this._bones == null) {\r\n\t\t\tthis._bones = [];\r\n\t\t}\r\n\t\tthis.target = bones[data.targetIndex];\r\n\t\tvar j: number, n: number;\r\n\t\tfor (j = 0, n = data.boneIndexs.length; j < n; j++) {\r\n\t\t\tthis._bones.push(bones[data.boneIndexs[j]]);\r\n\t\t}\r\n\t\tthis.rotateMix = data.rotateMix;\r\n\t\tthis.translateMix = data.translateMix;\r\n\t\tthis.scaleMix = data.scaleMix;\r\n\t\tthis.shearMix = data.shearMix;\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\tapply(): void {\r\n\t\tvar tTfBone: Bone;\r\n\t\tvar ta: number = this.target.resultMatrix.a, tb: number = this.target.resultMatrix.b, tc: number = this.target.resultMatrix.c, td: number = this.target.resultMatrix.d;\r\n\t\tfor (var j: number = 0, n: number = this._bones.length; j < n; j++) {\r\n\t\t\ttTfBone = this._bones[j];\r\n\t\t\tif (this.rotateMix > 0) {\r\n\t\t\t\tvar a: number = tTfBone.resultMatrix.a, b: number = tTfBone.resultMatrix.b, c: number = tTfBone.resultMatrix.c, d: number = tTfBone.resultMatrix.d;\r\n\t\t\t\tvar r: number = Math.atan2(tc, ta) - Math.atan2(c, a) + this._data.offsetRotation * Math.PI / 180;\r\n\t\t\t\tif (r > Math.PI)\r\n\t\t\t\t\tr -= Math.PI * 2;\r\n\t\t\t\telse if (r < -Math.PI) r += Math.PI * 2;\r\n\t\t\t\tr *= this.rotateMix;\r\n\t\t\t\tvar cos: number = Math.cos(r), sin: number = Math.sin(r);\r\n\t\t\t\ttTfBone.resultMatrix.a = cos * a - sin * c;\r\n\t\t\t\ttTfBone.resultMatrix.b = cos * b - sin * d;\r\n\t\t\t\ttTfBone.resultMatrix.c = sin * a + cos * c;\r\n\t\t\t\ttTfBone.resultMatrix.d = sin * b + cos * d;\r\n\t\t\t}\r\n\t\t\tif (this.translateMix) {\r\n\t\t\t\tthis._temp[0] = this._data.offsetX;\r\n\t\t\t\tthis._temp[1] = this._data.offsetY;\r\n\t\t\t\tthis.target.localToWorld(this._temp);\r\n\t\t\t\ttTfBone.resultMatrix.tx += (this._temp[0] - tTfBone.resultMatrix.tx) * this.translateMix;\r\n\t\t\t\ttTfBone.resultMatrix.ty += (this._temp[1] - tTfBone.resultMatrix.ty) * this.translateMix;\r\n\t\t\t\ttTfBone.updateChild();\r\n\t\t\t}\r\n\t\t\tif (this.scaleMix > 0) {\r\n\t\t\t\tvar bs: number = Math.sqrt(tTfBone.resultMatrix.a * tTfBone.resultMatrix.a + tTfBone.resultMatrix.c * tTfBone.resultMatrix.c);\r\n\t\t\t\tvar ts: number = Math.sqrt(ta * ta + tc * tc);\r\n\t\t\t\tvar s: number = bs > 0.00001 ? (bs + (ts - bs + this._data.offsetScaleX) * this.scaleMix) / bs : 0;\r\n\t\t\t\ttTfBone.resultMatrix.a *= s;\r\n\t\t\t\ttTfBone.resultMatrix.c *= s;\r\n\t\t\t\tbs = Math.sqrt(tTfBone.resultMatrix.b * tTfBone.resultMatrix.b + tTfBone.resultMatrix.d * tTfBone.resultMatrix.d);\r\n\t\t\t\tts = Math.sqrt(tb * tb + td * td);\r\n\t\t\t\ts = bs > 0.00001 ? (bs + (ts - bs + this._data.offsetScaleY) * this.scaleMix) / bs : 0;\r\n\t\t\t\ttTfBone.resultMatrix.b *= s;\r\n\t\t\t\ttTfBone.resultMatrix.d *= s;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.shearMix > 0) {\r\n\t\t\t\tb = tTfBone.resultMatrix.b, d = tTfBone.resultMatrix.d;\r\n\t\t\t\tvar by: number = Math.atan2(d, b);\r\n\t\t\t\tr = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(tTfBone.resultMatrix.c, tTfBone.resultMatrix.a));\r\n\t\t\t\tif (r > Math.PI)\r\n\t\t\t\t\tr -= Math.PI * 2;\r\n\t\t\t\telse if (r < -Math.PI) r += Math.PI * 2;\r\n\t\t\t\tr = by + (r + this._data.offsetShearY * Math.PI / 180) * this.shearMix;\r\n\t\t\t\ts = Math.sqrt(b * b + d * d);\r\n\t\t\t\ttTfBone.resultMatrix.b = Math.cos(r) * s;\r\n\t\t\t\ttTfBone.resultMatrix.d = Math.sin(r) * s;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Bone } from \"./Bone\";\r\nimport { IkConstraint } from \"./IkConstraint\";\r\nimport { PathConstraint } from \"./PathConstraint\";\r\nimport { BoneSlot } from \"./BoneSlot\";\r\nimport { TfConstraint } from \"./TfConstraint\";\r\nimport { SkinData } from \"./SkinData\";\r\nimport { EventData } from \"./EventData\";\r\nimport { DrawOrderData } from \"./DrawOrderData\";\r\nimport { Transform } from \"./Transform\";\r\nimport { DeformAniData } from \"./DeformAniData\";\r\nimport { DeformSlotData } from \"./DeformSlotData\";\r\nimport { DeformSlotDisplayData } from \"./DeformSlotDisplayData\";\r\nimport { AnimationPlayer } from \"../AnimationPlayer\"\r\nimport { GraphicsAni } from \"../GraphicsAni\"\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { SoundManager } from \"../../media/SoundManager\";\r\nimport { Graphics } from \"../../display/Graphics\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { Texture } from \"../../resource/Texture\";\r\nimport { IAniLib } from \"../AniLibPack\";\r\nimport { Templet } from \"../../ani/bone/Templet\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { LayaEnv } from \"../../../LayaEnv\";\r\n\r\n/**动画开始播放调度\r\n * @eventType Event.PLAYED\r\n * */\r\n/*[Event(name = \"played\", type = \"laya.events.Event.PLAYED\", desc = \"动画开始播放调度\")]*/\r\n/**动画停止播放调度\r\n * @eventType Event.STOPPED\r\n * */\r\n/*[Event(name = \"stopped\", type = \"laya.events.Event.STOPPED\", desc = \"动画停止播放调度\")]*/\r\n/**动画暂停播放调度\r\n * @eventType Event.PAUSED\r\n * */\r\n/*[Event(name = \"paused\", type = \"laya.events.Event.PAUSED\", desc = \"动画暂停播放调度\")]*/\r\n/**自定义事件。\r\n * @eventType Event.LABEL\r\n */\r\n/*[Event(name = \"label\", type = \"laya.events.Event.LABEL\", desc = \"自定义事件\")]*/\r\n/**\r\n * 骨骼动画由<code>Templet</code>，<code>AnimationPlayer</code>，<code>Skeleton</code>三部分组成。\r\n */\r\nexport class Skeleton extends Sprite {\r\n\r\n    protected _source: string;\r\n    /**@internal */\r\n    protected _templet: Templet;//动画解析器\r\n    /** @internal */\r\n    protected _player: AnimationPlayer;//播放器\r\n    /** @internal */\r\n    protected _curOriginalData: Float32Array;//当前骨骼的偏移数据\r\n\r\n    /** @internal */\r\n    private _boneMatrixArray: any[] = [];//当前骨骼动画的最终结果数据\r\n    /** @internal */\r\n    private _lastTime: number = 0;//上次的帧时间\r\n    /** @internal */\r\n    private _currAniIndex: number = -1;\r\n    /** @internal */\r\n    private _pause: boolean = true;\r\n    /** @internal */\r\n    protected _aniClipIndex: number = -1;\r\n    /** @internal */\r\n    protected _clipIndex: number = -1;\r\n    /** @internal */\r\n    private _skinIndex: number = 0;\r\n    /** @internal */\r\n    private _skinName: string = \"default\";\r\n    /** @internal */\r\n    private _aniMode: number = 0;//\r\n    /** @internal 当前动画自己的缓冲区*/\r\n    private _graphicsCache: any[];\r\n    /** @internal */\r\n    private _boneSlotDic: any;\r\n    /** @internal */\r\n    private _bindBoneBoneSlotDic: any;\r\n    /** @internal */\r\n    private _boneSlotArray: any[];\r\n    /** @internal */\r\n    private _index: number = -1;\r\n    /** @internal */\r\n    private _total: number = -1;\r\n    /** @internal */\r\n    private _indexControl: boolean = false;\r\n    /** @internal */\r\n    private _complete: Handler;\r\n    /** @internal */\r\n    private _yReverseMatrix: Matrix;\r\n    /** @internal */\r\n    private _ikArr: any[];\r\n    /** @internal */\r\n    private _tfArr: any[];\r\n    /** @internal */\r\n    private _pathDic: any;\r\n    /** @internal */\r\n    private _rootBone: Bone;\r\n    /** @internal */\r\n    protected _boneList: Bone[];\r\n    /** @internal */\r\n    protected _aniSectionDic: any;\t\t// section 是每段数据(transform,slot,ik,path)的长度，这个是一个section的数据，表示每个clip的section数据\r\n    /** @internal */\r\n    private _eventIndex: number = 0;\r\n    /** @internal */\r\n    private _drawOrderIndex: number = 0;\r\n    /** @internal */\r\n    private _drawOrder: number[] = null;\r\n    /** @internal */\r\n    private _lastAniClipIndex: number = -1;\r\n    /** @internal */\r\n    private _lastUpdateAniClipIndex: number = -1;\r\n    /** @internal */\r\n    private _playAudio: boolean = true;\r\n    /** @internal */\r\n    private _soundChannelArr: any[] = [];\r\n\r\n    private _animationName: string = \"\";\r\n    private _loop: boolean = true;\r\n\r\n    /**\r\n     * 创建一个Skeleton对象\r\n\r\n     * @param\taniMode\t动画模式，0不支持换装，1、2支持换装\r\n     */\r\n    constructor(aniMode: number = 0) {\r\n        super();\r\n\r\n        this._aniMode = aniMode;\r\n    }\r\n\r\n    /**\r\n    * @private\r\n    * 得到帧索引\r\n    */\r\n    get index(): number {\r\n        return this._index;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 设置帧索引\r\n     */\r\n    set index(value: number) {\r\n        if (this.player) {\r\n            this._index = value;\r\n            this._player.currentTime = this._index * 1000 / this._player.cacheFrameRate;\r\n            this._indexControl = true;\r\n            if (this._aniClipIndex < 0 || this._aniClipIndex >= this.getAnimNum()) {\r\n                this._aniClipIndex = 0;\r\n                this._currAniIndex = 0;\r\n                this._curOriginalData = new Float32Array(this._templet.getTotalkeyframesLength(this._currAniIndex));\r\n                this._drawOrder = null;\r\n                this._eventIndex = 0;\r\n            }\r\n            this._update(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 得到总帧数据\r\n     */\r\n    get total(): number {\r\n        if (this._templet && this._player) {\r\n            this._total = Math.floor(this._templet.getAniDuration(this._player.currentAnimationClipIndex) / 1000 * this._player.cacheFrameRate);\r\n        } else {\r\n            this._total = -1;\r\n        }\r\n        return this._total;\r\n    }\r\n\r\n    /**\r\n     * 得到播放器的引用\r\n     */\r\n    get player(): AnimationPlayer {\r\n        return this._player;\r\n    }\r\n\r\n    /**\r\n     * 皮肤名字\r\n     */\r\n    get skinName(): string {\r\n        return this._skinName;\r\n    }\r\n\r\n    set skinName(value: string) {\r\n        this._skinName = value;\r\n        if (this._templet)\r\n            this.showSkinByName(value);\r\n    }\r\n\r\n    /**\r\n     * 动画名字\r\n     */\r\n    get animationName(): string {\r\n        return this._animationName;\r\n    }\r\n\r\n    set animationName(value: string) {\r\n        this._animationName = value;\r\n        if (this._templet)\r\n            this.play(value, this._loop, true);\r\n    }\r\n\r\n    /**\r\n     * 是否循环\r\n     */\r\n    get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    set loop(value: boolean) {\r\n        this._loop = value;\r\n        if (this._templet)\r\n            this.play(this._animationName, this._loop, true);\r\n    }\r\n\r\n    /**\r\n     * 得到动画模板的引用\r\n     * @return templet.\r\n     */\r\n    get templet(): Templet {\r\n        return this._templet;\r\n    }\r\n\r\n    set templet(value: Templet) {\r\n        this.init(value);\r\n    }\r\n\r\n    /**\r\n     * 得到动画地址\r\n     * @return templet.\r\n     */\r\n    get source(): string {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * 设置动画地址\r\n     */\r\n    set source(value: string) {\r\n        this._source = value;\r\n\r\n        if (value) {\r\n            ILaya.loader.load(value).then((templet: Templet) => {\r\n                if (!this._source || templet && !templet.isCreateFromURL(this._source))\r\n                    return;\r\n\r\n                this.templet = templet;\r\n            });\r\n        }\r\n        else\r\n            this.templet = null;\r\n    }\r\n\r\n    /**\r\n     * 动画类型\r\n     * <table>\r\n     * \t<tr><th>模式</th><th>描述</th></tr>\r\n     * \t<tr>\r\n     * \t\t<td>0</td> <td>使用模板缓冲的数据，模板缓冲的数据，不允许修改（内存开销小，计算开销小，不支持换装）</td>\r\n     * \t</tr>\r\n     * \t<tr>\r\n     * \t\t<td>1</td> <td>使用动画自己的缓冲区，每个动画都会有自己的缓冲区，相当耗费内存\t（内存开销大，计算开销小，支持换装）</td>\r\n     * \t</tr>\r\n     * \t<tr>\r\n     * \t\t<td>2</td> <td>使用动态方式，去实时去画（内存开销小，计算开销大，支持换装,不建议使用）</td>\r\n     * </tr>\r\n     * </table>\r\n     */\r\n    get aniMode(): number {\r\n        return this._aniMode;\r\n    }\r\n\r\n    set aniMode(value: number) {\r\n        this._aniMode = value;\r\n    }\r\n\r\n    /**\r\n     * 初始化动画\r\n     * @param\ttemplet\t\t模板\r\n     */\r\n    protected init(templet: Templet): void {\r\n        if (this._templet) {\r\n            this.reset();\r\n            this.graphics.clear();\r\n        }\r\n\r\n        this._templet = templet;\r\n        if (!this._templet)\r\n            return;\r\n\r\n        if (this._aniMode == 1) { //使用动画自己的缓冲区\r\n            this._graphicsCache = [];\r\n            for (let i = 0, n = templet.getAnimationCount(); i < n; i++) {\r\n                this._graphicsCache.push([]);\r\n            }\r\n        }\r\n        this._yReverseMatrix = templet.yReverseMatrix;\r\n        this._templet._addReference(1);\r\n        this._player = new AnimationPlayer();\r\n\r\n        this._player.templet = templet;\r\n        this._player.play();\r\n        this._parseSrcBoneMatrix();\r\n        //骨骼数据\r\n        this._boneList = templet.mBoneArr;\r\n        this._rootBone = templet.mRootBone;\r\n        this._aniSectionDic = templet.aniSectionDic;\r\n        //ik作用器\r\n        if (templet.ikArr.length > 0) {\r\n            this._ikArr = [];\r\n            for (let i = 0, n = templet.ikArr.length; i < n; i++) {\r\n                this._ikArr.push(new IkConstraint(templet.ikArr[i], this._boneList));\r\n            }\r\n        }\r\n        //path作用器\r\n        if (templet.pathArr.length > 0) {\r\n            this._pathDic = {};\r\n            for (let i = 0, n = templet.pathArr.length; i < n; i++) {\r\n                let tPathData = templet.pathArr[i];\r\n                let tPathConstraint = new PathConstraint(tPathData, this._boneList);\r\n                let tBoneSlot = this._boneSlotDic[tPathData.name];\r\n                if (tBoneSlot) {\r\n                    tPathConstraint = new PathConstraint(tPathData, this._boneList);\r\n                    tPathConstraint.target = tBoneSlot;\r\n                }\r\n                this._pathDic[tPathData.name] = tPathConstraint;\r\n            }\r\n        }\r\n        //tf作用器\r\n        if (templet.tfArr.length > 0) {\r\n            this._tfArr = [];\r\n            for (let i = 0, n = templet.tfArr.length; i < n; i++) {\r\n                this._tfArr.push(new TfConstraint(templet.tfArr[i], this._boneList));\r\n            }\r\n        }\r\n        if (templet.skinDataArray.length > 0) {\r\n            this._skinIndex = this._templet.getSkinIndexByName(this._skinName);\r\n            if (this._skinIndex == -1)\r\n                this._skinIndex = 0;\r\n        }\r\n\r\n        this._player.on(Event.PLAYED, this, this._onPlay);\r\n        this._player.on(Event.STOPPED, this, this._onStop);\r\n        this._player.on(Event.PAUSED, this, this._onPause);\r\n\r\n        if (LayaEnv.isPlaying && this._animationName)\r\n            this.play(this._animationName, this._loop, true);\r\n    }\r\n\r\n    /**\r\n     * 通过加载直接创建动画\r\n     * @param\tpath\t\t要加载的动画文件路径\r\n     * @param\tcomplete\t加载完成的回调函数\r\n     */\r\n    load(path: string, complete?: Handler): void {\r\n        ILaya.loader.load(path).then((templet: Templet) => {\r\n            if (templet == null) return;\r\n\r\n            if (!templet.isCreateFromURL(path))\r\n                return;\r\n\r\n            this.init(templet);\r\n            this.play(0, true);\r\n\r\n            complete && complete.runWith(this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 传递PLAY事件\r\n     */\r\n    private _onPlay(): void {\r\n        this.event(Event.PLAYED);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 传递STOP事件\r\n     */\r\n    private _onStop(): void {\r\n        //把没播的事件播完\r\n        let tEventAniArr: any[] = this._templet.eventAniArr;\r\n        let tEventArr: EventData[] = tEventAniArr[this._aniClipIndex];\r\n        if (tEventArr && this._eventIndex < tEventArr.length) {\r\n            for (; this._eventIndex < tEventArr.length; this._eventIndex++) {\r\n                let tEventData = tEventArr[this._eventIndex];\r\n                if (tEventData.time >= this._player.playStart && tEventData.time <= this._player.playEnd) {\r\n                    this.event(Event.LABEL, tEventData);\r\n                }\r\n            }\r\n        }\r\n        //_eventIndex = 0;\r\n        this._drawOrder = null;\r\n        this.event(Event.STOPPED);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 传递PAUSE事件\r\n     */\r\n    private _onPause(): void {\r\n        this.event(Event.PAUSED);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 创建骨骼的矩阵，保存每次计算的最终结果\r\n     */\r\n    private _parseSrcBoneMatrix(): void {\r\n        let n = this._templet.srcBoneMatrixArr.length;\r\n        for (let i = 0; i < n; i++) {\r\n            this._boneMatrixArray.push(new Matrix());\r\n        }\r\n        if (this._aniMode == 0) {\r\n            this._boneSlotDic = this._templet.boneSlotDic;\r\n            this._bindBoneBoneSlotDic = this._templet.bindBoneBoneSlotDic;\r\n            this._boneSlotArray = this._templet.boneSlotArray;\r\n        } else {\r\n            this._boneSlotDic = {};\r\n            this._bindBoneBoneSlotDic = {};\r\n            this._boneSlotArray = [];\r\n            let tArr: any[] = this._templet.boneSlotArray;\r\n            for (let i = 0, n = tArr.length; i < n; i++) {\r\n                let tBS = tArr[i];\r\n                let tBSArr = this._bindBoneBoneSlotDic[tBS.parent];\r\n                if (tBSArr == null) {\r\n                    this._bindBoneBoneSlotDic[tBS.parent] = tBSArr = [];\r\n                }\r\n                this._boneSlotDic[tBS.name] = tBS = tBS.copy();\r\n                tBSArr.push(tBS);\r\n                this._boneSlotArray.push(tBS);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param startTime \r\n     * @param endTime \r\n     * @param startIndex \r\n     */\r\n    private _emitMissedEvents(startTime: number, endTime: number, startIndex: number = 0): void {\r\n        let tEventAniArr: any[] = this._templet.eventAniArr;\r\n        let tEventArr: EventData[] = tEventAniArr[this._player.currentAnimationClipIndex];\r\n        if (tEventArr) {\r\n            let len = tEventArr.length;\r\n            for (let i = startIndex; i < len; i++) {\r\n                let tEventData = tEventArr[i];\r\n                if (tEventData.time >= this._player.playStart && tEventData.time <= this._player.playEnd) {\r\n                    this.event(Event.LABEL, tEventData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新动画\r\n     * @internal\r\n     * @param\tautoKey true为正常更新，false为index手动更新\r\n     */\r\n    private _update(autoKey: boolean = true): void {\r\n        if (autoKey && this._pause) return;\r\n        if (autoKey && this._indexControl) {\r\n            return;\r\n        }\r\n        let tCurrTime: number = this.timer.currTimer;\r\n        let preIndex: number = this._player.currentKeyframeIndex;\r\n        let dTime: number = tCurrTime - this._lastTime;\r\n        if (autoKey) {\r\n            // player update，更新当前帧数，判断是否stop或者complete\r\n            this._player._update(dTime);\r\n        } else {\r\n            preIndex = -1;\r\n        }\r\n        this._lastTime = tCurrTime;\r\n        this._index = this._clipIndex = this._player.currentKeyframeIndex;\t// 当前所在帧\r\n        if (this._index < 0) return;\r\n        if (dTime > 0 && this._clipIndex == preIndex && this._lastUpdateAniClipIndex == this._aniClipIndex) {\r\n            return;\r\n        }\r\n        this._lastUpdateAniClipIndex = this._aniClipIndex;\r\n        if (preIndex > this._clipIndex && this._eventIndex != 0) {\r\n            this._emitMissedEvents(this._player.playStart, this._player.playEnd, this._eventIndex);\r\n            this._eventIndex = 0;\r\n        }\r\n\r\n        // 自定义事件的检查\r\n        let tEventArr: EventData[] = this._templet.eventAniArr[this._aniClipIndex];\r\n        if (tEventArr && this._eventIndex < tEventArr.length) {\r\n            let tEventData: EventData = tEventArr[this._eventIndex];\r\n            if (tEventData.time >= this._player.playStart && tEventData.time <= this._player.playEnd) {\r\n                if (this._player.currentPlayTime >= tEventData.time) {\r\n                    this.event(Event.LABEL, tEventData);\r\n                    this._eventIndex++;\r\n                    if (this._playAudio && tEventData.audioValue && tEventData.audioValue !== \"null\" && tEventData.audioValue !== \"undefined\") {\r\n                        let channel = SoundManager.playSound((this._player.templet as any)._path + tEventData.audioValue, 1, Handler.create(this, this._onAniSoundStoped));\r\n                        SoundManager.playbackRate = this._player.playbackRate;\r\n                        channel && this._soundChannelArr.push(channel);\r\n                    }\r\n                }\r\n            } else if (tEventData.time < this._player.playStart && this._playAudio && tEventData.audioValue && tEventData.audioValue !== \"null\" && tEventData.audioValue !== \"undefined\") {\r\n                this._eventIndex++;\r\n                let channel = SoundManager.playSound((this._player.templet as any)._path + tEventData.audioValue, 1, Handler.create(this, this._onAniSoundStoped), null, (this._player.currentPlayTime - tEventData.time) / 1000);\r\n                SoundManager.playbackRate = this._player.playbackRate;\r\n                channel && this._soundChannelArr.push(channel);\r\n            } else {\r\n                this._eventIndex++;\r\n            }\r\n        }\r\n\r\n        if (this._aniMode == 0) {\r\n            // 从templet中找到缓存的这一帧的 graphics\r\n            let tGraphics = this._templet.getGrahicsDataWithCache(this._aniClipIndex, this._clipIndex) || this._createGraphics();// _clipIndex是 AnimationPlayer计算出来的\r\n            if (tGraphics && this.graphics != tGraphics) {\r\n                this.graphics = tGraphics;\r\n            }\r\n        } else if (this._aniMode == 1) {\r\n            let tGraphics = this._getGrahicsDataWithCache(this._aniClipIndex, this._clipIndex) || this._createGraphics();\t// 与0的区别是从this get，上面是从templet get\r\n            if (tGraphics && this.graphics != tGraphics) {\r\n                this.graphics = tGraphics;\r\n            }\r\n        } else {\r\n            this._createGraphics();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 清掉播放完成的音频\r\n     * @param force 是否强制删掉所有的声音channel\r\n     */\r\n    private _onAniSoundStoped(force: boolean): void {\r\n        for (let i = this._soundChannelArr.length - 1; i >= 0; i--) {\r\n            let channel = this._soundChannelArr[i];\r\n            if (channel.isStopped || force) {\r\n                !channel.isStopped && channel.stop();\r\n                this._soundChannelArr.splice(i, 1);\r\n                // SoundManager.removeChannel(_channel); // TODO 是否需要? 去掉有什么好处? 是否还需要其他操作?\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 创建grahics图像. 并且保存到cache中\r\n     * @param\t_clipIndex 第几帧\r\n     */\r\n    protected _createGraphics(_clipIndex: number = -1): GraphicsAni {\r\n        if (_clipIndex == -1) _clipIndex = this._clipIndex;\r\n        let curTime: number = _clipIndex * this._player.cacheFrameRateInterval;\r\n        //处理绘制顺序\r\n        let tDrawOrderAniArr: any[] = this._templet.drawOrderAniArr;\r\n        // 当前动作的 drawOrderArray 信息\r\n        let tDrawOrderArr: DrawOrderData[] = tDrawOrderAniArr[this._aniClipIndex];\r\n        if (tDrawOrderArr && tDrawOrderArr.length > 0) {\r\n            // 选出当前所在帧的 drawOrderArray\r\n            this._drawOrderIndex = 0;\t// 从0开始\r\n            let tDrawOrderData = tDrawOrderArr[this._drawOrderIndex];\r\n            while (curTime >= tDrawOrderData.time) {\r\n                this._drawOrder = tDrawOrderData.drawOrder;\r\n                this._drawOrderIndex++;\t// 下一帧\r\n                if (this._drawOrderIndex >= tDrawOrderArr.length) {\r\n                    break;\r\n                }\r\n                tDrawOrderData = tDrawOrderArr[this._drawOrderIndex];\r\n            }\r\n        }\r\n\r\n        //要用的graphics\r\n        if (this._aniMode == 0 || this._aniMode == 1) {\t// 有缓存的情况\r\n            this.graphics = GraphicsAni.create();// new GraphicsAni();\r\n        } else { // 实时计算的情况。 每次都是新的数据，因此要把上一帧的清理一下\r\n            if (this.graphics instanceof GraphicsAni) {\r\n                this.graphics.clear();\r\n            } else {\r\n                this.graphics = GraphicsAni.create(); //new GraphicsAni();\r\n            }\r\n        }\r\n        let tGraphics: GraphicsAni = (<GraphicsAni>this.graphics);\r\n        //获取骨骼数据\r\n        let bones: any[] = this._templet.getNodes(this._aniClipIndex);\r\n        // 现在把帧数计算改成实时的，根据时间算，因此时间要求准确，不能再用curTime了。\r\n        // 用curTime可能会出一个bug就是没有到达最后一帧。例如最后两帧间隔很短\r\n        let stopped = this._player.state == 0;\r\n\r\n        this._templet.getOriginalData(this._aniClipIndex, this._curOriginalData, /*_templet._fullFrames[_aniClipIndex]*/null, _clipIndex, stopped ? (curTime + this._player.cacheFrameRateInterval) : curTime);\r\n        let tSectionArr: any[] = this._aniSectionDic[this._aniClipIndex];\r\n        //let tParentMatrix: Matrix;//父骨骼矩阵的引用\r\n        let tStartIndex: number = 0;\r\n        let i: number = 0, j: number = 0, k: number = 0, n: number = 0;\r\n        //对骨骼数据进行计算\r\n        let boneCount: number = this._templet.srcBoneMatrixArr.length;\r\n        let origDt: Float32Array = this._curOriginalData;\r\n        for (i = 0, n = tSectionArr[0]; i < boneCount; i++) {\r\n            let tSrcBone = this._boneList[i];\r\n            let resultTrans: Transform = tSrcBone.resultTransform;\r\n            let tParentTransform = this._templet.srcBoneMatrixArr[i];\r\n            resultTrans.scX = tParentTransform.scX * origDt[tStartIndex++];\r\n            resultTrans.skX = tParentTransform.skX + origDt[tStartIndex++];\r\n            resultTrans.skY = tParentTransform.skY + origDt[tStartIndex++];\r\n            resultTrans.scY = tParentTransform.scY * origDt[tStartIndex++];\r\n            resultTrans.x = tParentTransform.x + origDt[tStartIndex++];\r\n            resultTrans.y = tParentTransform.y + origDt[tStartIndex++];\r\n            if (this._templet.tMatrixDataLen === 8) {\r\n                resultTrans.skewX = tParentTransform.skewX + origDt[tStartIndex++];\r\n                resultTrans.skewY = tParentTransform.skewY + origDt[tStartIndex++];\r\n            }\r\n\r\n        }\r\n        //对插槽进行插值计算\r\n        let tSlotDic: any = {};\r\n        let tSlotAlphaDic: any = {};\r\n        for (n += tSectionArr[1]; i < n; i++) {\r\n            let tBoneData = bones[i];\r\n            tSlotDic[tBoneData.name] = origDt[tStartIndex++];\r\n            tSlotAlphaDic[tBoneData.name] = origDt[tStartIndex++];\t// 每一个slot的alpha?\r\n            //预留\r\n            tStartIndex += 4;\r\n        }\r\n        //ik\r\n        let tBendDirectionDic: any = {};\r\n        let tMixDic: any = {};\r\n        for (n += tSectionArr[2]; i < n; i++) {\r\n            let tBoneData = bones[i];\r\n            tBendDirectionDic[tBoneData.name] = origDt[tStartIndex++];\r\n            tMixDic[tBoneData.name] = origDt[tStartIndex++];\r\n            //预留\r\n            tStartIndex += 4;\r\n        }\r\n        //path\r\n        if (this._pathDic) {\r\n            for (n += tSectionArr[3]; i < n; i++) {\r\n                let tBoneData = bones[i];\r\n                let tPathConstraint = this._pathDic[tBoneData.name];\r\n                if (tPathConstraint) {\r\n                    let tByte: Byte = new Byte(tBoneData.extenData);\r\n                    switch (tByte.getByte()) {\r\n                        case 1://position\r\n                            tPathConstraint.position = origDt[tStartIndex++];\r\n                            break;\r\n                        case 2://spacing\r\n                            tPathConstraint.spacing = origDt[tStartIndex++];\r\n                            break;\r\n                        case 3://mix\r\n                            tPathConstraint.rotateMix = origDt[tStartIndex++];\r\n                            tPathConstraint.translateMix = origDt[tStartIndex++];\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 从root开始级联矩阵\r\n        this._rootBone.update(this._yReverseMatrix || Matrix.TEMP.identity());\r\n\r\n        //刷新IK作用器\r\n        if (this._ikArr) {\r\n            let tIkConstraint: IkConstraint;\r\n            for (i = 0, n = this._ikArr.length; i < n; i++) {\r\n                tIkConstraint = this._ikArr[i];\r\n                if (tIkConstraint.name in tBendDirectionDic) {\r\n                    tIkConstraint.bendDirection = tBendDirectionDic[tIkConstraint.name];\r\n                }\r\n                if (tIkConstraint.name in tMixDic) {\r\n                    tIkConstraint.mix = tMixDic[tIkConstraint.name]\r\n                }\r\n                tIkConstraint.apply();\r\n                //tIkConstraint.updatePos(this.x, this.y);\r\n            }\r\n        }\r\n        //刷新PATH作用器\r\n        if (this._pathDic) {\r\n            for (let tPathStr in this._pathDic) {\r\n                let tPathConstraint = this._pathDic[tPathStr];\r\n                tPathConstraint.apply(this._boneList, tGraphics);\r\n            }\r\n        }\r\n        //刷新transform作用器\r\n        if (this._tfArr) {\r\n            for (i = 0, k = this._tfArr.length; i < k; i++) {\r\n                let tTfConstraint = this._tfArr[i];\r\n                tTfConstraint.apply();\r\n            }\r\n        }\r\n\r\n        for (i = 0, k = this._boneList.length; i < k; i++) {\r\n            let tSrcBone = this._boneList[i];\r\n            let tDBBoneSlotArr = this._bindBoneBoneSlotDic[tSrcBone.name];\r\n            tSrcBone.resultMatrix.copyTo(this._boneMatrixArray[i]);\r\n            if (tDBBoneSlotArr) {\r\n                for (j = 0, n = tDBBoneSlotArr.length; j < n; j++) {\r\n                    let tDBBoneSlot = tDBBoneSlotArr[j];\r\n                    if (tDBBoneSlot) {\r\n                        tDBBoneSlot.setParentMatrix(tSrcBone.resultMatrix);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let tDeformDic: any = {};\r\n        //变形动画作用器\r\n        let tDeformAniArr: any[] = this._templet.deformAniArr;\r\n        if (tDeformAniArr && tDeformAniArr.length > 0) {\r\n            if (this._lastAniClipIndex != this._aniClipIndex) {\r\n                this._lastAniClipIndex = this._aniClipIndex;\r\n                for (i = 0, n = this._boneSlotArray.length; i < n; i++) {\r\n                    let tDBBoneSlot = this._boneSlotArray[i];\r\n                    tDBBoneSlot.deformData = null;\r\n                }\r\n            }\r\n            let tSkinDeformAni: any = tDeformAniArr[this._aniClipIndex];\r\n            //使用default数据\r\n            let tDeformAniData = (<DeformAniData>(tSkinDeformAni[\"default\"]));\r\n            this._setDeform(tDeformAniData, tDeformDic, this._boneSlotArray, curTime);\r\n\r\n            //使用其他皮肤的数据\r\n            let tSkin: string;\r\n            for (tSkin in tSkinDeformAni) {\r\n                if (tSkin != \"default\" && tSkin != this._skinName) {\r\n                    tDeformAniData = (<DeformAniData>tSkinDeformAni[tSkin]);\r\n                    this._setDeform(tDeformAniData, tDeformDic, this._boneSlotArray, curTime);\r\n                }\r\n            }\r\n\r\n            //使用自己皮肤的数据\r\n            tDeformAniData = (<DeformAniData>(tSkinDeformAni[this._skinName]));\r\n            this._setDeform(tDeformAniData, tDeformDic, this._boneSlotArray, curTime);\r\n        }\r\n\r\n        //_rootBone.updateDraw(this.x,this.y);\r\n        //把动画按插槽顺序画出来\r\n        if (this._drawOrder) {\r\n            for (i = 0, n = this._drawOrder.length; i < n; i++) {\r\n                let tDBBoneSlot = this._boneSlotArray[this._drawOrder[i]];\r\n                let tSlotData2 = tSlotDic[tDBBoneSlot.name];\r\n                let tSlotData3 = tSlotAlphaDic[tDBBoneSlot.name];\r\n                if (!isNaN(tSlotData3)) {\t// 如果alpha有值的话\r\n                    //tGraphics.save();\r\n                    //tGraphics.alpha(tSlotData3);\r\n                }\r\n                if (!isNaN(tSlotData2) && tSlotData2 != -2) {\r\n\r\n                    if (this._templet.attachmentNames) {\r\n                        tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);\r\n                    } else {\r\n                        tDBBoneSlot.showDisplayByIndex(tSlotData2);\r\n                    }\r\n                }\r\n                if (tDeformDic[this._drawOrder[i]]) {\r\n                    let tObject = tDeformDic[this._drawOrder[i]];\r\n                    if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]) {\r\n                        tDBBoneSlot.deformData = tObject[tDBBoneSlot.currDisplayData.attachmentName];\r\n                    } else {\r\n                        tDBBoneSlot.deformData = null;\r\n                    }\r\n                } else {\r\n                    tDBBoneSlot.deformData = null;\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2, tSlotData3);\r\n                } else {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2);\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                    //tGraphics.restore();\r\n                }\r\n            }\r\n        } else {\r\n            for (i = 0, n = this._boneSlotArray.length; i < n; i++) {\r\n                let tDBBoneSlot = this._boneSlotArray[i];\r\n                let tSlotData2 = tSlotDic[tDBBoneSlot.name];\r\n                let tSlotData3 = tSlotAlphaDic[tDBBoneSlot.name];\r\n                if (!isNaN(tSlotData3)) {\r\n                    //tGraphics.save();\r\n                    //tGraphics.alpha(tSlotData3);\r\n                }\r\n                if (!isNaN(tSlotData2) && tSlotData2 != -2) {\r\n                    if (this._templet.attachmentNames) {\r\n                        tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);\r\n                    } else {\r\n                        tDBBoneSlot.showDisplayByIndex(tSlotData2);\r\n                    }\r\n                }\r\n                if (tDeformDic[i]) {\r\n                    let tObject = tDeformDic[i];\r\n                    if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]) {\r\n                        tDBBoneSlot.deformData = tObject[tDBBoneSlot.currDisplayData.attachmentName];\r\n                    } else {\r\n                        tDBBoneSlot.deformData = null;\r\n                    }\r\n                } else {\r\n                    tDBBoneSlot.deformData = null;\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2, tSlotData3);\r\n                } else {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2);\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                    //tGraphics.restore();\r\n                }\r\n            }\r\n        }\r\n        if (this._aniMode == 0) {\r\n            this._templet.setGrahicsDataWithCache(this._aniClipIndex, _clipIndex, tGraphics);\r\n            this._checkIsAllParsed(this._aniClipIndex);\r\n        } else if (this._aniMode == 1) {\r\n            this._setGrahicsDataWithCache(this._aniClipIndex, _clipIndex, tGraphics);\r\n        }\r\n        return tGraphics;\r\n    }\r\n\r\n    private _checkIsAllParsed(_aniClipIndex: number): void {\r\n        let len = Math.floor(0.01 + this._templet.getAniDuration(_aniClipIndex) / 1000 * this._player.cacheFrameRate);\r\n        for (let i = 0; i < len; i++) {\r\n            if (!this._templet.getGrahicsDataWithCache(_aniClipIndex, i)) return;\r\n        }\r\n        if (!this._templet.getGrahicsDataWithCache(_aniClipIndex, len)) {\r\n            this._createGraphics(len);\r\n            return;\r\n        }\r\n        this._templet.deleteAniData(_aniClipIndex);\r\n    }\r\n\r\n    /**\r\n     * 设置deform数据\r\n     * @internal\r\n     * @param\ttDeformAniData\r\n     * @param\ttDeformDic\r\n     * @param\t_boneSlotArray\r\n     * @param\tcurTime\r\n     */\r\n    private _setDeform(tDeformAniData: DeformAniData, tDeformDic: any, _boneSlotArray: any[], curTime: number): void {\r\n        if (!tDeformAniData) return;\r\n        let tDeformSlotData: DeformSlotData;\r\n        let tDeformSlotDisplayData: DeformSlotDisplayData;\r\n        let tDBBoneSlot: BoneSlot;\r\n        if (tDeformAniData) {\r\n            for (let i = 0, n = tDeformAniData.deformSlotDataList.length; i < n; i++) {\r\n                tDeformSlotData = tDeformAniData.deformSlotDataList[i];\r\n                for (let j = 0; j < tDeformSlotData.deformSlotDisplayList.length; j++) {\r\n                    tDeformSlotDisplayData = tDeformSlotData.deformSlotDisplayList[j];\r\n                    tDBBoneSlot = _boneSlotArray[tDeformSlotDisplayData.slotIndex];\r\n                    tDeformSlotDisplayData.apply(curTime, tDBBoneSlot);\r\n                    if (!tDeformDic[tDeformSlotDisplayData.slotIndex]) {\r\n                        tDeformDic[tDeformSlotDisplayData.slotIndex] = {};\r\n                    }\r\n                    tDeformDic[tDeformSlotDisplayData.slotIndex][tDeformSlotDisplayData.attachment] = tDeformSlotDisplayData.deformData;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*******************************************定义接口*************************************************/\r\n    /**\r\n     * 得到当前动画的数量\r\n     * @return 当前动画的数量\r\n     */\r\n    getAnimNum(): number {\r\n        return this._templet.getAnimationCount();\r\n    }\r\n\r\n    /**\r\n     * 得到指定动画的名字\r\n     * @param\tindex\t动画的索引\r\n     */\r\n    getAniNameByIndex(index: number): string {\r\n        return this._templet.getAniNameByIndex(index);\r\n    }\r\n\r\n    /**\r\n     * 通过名字得到插槽的引用\r\n     * @param\tname\t动画的名字\r\n     * @return 插槽的引用\r\n     */\r\n    getSlotByName(name: string): BoneSlot {\r\n        return this._boneSlotDic[name];\r\n    }\r\n\r\n    /**\r\n     * 通过名字显示一套皮肤\r\n     * @param\tname\t皮肤的名字\r\n     * @param\tfreshSlotIndex\t是否将插槽纹理重置到初始化状态\r\n     */\r\n    showSkinByName(name: string, freshSlotIndex: boolean = true): void {\r\n        this.showSkinByIndex(this._templet.getSkinIndexByName(name), freshSlotIndex);\r\n    }\r\n\r\n    /**\r\n     * 通过索引显示一套皮肤\r\n     * @param\tskinIndex\t皮肤索引\r\n     * @param\tfreshSlotIndex\t是否将插槽纹理重置到初始化状态\r\n     */\r\n    showSkinByIndex(skinIndex: number, freshSlotIndex: boolean = true): void {\r\n        for (let i = 0; i < this._boneSlotArray.length; i++) {\r\n            ((<BoneSlot>this._boneSlotArray[i])).showSlotData(null, freshSlotIndex);\r\n        }\r\n        if (this._templet.showSkinByIndex(this._boneSlotDic, skinIndex, freshSlotIndex)) {\r\n            let tSkinData: SkinData = this._templet.skinDataArray[skinIndex];\r\n            this._skinName = tSkinData.name;\r\n        }\r\n        this._clearCache();\r\n    }\r\n\r\n    /**\r\n     * 设置某插槽的皮肤\r\n     * @param\tslotName\t插槽名称\r\n     * @param\tindex\t插糟皮肤的索引\r\n     */\r\n    showSlotSkinByIndex(slotName: string, index: number): void {\r\n        if (this._aniMode == 0) return;\r\n        let tBoneSlot: BoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.showDisplayByIndex(index);\r\n        }\r\n        this._clearCache();\r\n    }\r\n\r\n    /**\r\n     * 设置某插槽的皮肤\r\n     * @param\tslotName\t插槽名称\r\n     * @param\tname\t皮肤名称\r\n     */\r\n    showSlotSkinByName(slotName: string, name: string): void {\r\n        if (this._aniMode == 0) return;\r\n        let tBoneSlot: BoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.showDisplayByName(name);\r\n        }\r\n        this._clearCache();\r\n    }\r\n\r\n    /**\r\n     * 替换插槽贴图名\r\n     * @param\tslotName 插槽名称\r\n     * @param\toldName 要替换的贴图名\r\n     * @param\tnewName 替换后的贴图名\r\n     */\r\n    replaceSlotSkinName(slotName: string, oldName: string, newName: string): void {\r\n        if (this._aniMode == 0) return;\r\n        let tBoneSlot: BoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.replaceDisplayByName(oldName, newName);\r\n        }\r\n        this._clearCache();\r\n    }\r\n\r\n    /**\r\n     * 替换插槽的贴图索引\r\n     * @param\tslotName 插槽名称\r\n     * @param\toldIndex 要替换的索引\r\n     * @param\tnewIndex 替换后的索引\r\n     */\r\n    replaceSlotSkinByIndex(slotName: string, oldIndex: number, newIndex: number): void {\r\n        if (this._aniMode == 0) return;\r\n        let tBoneSlot: BoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.replaceDisplayByIndex(oldIndex, newIndex);\r\n        }\r\n        this._clearCache();\r\n    }\r\n\r\n    /**\r\n     * 设置自定义皮肤\r\n     * @param\tname\t\t插糟的名字\r\n     * @param\ttexture\t\t自定义的纹理\r\n     */\r\n    setSlotSkin(slotName: string, texture: Texture): void {\r\n        if (this._aniMode == 0) return;\r\n        let tBoneSlot: BoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.replaceSkin(texture);\r\n        }\r\n        this._clearCache();\r\n    }\r\n\r\n    /**\r\n     * 换装的时候，需要清一下缓冲区\r\n     * @internal\r\n     */\r\n    private _clearCache(): void {\r\n        if (this._aniMode == 1) {\r\n            for (let i = 0, n = this._graphicsCache.length; i < n; i++) {\r\n                for (let j = 0, len = this._graphicsCache[i].length; j < len; j++) {\r\n                    var gp: GraphicsAni = this._graphicsCache[i][j];\r\n                    if (gp && gp != this.graphics) {\r\n                        GraphicsAni.recycle(gp);\r\n                    }\r\n                }\r\n                this._graphicsCache[i].length = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放动画\r\n     *\r\n     * @param\tnameOrIndex\t动画名字或者索引\r\n     * @param\tloop\t\t是否循环播放\r\n     * @param\tforce\t\tfalse,如果要播的动画跟上一个相同就不生效,true,强制生效\r\n     * @param\tstart\t\t起始时间\r\n     * @param\tend\t\t\t结束时间\r\n     * @param\tfreshSkin\t是否刷新皮肤数据\r\n     * @param\tplayAudio\t是否播放音频\r\n     */\r\n    play(nameOrIndex: any, loop: boolean, force: boolean = true, start: number = 0, end: number = 0, freshSkin: boolean = true, playAudio: boolean = true): void {\r\n        this._playAudio = playAudio;\r\n        this._indexControl = false;\r\n        let index: number = -1;\r\n        var duration: number;\r\n        if (loop) {\r\n            duration = 2147483647;//int.MAX_VALUE;\r\n        } else {\r\n            duration = 0;\r\n        }\r\n        if (typeof (nameOrIndex) == 'string') {\r\n            for (let i = 0, n = this._templet.getAnimationCount(); i < n; i++) {\r\n                let animation: any = this._templet.getAnimation(i);\r\n                if (animation && nameOrIndex == animation.name) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            index = nameOrIndex;\r\n        }\r\n        if (index > -1 && index < this.getAnimNum()) {\r\n            this._aniClipIndex = index;\r\n            if (force || this._pause || this._currAniIndex != index) {\r\n                this._currAniIndex = index;\r\n                this._curOriginalData = new Float32Array(this._templet.getTotalkeyframesLength(index));\r\n                this._drawOrder = null;\r\n                this._eventIndex = 0;\r\n                this._player.play(index, this._player.playbackRate, duration, start, end);\r\n                if (freshSkin)\r\n                    this._templet.showSkinByIndex(this._boneSlotDic, this._skinIndex);\r\n                if (this._pause) {\r\n                    this._pause = false;\r\n                    this._lastTime = ILaya.Browser.now();\r\n                    this.timer.frameLoop(1, this, this._update, null, true);\r\n                }\r\n                this._update();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止动画\r\n     */\r\n    stop(): void {\r\n        if (!this._pause) {\r\n            this._pause = true;\r\n            if (this._player) {\r\n                this._player.stop(true);\r\n            }\r\n            if (this._soundChannelArr.length > 0) { // 有正在播放的声音\r\n                this._onAniSoundStoped(true);\r\n            }\r\n            this.timer.clear(this, this._update);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置动画播放速率\r\n     * @param\tvalue\t1为标准速率\r\n     */\r\n    playbackRate(value: number): void {\r\n        if (this._player) {\r\n            this._player.playbackRate = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 暂停动画的播放\r\n     */\r\n    paused(): void {\r\n        if (!this._pause) {\r\n            this._pause = true;\r\n            if (this._player) {\r\n                this._player.paused = true;\r\n            }\r\n            if (this._soundChannelArr.length > 0) { // 有正在播放的声音\r\n                for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n                    let channel = this._soundChannelArr[i];\r\n                    if (!channel.isStopped) {\r\n                        channel.pause();\r\n                    }\r\n\r\n                }\r\n            }\r\n            this.timer.clear(this, this._update);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 恢复动画的播放\r\n     */\r\n    resume(): void {\r\n        this._indexControl = false;\r\n        if (this._pause) {\r\n            this._pause = false;\r\n            if (this._player) {\r\n                this._player.paused = false;\r\n            }\r\n            if (this._soundChannelArr.length > 0) { // 有正在播放的声音\r\n                for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n                    let channel = this._soundChannelArr[i];\r\n                    if ((channel as any).audioBuffer) {\r\n                        channel.resume();\r\n                    }\r\n                }\r\n            }\r\n            this._lastTime = ILaya.Browser.now();\r\n            this.timer.frameLoop(1, this, this._update, null, true);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 得到缓冲数据\r\n     * @param\taniIndex\r\n     * @param\tframeIndex\r\n     * @return\r\n     */\r\n    private _getGrahicsDataWithCache(aniIndex: number, frameIndex: number): Graphics {\r\n        return this._graphicsCache[aniIndex][frameIndex];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 保存缓冲grahpics\r\n     * @param\taniIndex\r\n     * @param\tframeIndex\r\n     * @param\tgraphics\r\n     */\r\n    private _setGrahicsDataWithCache(aniIndex: number, frameIndex: number, graphics: Graphics): void {\r\n        this._graphicsCache[aniIndex][frameIndex] = graphics;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private reset() {\r\n        this._templet._removeReference();\r\n        this._templet = null;\r\n        this._player.offAll();\r\n        this._player = null;\r\n        this._curOriginalData = null;\r\n        this._boneMatrixArray.length = 0;\r\n        this._ikArr = null;\r\n        this._pathDic = null;\r\n        this._tfArr = null;\r\n        this._lastTime = 0;\r\n        this._currAniIndex = -1;\r\n        this._clipIndex = -1;\r\n        this._indexControl = false;\r\n        this._eventIndex = 0;\r\n        this._drawOrderIndex = 0;\r\n        this._drawOrder = null;\r\n        this._lastAniClipIndex = -1;\r\n        this._lastUpdateAniClipIndex = -1;\r\n        this._pause = true;\r\n        this.timer.clear(this, this._update);\r\n        if (this._soundChannelArr.length > 0)\r\n            this._onAniSoundStoped(true);\r\n    }\r\n\r\n    /**\r\n     * 销毁当前动画\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        super.destroy(destroyChild);\r\n        if (this._templet)\r\n            this.reset();\r\n    }\r\n}\r\n\r\nIAniLib.Skeleton = Skeleton;\r\n","import { Matrix } from \"../../maths/Matrix\";\r\n\r\nexport class Transform {\r\n\r\n\t/**水平方向旋转角度 */\r\n\tskX: number = 0;\t\t// 旋转？\r\n\t/**垂直方向旋转角度 */\r\n\tskY: number = 0;\t\t// 不知道干什么的\r\n\t/**水平方向缩放 */\r\n\tscX: number = 1;\t\t// 缩放\r\n\t/**垂直方向缩放 */\r\n\tscY: number = 1;\r\n\t/**水平方向偏移 */\r\n\tx: number = 0;\t\t// 偏移\r\n\t/**垂直方向偏移 */\r\n\ty: number = 0;\r\n\t/**水平方向倾斜角度 */\r\n\tskewX: number = 0;\t// skew\r\n\t/**垂直方向倾斜角度 */\r\n\tskewY: number = 0;\r\n\tprivate mMatrix: Matrix;\r\n\r\n\t/**\r\n\t * 初始化数据\r\n\t * @param data \r\n\t */\r\n\t//TODO:coverage\r\n\tinitData(data: any): void {\r\n\t\tif (data.x != undefined) {\r\n\t\t\tthis.x = data.x;\r\n\t\t}\r\n\t\tif (data.y != undefined) {\r\n\t\t\tthis.y = data.y;\r\n\t\t}\r\n\t\tif (data.skX != undefined) {\r\n\t\t\tthis.skX = data.skX;\r\n\t\t}\r\n\t\tif (data.skY != undefined) {\r\n\t\t\tthis.skY = data.skY;\r\n\t\t}\r\n\t\tif (data.scX != undefined) {\r\n\t\t\tthis.scX = data.scX;\r\n\t\t}\r\n\t\tif (data.scY != undefined) {\r\n\t\t\tthis.scY = data.scY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获取当前矩阵\r\n\t */\r\n\t//TODO:coverage\r\n\tgetMatrix(): Matrix {\r\n\t\tvar tMatrix: Matrix;\r\n\t\tif (this.mMatrix) {\r\n\t\t\ttMatrix = this.mMatrix;\r\n\t\t} else {\r\n\t\t\ttMatrix = this.mMatrix = new Matrix();\r\n\t\t}\r\n\r\n\t\ttMatrix.identity();\r\n\t\ttMatrix.scale(this.scX, this.scY);\r\n\t\tif (this.skewX || this.skewY) {\r\n\t\t\tthis.skew(tMatrix, this.skewX * Math.PI / 180, this.skewY * Math.PI / 180);\r\n\t\t}\r\n\t\ttMatrix.rotate(this.skX * Math.PI / 180);\r\n\t\ttMatrix.translate(this.x, this.y);\r\n\r\n\t\treturn tMatrix;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取倾斜矩阵\r\n\t * @param m \r\n\t * @param x \r\n\t * @param y \r\n\t */\r\n\t//TODO:coverage\r\n\tskew(m: Matrix, x: number, y: number): Matrix {\r\n\t\tvar sinX: number = Math.sin(y);\r\n\t\tvar cosX: number = Math.cos(y);\r\n\t\tvar sinY: number = Math.sin(x);\r\n\t\tvar cosY: number = Math.cos(x);\r\n\r\n\t\tm.setTo(m.a * cosY - m.b * sinX,\r\n\t\t\tm.a * sinY + m.b * cosX,\r\n\t\t\tm.c * cosY - m.d * sinX,\r\n\t\t\tm.c * sinY + m.d * cosX,\r\n\t\t\tm.tx * cosY - m.ty * sinX,\r\n\t\t\tm.tx * sinY + m.ty * cosX);\r\n\t\treturn m;\r\n\t}\r\n}\r\n\r\n","import { Transform } from \"./Transform\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { ILaya } from \"../../../ILaya\";\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nexport class Bone {\r\n    static ShowBones: any = {};\r\n    name: string;\r\n    root: Bone;\r\n    parentBone: Bone;\r\n    length: number = 10;\r\n    transform: Transform;\r\n    resultTransform: Transform = new Transform();\r\n    resultMatrix: Matrix = new Matrix();\r\n    inheritScale: boolean = true;\r\n    inheritRotation: boolean = true;\r\n\r\n    rotation: number;\r\n    resultRotation: number;\r\n    d: number = -1;\r\n\r\n    /**@internal */\r\n    private _tempMatrix: Matrix;\r\n    /**@internal */\r\n    private _children: Bone[] = [];\r\n    /**@internal */\r\n    private _sprite: Sprite;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    setTempMatrix(matrix: Matrix): void {\r\n        this._tempMatrix = matrix;\r\n        var i: number = 0, n: number = 0;\r\n        var tBone: Bone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.setTempMatrix(this._tempMatrix);\r\n        }\r\n    }\r\n\r\n    //TODO:coverage\r\n    update(pMatrix: Matrix|null = null): void {\r\n        this.rotation = this.transform.skX;\r\n        var tResultMatrix: Matrix;\r\n        if (pMatrix) {\r\n            tResultMatrix = this.resultTransform.getMatrix();\r\n            Matrix.mul(tResultMatrix, pMatrix, this.resultMatrix);\r\n            this.resultRotation = this.rotation;\r\n        }\r\n        else {\r\n            this.resultRotation = this.rotation + this.parentBone.resultRotation;\r\n            if (this.parentBone) {\r\n                if (this.inheritRotation && this.inheritScale) {\r\n                    tResultMatrix = this.resultTransform.getMatrix();\r\n                    Matrix.mul(tResultMatrix, this.parentBone.resultMatrix, this.resultMatrix);\r\n                }\r\n                else {\r\n                    var parent: Bone = this.parentBone;\r\n                    var tAngle: number;\r\n                    var cos: number;\r\n                    var sin: number;\r\n                    var tParentMatrix: Matrix = this.parentBone.resultMatrix;\r\n\r\n                    //var worldX:Number = tParentMatrix.a * transform.x + tParentMatrix.c * transform.y + tParentMatrix.tx;\r\n                    //var worldY:Number = tParentMatrix.b * transform.x + tParentMatrix.d * transform.y + tParentMatrix.ty;\r\n\r\n                    //out.tx = ba * atx + bc * aty + btx;\r\n                    //out.ty = bb * atx + bd * aty + bty;\r\n                    tResultMatrix = this.resultTransform.getMatrix();\r\n                    var worldX: number = tParentMatrix.a * tResultMatrix.tx + tParentMatrix.c * tResultMatrix.ty + tParentMatrix.tx;\r\n                    var worldY: number = tParentMatrix.b * tResultMatrix.tx + tParentMatrix.d * tResultMatrix.ty + tParentMatrix.ty;\r\n\r\n                    var tTestMatrix: Matrix = new Matrix();\r\n                    if (this.inheritRotation) {\r\n                        tAngle = Math.atan2(parent.resultMatrix.b, parent.resultMatrix.a);\r\n                        cos = Math.cos(tAngle), sin = Math.sin(tAngle);\r\n                        tTestMatrix.setTo(cos, sin, -sin, cos, 0, 0);\r\n                        Matrix.mul(this._tempMatrix, tTestMatrix, Matrix.TEMP);\r\n                        Matrix.TEMP.copyTo(tTestMatrix);\r\n                        tResultMatrix = this.resultTransform.getMatrix();\r\n                        Matrix.mul(tResultMatrix, tTestMatrix, this.resultMatrix);\r\n                        if (this.resultTransform.scX * this.resultTransform.scY < 0) {\r\n                            this.resultMatrix.rotate(Math.PI * 0.5);\r\n                        }\r\n                        this.resultMatrix.tx = worldX;\r\n                        this.resultMatrix.ty = worldY;\r\n                    }\r\n                    else if (this.inheritScale) {\r\n                        tResultMatrix = this.resultTransform.getMatrix();\r\n                        Matrix.TEMP.identity();\r\n                        Matrix.TEMP.d = this.d;\r\n                        Matrix.mul(tResultMatrix, Matrix.TEMP, this.resultMatrix);\r\n                        this.resultMatrix.tx = worldX;\r\n                        this.resultMatrix.ty = worldY;\r\n                    }\r\n                    else {\r\n                        tResultMatrix = this.resultTransform.getMatrix();\r\n                        Matrix.TEMP.identity();\r\n                        Matrix.TEMP.d = this.d;\r\n                        Matrix.mul(tResultMatrix, Matrix.TEMP, this.resultMatrix);\r\n                        this.resultMatrix.tx = worldX;\r\n                        this.resultMatrix.ty = worldY;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else {\r\n                tResultMatrix = this.resultTransform.getMatrix();\r\n                tResultMatrix.copyTo(this.resultMatrix);\r\n            }\r\n        }\r\n        var i: number = 0, n: number = 0;\r\n        var tBone: Bone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.update();\r\n        }\r\n    }\r\n\r\n    //TODO:coverage\r\n    updateChild(): void {\r\n        var i: number = 0, n: number = 0;\r\n        var tBone: Bone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.update();\r\n        }\r\n    }\r\n\r\n    //TODO:coverage\r\n    setRotation(rd: number): void {\r\n        if (this._sprite) {\r\n            this._sprite.rotation = rd * 180 / Math.PI;\r\n        }\r\n    }\r\n\r\n    //TODO:coverage\r\n    updateDraw(x: number, y: number): void {\r\n        if (!Bone.ShowBones || Bone.ShowBones[this.name]) {\r\n            if (this._sprite) {\r\n                this._sprite.x = x + this.resultMatrix.tx;\r\n                this._sprite.y = y + this.resultMatrix.ty;\r\n            }\r\n            else {\r\n                this._sprite = new Sprite();\r\n                this._sprite.graphics.drawCircle(0, 0, 5, \"#ff0000\");\r\n                this._sprite.graphics.drawLine(0, 0, this.length, 0, \"#00ff00\");\r\n                this._sprite.graphics.fillText(this.name, 0, 0, \"20px Arial\", \"#00ff00\", \"center\");\r\n                ILaya.stage.addChild(this._sprite);\r\n                this._sprite.x = x + this.resultMatrix.tx;\r\n                this._sprite.y = y + this.resultMatrix.ty;\r\n            }\r\n\r\n        }\r\n        var i: number = 0, n: number = 0;\r\n        var tBone: Bone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.updateDraw(x, y);\r\n        }\r\n    }\r\n\r\n    addChild(bone: Bone): void {\r\n        this._children.push(bone);\r\n        bone.parentBone = this;\r\n    }\r\n\r\n    //TODO:coverage\r\n    findBone(boneName: string): Bone|null {\r\n        if (this.name == boneName) {\r\n            return this;\r\n        }\r\n        else {\r\n            var i: number, n: number;\r\n            var tBone: Bone;\r\n            var tResult: Bone|null;\r\n            for (i = 0, n = this._children.length; i < n; i++) {\r\n                tBone = this._children[i];\r\n                tResult = tBone.findBone(boneName);\r\n                if (tResult) {\r\n                    return tResult;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //TODO:coverage\r\n    localToWorld(local: number[]): void {\r\n        var localX: number = local[0];\r\n        var localY: number = local[1];\r\n        local[0] = localX * this.resultMatrix.a + localY * this.resultMatrix.c + this.resultMatrix.tx;\r\n        local[1] = localX * this.resultMatrix.b + localY * this.resultMatrix.d + this.resultMatrix.ty;\r\n    }\r\n\r\n}\r\n\r\n\r\n","/**\r\n * @internal\r\n */\r\n//TODO:coverage\r\nexport class TfConstraintData {\r\n\r\n\tname: string;\r\n\tboneIndexs: number[] = [];\r\n\ttargetIndex: number;\r\n\trotateMix: number;\r\n\ttranslateMix: number;\r\n\tscaleMix: number;\r\n\tshearMix: number;\r\n\toffsetRotation: number;\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n\toffsetScaleX: number;\r\n\toffsetScaleY: number;\r\n\toffsetShearY: number;\r\n\r\n}\r\n\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport class PathConstraintData {\r\n\r\n\tname: string;\r\n\tbones: number[] = [];\r\n\ttarget: string;\r\n\tpositionMode: string;\r\n\tspacingMode: string;\r\n\trotateMode: string;\r\n\toffsetRotation: number;\r\n\tposition: number;\r\n\tspacing: number;\r\n\trotateMix: number;\r\n\ttranslateMix: number;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n}\r\n\r\n","import { DeformSlotData } from \"./DeformSlotData\";\r\n/**\r\n * @internal\r\n */\r\nexport class DeformAniData {\r\n\r\n\tskinName: string;\r\n\tdeformSlotDataList: DeformSlotData[] = [];\r\n\r\n\t//TODO:coverage\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { DeformSlotDisplayData } from \"./DeformSlotDisplayData\";\r\n/**\r\n * @internal\r\n */\r\nexport class DeformSlotData {\r\n\r\n\tdeformSlotDisplayList: DeformSlotDisplayData[] = [];\r\n\r\n\t//TODO:coverage\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { BoneSlot } from \"./BoneSlot\";\r\n/**\r\n * @internal\r\n */\r\nexport class DeformSlotDisplayData {\r\n\r\n\tboneSlot: BoneSlot;\r\n\tslotIndex: number = -1;\r\n\tattachment: string;\r\n\ttimeList: number[] = [];\r\n\tvectices: any[][] = [];\r\n\ttweenKeyList: boolean[] = [];\r\n\r\n\tdeformData: any[];\r\n\tframeIndex: number = 0;\r\n\r\n\t//TODO:coverage\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\tprivate binarySearch1(values: number[], target: number): number {\r\n\t\tvar low: number = 0;\r\n\t\tvar high: number = values.length - 2;\r\n\t\tif (high == 0)\r\n\t\t\treturn 1;\r\n\t\tvar current: number = high >>> 1;\r\n\t\twhile (true) {\r\n\t\t\tif (values[Math.floor(current + 1)] <= target)\r\n\t\t\t\tlow = current + 1;\r\n\t\t\telse\r\n\t\t\t\thigh = current;\r\n\t\t\tif (low == high)\r\n\t\t\t\treturn low + 1;\r\n\t\t\tcurrent = (low + high) >>> 1;\r\n\t\t}\r\n\t\treturn 0; // Can't happen.\r\n\t}\r\n\r\n\t//TODO:coverage\r\n\tapply(time: number, boneSlot: BoneSlot, alpha: number = 1): void {\r\n\t\ttime += 0.05;\r\n\t\tif (this.timeList.length <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar i = 0;\r\n\t\tvar tTime = this.timeList[0];\r\n\t\tif (time < tTime) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar tVertexCount = this.vectices[0].length;\r\n\t\tvar tVertices: any[] = [];\r\n\t\tvar tFrameIndex = this.binarySearch1(this.timeList, time);\r\n\t\tthis.frameIndex = tFrameIndex;\r\n\t\tif (time >= this.timeList[this.timeList.length - 1]) {\r\n\t\t\tvar lastVertices: any[] = this.vectices[this.vectices.length - 1];\r\n\r\n\t\t\tif (alpha < 1) {\r\n\t\t\t\tfor (i = 0; i < tVertexCount; i++) {\r\n\t\t\t\t\ttVertices[i] += (lastVertices[i] - tVertices[i]) * alpha;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (i = 0; i < tVertexCount; i++) {\r\n\t\t\t\t\ttVertices[i] = lastVertices[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.deformData = tVertices;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//var tTweenKey: boolean = this.tweenKeyList[this.frameIndex];\r\n\t\tvar tPrevVertices = this.vectices[this.frameIndex - 1];\r\n\t\tvar tNextVertices = this.vectices[this.frameIndex];\r\n\t\tvar tPreFrameTime = this.timeList[this.frameIndex - 1];\r\n\t\tvar tFrameTime = this.timeList[this.frameIndex];\r\n\r\n\t\tif (this.tweenKeyList[tFrameIndex - 1]) {\r\n\t\t\talpha = (time - tPreFrameTime) / (tFrameTime - tPreFrameTime);\r\n\t\t} else {\r\n\t\t\talpha = 0;\r\n\t\t}\r\n\r\n\t\tvar tPrev: number;\r\n\t\tfor (i = 0; i < tVertexCount; i++) {\r\n\t\t\ttPrev = tPrevVertices[i];\r\n\t\t\ttVertices[i] = tPrev + (tNextVertices[i] - tPrev) * alpha;\r\n\t\t}\r\n\t\tthis.deformData = tVertices;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport class DrawOrderData {\r\n\ttime: number;\r\n\tdrawOrder: number[] = [];\r\n\r\n\t//TODO:coverage\r\n\tconstructor() {\r\n\t}\r\n}\r\n\r\n","/**\r\n * 事件数据\r\n */\r\nexport class EventData {\r\n\t/**事件名称 */\r\n\tname: string;\r\n\t/**整数数据 */\r\n\tintValue: number;\r\n\t/**单精度浮点数数据 */\r\n\tfloatValue: number;\r\n\t/**字符串数据 */\r\n\tstringValue: string;\r\n\t/**多媒体数据 */\r\n\taudioValue: string;\r\n\t/**事件数据 */\r\n\ttime: number;\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 用于UV转换的工具类\r\n * @internal\r\n */\r\nexport class UVTools {\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\t//[0, 0, 1.0, 0, 1.0, 1.0, 0, 1.0]\r\n\t/**\r\n\t * 将相对于大图图集的小UV转换成相对某个大图的UV\r\n\t * @param\tbigUV 某个大图的UV\r\n\t * @param\tsmallUV 大图图集中的UV\r\n\t * @return 相对于某个大图的UV\r\n\t */\r\n\t//TODO:coverage\r\n\tstatic getRelativeUV(bigUV: ArrayLike<number>, smallUV: any[], rst: any[] = null): any[] {\r\n\t\tvar startX: number = bigUV[0];\r\n\t\tvar width: number = bigUV[2] - bigUV[0];\r\n\t\tvar startY: number = bigUV[1];\r\n\t\tvar height: number = bigUV[5] - bigUV[1];\r\n\t\tif (!rst) rst = [];\r\n\t\trst.length = smallUV.length;\r\n\t\tvar i: number, len: number;\r\n\t\tlen = rst.length;\r\n\t\tvar dWidth: number = 1 / width;\r\n\t\tvar dHeight: number = 1 / height;\r\n\t\tfor (i = 0; i < len; i += 2) {\r\n\t\t\trst[i] = (smallUV[i] - startX) * dWidth;\r\n\t\t\trst[i + 1] = (smallUV[i + 1] - startY) * dHeight;\r\n\t\t}\r\n\t\treturn rst;\r\n\t}\r\n\t/**\r\n\t * 将相对于某个大图的UV转换成相对于大图图集的UV\r\n\t * @param\tbigUV 某个大图的UV\r\n\t * @param\tsmallUV 相对于某个大图的UV\r\n\t * @return 相对于大图图集的UV\r\n\t */\r\n\t//TODO:coverage\r\n\tstatic getAbsoluteUV(bigUV: ArrayLike<number>, smallUV: any[], rst: any[] = null): any[] {\r\n\t\tif (bigUV[0] == 0 && bigUV[1] == 0 && bigUV[4] == 1 && bigUV[5] == 1) {\r\n\t\t\tif (rst) {\r\n\t\t\t\tUtils.copyArray(rst, smallUV);\r\n\t\t\t\treturn rst;\r\n\t\t\t} else {\r\n\t\t\t\treturn smallUV;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar startX: number = bigUV[0];\r\n\t\tvar width: number = bigUV[2] - bigUV[0];\r\n\t\tvar startY: number = bigUV[1];\r\n\t\tvar height: number = bigUV[5] - bigUV[1];\r\n\t\tif (!rst) rst = [];\r\n\t\trst.length = smallUV.length;\r\n\t\tvar i: number, len: number;\r\n\t\tlen = rst.length;\r\n\t\tfor (i = 0; i < len; i += 2) {\r\n\t\t\trst[i] = smallUV[i] * width + startX;\r\n\t\t\trst[i + 1] = smallUV[i + 1] * height + startY;\r\n\t\t}\r\n\t\treturn rst;\r\n\t}\r\n}\r\n\r\n\r\n","import { Texture } from \"../../../resource/Texture\";\r\nimport { Matrix } from \"../../../maths/Matrix\";\r\nimport { Rectangle } from \"../../../maths/Rectangle\";\r\n\r\n\r\n/**\r\n * 网格数据\r\n */\r\nexport class MeshData {\r\n\t/**\r\n\t * 纹理 \r\n\t */\r\n    texture: Texture;\r\n\r\n\t/**\r\n\t * uv数据 \r\n\t */\r\n    uvs: Float32Array = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\r\n\r\n\t/**\r\n\t * 顶点数据 \r\n\t */\r\n    vertices: Float32Array = new Float32Array([0, 0, 100, 0, 100, 100, 0, 100]);\r\n\r\n\t/**\r\n\t * 顶点索引 \r\n\t */\r\n    indexes: Uint16Array = new Uint16Array([0, 1, 3, 3, 1, 2]);\r\n\r\n\t/**\r\n\t * uv变换矩阵 \r\n\t */\r\n    uvTransform: Matrix;\r\n\r\n\t/**\r\n\t * 是否有uv变化矩阵\r\n\t */\r\n    useUvTransform: boolean = false;\r\n\r\n\t/**\r\n\t * 扩展像素,用来去除黑边 \r\n\t */\r\n    canvasPadding: number = 1;\r\n\r\n\t/**\r\n\t * 计算mesh的Bounds \r\n\t * @return \r\n\t * \r\n\t */\r\n    //TODO:coverage\r\n    getBounds(): Rectangle {\r\n        return Rectangle._getWrapRec(this.vertices);\r\n    }\r\n}\r\n\r\n\r\n","import { MeshData } from \"./MeshData\";\r\nimport { Matrix } from \"../../../maths/Matrix\";\r\nimport { Texture } from \"../../../resource/Texture\";\r\n\r\n\r\n/**\r\n * <code>Laya<code>\r\n */\r\nexport class SkinMeshForGraphic extends MeshData {\r\n\r\n    /**\r\n     * 创建SkinGraphic Mesh数据\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 矩阵\r\n     */\r\n    transform: Matrix | null;\r\n\r\n    /**\r\n     * 创建Texture MeshData\r\n     * @param texture 纹理\r\n     * @param ps 索引数据\r\n     * @param verticles 顶点数据\r\n     * @param uvs uv数据\r\n     */\r\n    init2(texture: Texture, ps: any[], verticles: any[], uvs: any[]): void {\r\n        if (this.transform) {\r\n            this.transform = null;\r\n        }\r\n        var _ps: any[] = ps || [0, 1, 3, 3, 1, 2];\r\n        this.texture = texture;\r\n        this.indexes = new Uint16Array(_ps);\r\n        this.vertices = new Float32Array(verticles);\r\n        this.uvs = new Float32Array(uvs);\r\n    }\r\n}\r\n\r\n\r\n","import { Templet } from \"./Templet\";\r\nimport { SlotData } from \"./SlotData\";\r\nimport { SkinSlotDisplayData } from \"./SkinSlotDisplayData\";\r\nimport { UVTools } from \"./UVTools\";\r\nimport { SkinMeshForGraphic } from \"./canvasmesh/SkinMeshForGraphic\"\r\nimport { GraphicsAni } from \"../GraphicsAni\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Graphics } from \"../../display/Graphics\";\r\nimport { Texture } from \"../../resource/Texture\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n\r\nexport class BoneSlot {\r\n\r\n    /** 插槽名称 */\r\n    name: string;\r\n    /** 插槽绑定的骨骼名称 */\r\n    parent: string;\r\n    /** 插糟显示数据数据的名称 */\r\n    attachmentName: string;\r\n    /** 原始数据的索引 */\r\n    srcDisplayIndex: number = -1;\r\n    /** 判断对象是否是原对象 */\r\n    type: string = \"src\";\r\n    /** 模板的指针 */\r\n    templet: Templet;\r\n    /** 当前插槽对应的数据 */\r\n    currSlotData: SlotData;\r\n    /** 当前插槽显示的纹理 */\r\n    currTexture: Texture | null;\r\n    /** 显示对象对应的数据 */\r\n    currDisplayData: SkinSlotDisplayData | null;\r\n\r\n    /** 显示皮肤的索引 */\r\n    displayIndex: number = -1;\r\n    /** @private */\r\n    originalIndex: number = -1;\r\n\r\n    /** 用户自定义的皮肤 */\r\n    /**@internal */\r\n    private _diyTexture: Texture | null;\r\n    /**@internal */\r\n    private _parentMatrix: Matrix;\t// 指向了骨骼的resultMatrix\r\n    /**@internal */\r\n    private _resultMatrix: Matrix;\t// 只有不使用缓冲时才使用\r\n    /** @internal 索引替换表 */\r\n    private _replaceDic: any = {};\r\n    /** @internal 当前diyTexture的动画纹理 */\r\n    private _curDiyUV: any[];\r\n\r\n    /** @internal 实时模式下，复用使用 */\r\n    private _skinSprite: any;\r\n    /** @private 变形动画数据 */\r\n    deformData: any[];\r\n\r\n    /**\r\n     * 设置要显示的插槽数据\r\n     * @param\tslotData\r\n     * @param\tdisIndex\r\n     * @param\tfreshIndex 是否重置纹理\r\n     */\r\n    showSlotData(slotData: SlotData, freshIndex: boolean = true): void {\r\n        this.currSlotData = slotData;\r\n        if (freshIndex)\r\n            this.displayIndex = this.srcDisplayIndex;\r\n        this.currDisplayData = null;\r\n        this.currTexture = null;\r\n    }\r\n\r\n    /**\r\n     * 通过名字显示指定对象\r\n     * @param\tname\r\n     */\r\n    showDisplayByName(name: string): void {\r\n        if (this.currSlotData) {\r\n            this.showDisplayByIndex(this.currSlotData.getDisplayByName(name));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 替换贴图名\r\n     * @param\ttarName 要替换的贴图名\r\n     * @param\tnewName 替换后的贴图名\r\n     */\r\n    replaceDisplayByName(tarName: string, newName: string): void {\r\n        if (!this.currSlotData) return;\r\n        var preIndex: number;\r\n        preIndex = this.currSlotData.getDisplayByName(tarName);\r\n        var newIndex: number;\r\n        newIndex = this.currSlotData.getDisplayByName(newName);\r\n        this.replaceDisplayByIndex(preIndex, newIndex);\r\n    }\r\n\r\n    /**\r\n     * 替换贴图索引\r\n     * @param\ttarIndex 要替换的索引\r\n     * @param\tnewIndex 替换后的索引\r\n     */\r\n    replaceDisplayByIndex(tarIndex: number, newIndex: number): void {\r\n        if (!this.currSlotData) return;\r\n        this._replaceDic[tarIndex] = newIndex;\r\n        if (this.originalIndex == tarIndex) {\r\n            this.showDisplayByIndex(tarIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 指定显示对象\r\n     * @param\tindex\r\n     */\r\n    showDisplayByIndex(index: number): void {\r\n        this.originalIndex = index;\r\n        if (this._replaceDic[index] != null) index = this._replaceDic[index];\r\n        if (this.currSlotData && index > -1 && index < this.currSlotData.displayArr.length) {\r\n            this.displayIndex = index;\r\n            this.currDisplayData = this.currSlotData.displayArr[index];\r\n            if (this.currDisplayData) {\r\n                var tName: string = this.currDisplayData.name;\r\n                this.currTexture = this.templet.getTexture(tName);\r\n                if (this.currTexture && this.currDisplayData.type == 0 && this.currDisplayData.uvs) {\r\n                    this.currTexture = this.currDisplayData.createTexture(this.currTexture);\r\n                }\r\n            }\r\n        } else {\r\n            this.displayIndex = -1;\r\n            this.currDisplayData = null;\r\n            this.currTexture = null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 替换皮肤\r\n     * @param\t_texture\r\n     */\r\n    replaceSkin(_texture: Texture): void {\r\n        this._diyTexture = _texture;\r\n        if (this._curDiyUV) this._curDiyUV.length = 0;\r\n        if (this.currDisplayData && this._diyTexture == this.currDisplayData.texture) {\r\n            this._diyTexture = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 保存父矩阵的索引\r\n     * @param\tparentMatrix\r\n     */\r\n    //TODO:coverage\r\n    setParentMatrix(parentMatrix: Matrix): void {\r\n        this._parentMatrix = parentMatrix;\r\n    }\r\n\r\n    private _mVerticleArr: any[];\r\n    private static _tempMatrix: Matrix = new Matrix();\r\n\r\n    //TODO:coverage\r\n    static createSkinMesh(): any {\r\n        return new SkinMeshForGraphic();\r\n    }\r\n\r\n    //TODO:coverage\r\n    private static isSameArr(arrA: any[], arrB: any[]): boolean {\r\n        if (arrA.length != arrB.length) return false;\r\n        var i: number, len: number;\r\n        len = arrA.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (arrA[i] != arrB[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**@internal */\r\n    private static _tempResultMatrix: Matrix = new Matrix();\r\n    /**@internal */\r\n    private _preGraphicVerticle: any[];\r\n\r\n    //TODO:coverage\r\n    private getSaveVerticle(tArr: any[]): any[] {\r\n        if (BoneSlot.useSameMatrixAndVerticle && this._preGraphicVerticle && BoneSlot.isSameArr(tArr, this._preGraphicVerticle)) {\r\n            tArr = this._preGraphicVerticle;\r\n        } else {\r\n            tArr = Utils.copyArray([], tArr);\r\n            this._preGraphicVerticle = tArr;\r\n        }\r\n        return tArr;\r\n    }\r\n\r\n    //TODO:coverage\r\n    static isSameMatrix(mtA: Matrix, mtB: Matrix): boolean {\r\n        return mtA.a == mtB.a && mtA.b == mtB.b && mtA.c == mtB.c && mtA.d == mtB.d && Math.abs(mtA.tx - mtB.tx) < 0.00001 && Math.abs(mtA.ty - mtB.ty) < 0.00001;\r\n    }\r\n\r\n    private _preGraphicMatrix: Matrix;\r\n\r\n    private static useSameMatrixAndVerticle: boolean = true;\r\n\r\n    //TODO:coverage\r\n    private getSaveMatrix(tResultMatrix: Matrix): Matrix {\r\n        if (BoneSlot.useSameMatrixAndVerticle && this._preGraphicMatrix && BoneSlot.isSameMatrix(tResultMatrix, this._preGraphicMatrix)) {\r\n            tResultMatrix = this._preGraphicMatrix;\r\n        } else {\r\n            var newMatrix: Matrix = tResultMatrix.clone();\r\n            tResultMatrix = newMatrix;\r\n            this._preGraphicMatrix = tResultMatrix;\r\n        }\r\n        return tResultMatrix;\r\n    }\r\n    /**\r\n     * 把纹理画到Graphics上\r\n     * @param\tgraphics\r\n     * @param\tnoUseSave   不使用共享的矩阵对象 _tempResultMatrix，只有实时计算的时候才设置为true\r\n     */\r\n    draw(graphics: GraphicsAni, boneMatrixArray: any[], noUseSave: boolean = false, alpha: number = 1): void {\r\n        if ((this._diyTexture == null && this.currTexture == null) || this.currDisplayData == null) {\r\n            if (!(this.currDisplayData && this.currDisplayData.type == 3)) {\r\n                return;\r\n            }\r\n        }\r\n        var tTexture = this.currTexture;\r\n        if (this._diyTexture) tTexture = this._diyTexture;\r\n        var tSkinSprite: any;\r\n        switch (this.currDisplayData.type) {\r\n            case 0:\r\n                if (graphics) {\r\n                    var tCurrentMatrix = this.getDisplayMatrix();\r\n                    if (this._parentMatrix) {\r\n                        var tRotateKey: boolean = false;\t\t// 是否有旋转\r\n                        if (tCurrentMatrix) {\r\n                            Matrix.mul(tCurrentMatrix, this._parentMatrix, Matrix.TEMP);\r\n                            var tResultMatrix: Matrix;\r\n                            if (noUseSave) {\r\n                                if (this._resultMatrix == null) this._resultMatrix = new Matrix();\r\n                                tResultMatrix = this._resultMatrix;\r\n                            } else {\r\n                                //tResultMatrix = new Matrix();\r\n                                tResultMatrix = BoneSlot._tempResultMatrix;\r\n                            }\r\n                            if (this._diyTexture && this.currDisplayData.uvs) {\r\n                                var tTestMatrix: Matrix = BoneSlot._tempMatrix;\r\n                                tTestMatrix.identity();\r\n                                //判断是否上下反转。\r\n                                if (this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]) {\r\n                                    tTestMatrix.d = -1;\r\n                                }\r\n                                //判断是否旋转\r\n                                if (this.currDisplayData.uvs[0] > this.currDisplayData.uvs[4]\r\n                                    && this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]) {\r\n                                    tRotateKey = true;\r\n                                    tTestMatrix.rotate(-Math.PI / 2);\r\n                                }\r\n                                Matrix.mul(tTestMatrix, Matrix.TEMP, tResultMatrix);\r\n                            } else {\r\n                                Matrix.TEMP.copyTo(tResultMatrix);\r\n                            }\r\n\r\n                            if (!noUseSave) {\r\n                                tResultMatrix = this.getSaveMatrix(tResultMatrix);\r\n                            }\r\n                            tResultMatrix._checkTransform();\r\n                            if (tRotateKey) {\r\n                                graphics.drawTexture(tTexture, -this.currDisplayData.height / 2, -this.currDisplayData.width / 2, this.currDisplayData.height, this.currDisplayData.width, tResultMatrix, alpha);\r\n                            } else {\r\n                                graphics.drawTexture(tTexture, -this.currDisplayData.width / 2, -this.currDisplayData.height / 2, this.currDisplayData.width, this.currDisplayData.height, tResultMatrix, alpha);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 1:\r\n                if (noUseSave) {\r\n                    if (this._skinSprite == null) {\r\n                        this._skinSprite = BoneSlot.createSkinMesh();\r\n                    }\r\n                    tSkinSprite = this._skinSprite;\r\n                } else {\r\n                    tSkinSprite = BoneSlot.createSkinMesh();\r\n                }\r\n                if (tSkinSprite == null) {\r\n                    return;\r\n                }\r\n                var tIBArray: any[];\r\n                if (this.currDisplayData.bones == null) {\r\n                    var tVertices: any[] = this.currDisplayData.weights;\r\n                    if (this.deformData) {\r\n                        tVertices = this.deformData;\r\n                    }\r\n                    var tUVs: any[];\r\n                    if (this._diyTexture) {\r\n                        if (!this._curDiyUV) {\r\n                            this._curDiyUV = [];\r\n                        }\r\n                        if (this._curDiyUV.length == 0) {\r\n                            this._curDiyUV = UVTools.getRelativeUV(this.currTexture.uv, this.currDisplayData.uvs, this._curDiyUV);\r\n                            this._curDiyUV = UVTools.getAbsoluteUV(this._diyTexture.uv, this._curDiyUV, this._curDiyUV);\r\n                        }\r\n                        tUVs = this._curDiyUV;\r\n                    } else {\r\n                        tUVs = this.currDisplayData.uvs;\r\n                    }\r\n\r\n                    this._mVerticleArr = tVertices;\r\n                    var tTriangleNum: number = this.currDisplayData.triangles.length / 3;\r\n\r\n                    tIBArray = this.currDisplayData.triangles;\r\n\r\n\r\n                    if (this.deformData) {\r\n                        if (!noUseSave) {\r\n                            this._mVerticleArr = this.getSaveVerticle(this._mVerticleArr);\r\n                        }\r\n                    }\r\n                    tSkinSprite.init2(tTexture, tIBArray, this._mVerticleArr, tUVs);\r\n\r\n                    var tCurrentMatrix2 = this.getDisplayMatrix();\r\n                    if (this._parentMatrix) {\r\n                        if (tCurrentMatrix2) {\r\n                            Matrix.mul(tCurrentMatrix2, this._parentMatrix, Matrix.TEMP);\r\n                            var tResultMatrix2: Matrix;\r\n                            if (noUseSave) {\r\n                                if (this._resultMatrix == null) this._resultMatrix = new Matrix();\r\n                                tResultMatrix2 = this._resultMatrix;\r\n                            } else {\r\n                                tResultMatrix2 = BoneSlot._tempResultMatrix;\r\n                            }\r\n                            Matrix.TEMP.copyTo(tResultMatrix2);\r\n\r\n                            if (!noUseSave) {\r\n                                tResultMatrix2 = this.getSaveMatrix(tResultMatrix2);\r\n                            }\r\n                            tSkinSprite.transform = tResultMatrix2;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.skinMesh(boneMatrixArray, tSkinSprite);\r\n                }\r\n\r\n                graphics.drawSkin(tSkinSprite, alpha);\r\n                break;\r\n            case 2:\r\n                if (noUseSave) {\r\n                    if (this._skinSprite == null) {\r\n                        this._skinSprite = BoneSlot.createSkinMesh();\r\n                    }\r\n                    tSkinSprite = this._skinSprite;\r\n                } else {\r\n                    tSkinSprite = BoneSlot.createSkinMesh();\r\n                }\r\n                if (tSkinSprite == null) {\r\n                    return;\r\n                }\r\n                this.skinMesh(boneMatrixArray, tSkinSprite);\r\n                graphics.drawSkin(tSkinSprite, alpha);\r\n                break;\r\n            case 3:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    private static _tempVerticleArr: any[] = [];\r\n    /**\r\n     * 显示蒙皮动画\r\n     * @param\tboneMatrixArray 当前帧的骨骼矩阵\r\n     */\r\n    private skinMesh(boneMatrixArray: any[], skinSprite: any): void {\r\n        var tTexture: Texture = this.currTexture;\r\n        var tBones: any[] = this.currDisplayData.bones;\r\n        var tUvs: any[];\r\n        if (this._diyTexture) {\r\n            tTexture = this._diyTexture;\r\n            if (!this._curDiyUV) {\r\n                this._curDiyUV = [];\r\n            }\r\n            if (this._curDiyUV.length == 0) {\r\n                this._curDiyUV = UVTools.getRelativeUV(this.currTexture.uv, this.currDisplayData.uvs, this._curDiyUV);\r\n                this._curDiyUV = UVTools.getAbsoluteUV(this._diyTexture.uv, this._curDiyUV, this._curDiyUV);\r\n            }\r\n            tUvs = this._curDiyUV;\r\n        } else {\r\n            tUvs = this.currDisplayData.uvs;\r\n        }\r\n\r\n        var tWeights: any[] = this.currDisplayData.weights;\r\n        var tTriangles: any[] = this.currDisplayData.triangles;\r\n        var tIBArray: any[];\r\n        var tRx: number = 0;\r\n        var tRy: number = 0;\r\n        var nn: number = 0;\r\n        var tMatrix: Matrix;\r\n        var tX: number;\r\n        var tY: number;\r\n        var tB: number = 0;\r\n        var tWeight: number = 0;\r\n        var tVertices: any[];\r\n        var i: number = 0, j: number = 0, n: number = 0;\r\n        var tRed: number = 1;\r\n        var tGreed: number = 1;\r\n        var tBlue: number = 1;\r\n        BoneSlot._tempVerticleArr.length = 0;\r\n        tVertices = BoneSlot._tempVerticleArr;\r\n        if (this.deformData && this.deformData.length > 0) {\r\n            var f: number = 0;\r\n            for (i = 0, n = tBones.length; i < n;) {\r\n                nn = tBones[i++] + i;\r\n                tRx = 0, tRy = 0;\r\n                for (; i < nn; i++) {\r\n                    tMatrix = boneMatrixArray[tBones[i]]\r\n                    tX = tWeights[tB] + this.deformData[f++];\r\n                    tY = tWeights[tB + 1] + this.deformData[f++];\r\n                    tWeight = tWeights[tB + 2];\r\n                    tRx += (tX * tMatrix.a + tY * tMatrix.c + tMatrix.tx) * tWeight;\r\n                    tRy += (tX * tMatrix.b + tY * tMatrix.d + tMatrix.ty) * tWeight;\r\n                    tB += 3;\r\n                }\r\n                tVertices.push(tRx, tRy);\r\n            }\r\n        } else {\r\n            for (i = 0, n = tBones.length; i < n;) {\r\n                nn = tBones[i++] + i;\r\n                tRx = 0, tRy = 0;\r\n                for (; i < nn; i++) {\r\n                    tMatrix = boneMatrixArray[tBones[i]]\r\n                    tX = tWeights[tB];\r\n                    tY = tWeights[tB + 1];\r\n                    tWeight = tWeights[tB + 2];\r\n                    tRx += (tX * tMatrix.a + tY * tMatrix.c + tMatrix.tx) * tWeight;\r\n                    tRy += (tX * tMatrix.b + tY * tMatrix.d + tMatrix.ty) * tWeight;\r\n                    tB += 3;\r\n                }\r\n                tVertices.push(tRx, tRy);\r\n            }\r\n        }\r\n        this._mVerticleArr = tVertices;\r\n        tIBArray = tTriangles;\r\n        this._mVerticleArr = this.getSaveVerticle(this._mVerticleArr);\r\n        skinSprite.init2(tTexture, tIBArray, this._mVerticleArr, tUvs);\r\n    }\r\n\r\n    /**\r\n     * 画骨骼的起始点，方便调试\r\n     * @param\tgraphics\r\n     */\r\n    drawBonePoint(graphics: Graphics): void {\r\n        if (graphics && this._parentMatrix) {\r\n            graphics.drawCircle(this._parentMatrix.tx, this._parentMatrix.ty, 5, \"#ff0000\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 得到显示对象的矩阵\r\n     * @return\r\n     */\r\n    //TODO:coverage\r\n    private getDisplayMatrix(): Matrix | null {\r\n        if (this.currDisplayData) {\r\n            return this.currDisplayData.transform.getMatrix();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 得到插糟的矩阵\r\n     * @return\r\n     */\r\n    getMatrix(): Matrix {\r\n        return this._resultMatrix;\r\n    }\r\n\r\n    /**\r\n     * 用原始数据拷贝出一个\r\n     * @return\r\n     */\r\n    copy(): BoneSlot {\r\n        var tBoneSlot: BoneSlot = new BoneSlot();\r\n        tBoneSlot.type = \"copy\";\r\n        tBoneSlot.name = this.name;\r\n        tBoneSlot.attachmentName = this.attachmentName;\r\n        tBoneSlot.srcDisplayIndex = this.srcDisplayIndex;\r\n        tBoneSlot.parent = this.parent;\r\n        tBoneSlot.displayIndex = this.displayIndex;\r\n        tBoneSlot.templet = this.templet;\r\n        tBoneSlot.currSlotData = this.currSlotData;\r\n        tBoneSlot.currTexture = this.currTexture;\r\n        tBoneSlot.currDisplayData = this.currDisplayData;\r\n        return tBoneSlot;\r\n    }\r\n}\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport class SkinData {\r\n\r\n\tname: string;\r\n\tslotArr: any[] = [];\r\n}\r\n\r\n","import { Transform } from \"./Transform\";\r\nimport { Texture } from \"../../resource/Texture\";\r\n\r\n/**\r\n * 插槽显示数据\r\n */\r\nexport class SkinSlotDisplayData {\r\n\r\n\t/**名称 */\r\n\tname: string;\r\n\t/**附件名称 */\r\n\tattachmentName: string;\r\n\t/**类型 */\r\n\ttype: number;\t\t\t\t//0 硬  1 skin 2 另一种skin? 3 不支持\r\n\t/**变换 */\r\n\ttransform: Transform;\r\n\t/**宽度 */\r\n\twidth: number;\r\n\t/**高度 */\r\n\theight: number;\r\n\t/**纹理 */\r\n\ttexture: Texture;\r\n\r\n\t/**骨骼数据 */\r\n\tbones: any[];\r\n\t/**uv数据 */\r\n\tuvs: any[];\r\n\t/**权重 */\r\n\tweights: any[];\r\n\t/**三角面数据 */\r\n\ttriangles: any[];\r\n\t/**顶点数据 */\r\n\tvertices: any[];\r\n\t/**长度数据 */\r\n\tlengths: any[];\r\n\t/**版本号 */\r\n\tverLen: number;\r\n\r\n\tcreateTexture(currTexture: Texture): Texture {\r\n\t\tif (this.texture) return this.texture;\r\n\t\tthis.texture = new Texture(currTexture.bitmap, this.uvs);\r\n\r\n\t\t//判断是否旋转\r\n\t\tif (this.uvs[0] > this.uvs[4]\r\n\t\t\t&& this.uvs[1] > this.uvs[5]) {\r\n\t\t\t//旋转\r\n\t\t\tthis.texture.width = currTexture.height;\r\n\t\t\tthis.texture.height = currTexture.width;\r\n\t\t\tthis.texture.offsetX = -currTexture.offsetX;\r\n\t\t\tthis.texture.offsetY = -currTexture.offsetY;\r\n\t\t\tthis.texture.sourceWidth = currTexture.sourceHeight;\r\n\t\t\tthis.texture.sourceHeight = currTexture.sourceWidth;\r\n\t\t} else {\r\n\t\t\tthis.texture.width = currTexture.width;\r\n\t\t\tthis.texture.height = currTexture.height;\r\n\t\t\tthis.texture.offsetX = -currTexture.offsetX;\r\n\t\t\tthis.texture.offsetY = -currTexture.offsetY;\r\n\t\t\tthis.texture.sourceWidth = currTexture.sourceWidth;\r\n\t\t\tthis.texture.sourceHeight = currTexture.sourceHeight;\r\n\t\t}\r\n\t\treturn this.texture;\r\n\t}\r\n\r\n\tdestory(): void {\r\n\t\tif (this.texture) this.texture.destroy();\r\n\t}\r\n}\r\n\r\n","import { SkinSlotDisplayData } from \"./SkinSlotDisplayData\";\r\nexport class SlotData {\r\n\tname: string;\r\n\tdisplayArr: any[] = [];\r\n\r\n\t/**\r\n\t * 通过附件名称获取位置\r\n\t * @param name \r\n\t */\r\n\tgetDisplayByName(name: string): number {\r\n\t\tvar tDisplay: SkinSlotDisplayData;\r\n\t\tfor (var i: number = 0, n: number = this.displayArr.length; i < n; i++) {\r\n\t\t\ttDisplay = this.displayArr[i];\r\n\t\t\tif (tDisplay.attachmentName == name) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\n\r\n","/**\r\n * @internal\r\n */\r\nexport class IkConstraintData {\r\n\r\n\tname: string;\r\n\ttargetBoneName: string;\r\n\tboneNames: string[] = [];\r\n\tbendDirection: number = 1;\r\n\tmix: number = 1;\r\n\tisSpine: boolean = true;\r\n\ttargetBoneIndex: number = -1;\r\n\tboneIndexs: number[] = [];\r\n\r\n\t//TODO:coverage\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Bone } from \"./Bone\";\r\nimport { TfConstraintData } from \"./TfConstraintData\";\r\nimport { PathConstraintData } from \"./PathConstraintData\";\r\nimport { DeformAniData } from \"./DeformAniData\";\r\nimport { DeformSlotData } from \"./DeformSlotData\";\r\nimport { DeformSlotDisplayData } from \"./DeformSlotDisplayData\";\r\nimport { DrawOrderData } from \"./DrawOrderData\";\r\nimport { EventData } from \"./EventData\";\r\nimport { AnimationContent } from \"../AnimationContent\"\r\nimport { AnimationTemplet } from \"../AnimationTemplet\"\r\nimport { BoneSlot } from \"./BoneSlot\"\r\nimport { SkinData } from \"./SkinData\"\r\nimport { SkinSlotDisplayData } from \"./SkinSlotDisplayData\"\r\nimport { SlotData } from \"./SlotData\"\r\nimport { Transform } from \"./Transform\"\r\nimport { IkConstraintData } from \"./IkConstraintData\"\r\nimport { Texture } from \"../../resource/Texture\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { Graphics } from \"../../display/Graphics\";\r\nimport { IAniLib } from \"../AniLibPack\";\r\nimport { Skeleton } from \"./Skeleton\";\r\nimport { AnimationParser01 } from \"../AnimationParser01\";\r\n\r\nconst LAYA_ANIMATION_160_VISION: string = \"LAYAANIMATION:1.6.0\";\r\nconst LAYA_ANIMATION_VISION: string = \"LAYAANIMATION:1.7.0\";\r\n\r\n/**\r\n * 动画模板类\r\n */\r\nexport class Templet extends AnimationTemplet {\r\n    public rate: number = 30;\r\n\r\n    /**@internal */\r\n    private _mainTexture: Texture;\r\n    /**@internal */\r\n    private _graphicsCache: any[] = [];\r\n\r\n    /** 存放原始骨骼信息 */\r\n    srcBoneMatrixArr: any[] = [];\r\n    /** IK数据 */\r\n    ikArr: any[] = [];\r\n    /** transform数据 */\r\n    tfArr: any[] = [];\r\n    /** path数据 */\r\n    pathArr: any[] = [];\r\n    /** 存放插槽数据的字典 */\r\n    boneSlotDic: any = {};\r\n    /** 绑定插槽数据的字典 */\r\n    bindBoneBoneSlotDic: any = {};\r\n    /** 存放插糟数据的数组 */\r\n    boneSlotArray: any[] = [];\r\n    /** 皮肤数据 */\r\n    skinDataArray: any[] = [];\r\n    /** 皮肤的字典数据 */\r\n    skinDic: any = {};\r\n    /** 存放纹理数据 */\r\n    subTextureDic: Record<string, Texture> = {};\r\n    /** 是否解析失败 */\r\n    isParseFail: boolean = false;\r\n    /** 反转矩阵，有些骨骼动画要反转才能显示 */\r\n    yReverseMatrix: Matrix;\r\n    /** 渲染顺序动画数据 */\r\n    drawOrderAniArr: any[] = [];\r\n    /** 事件动画数据 */\r\n    eventAniArr: any[] = [];\r\n    /** @private 索引对应的名称 */\r\n    attachmentNames: any[] = null;\r\n    /** 顶点动画数据 */\r\n    deformAniArr: any[] = [];\r\n    /** 实际显示对象列表，用于销毁用 */\r\n    skinSlotDisplayDataArr: SkinSlotDisplayData[] = [];\r\n\r\n    /** @internal 是否需要解析audio数据 */\r\n    private _isParseAudio: boolean = false;\r\n    aniSectionDic: any = {};\r\n    /**@internal */\r\n    private _path: string;\r\n    /**@private */\r\n    tMatrixDataLen: number;\r\n\r\n    mRootBone: Bone;\r\n    mBoneArr: Bone[] = [];\r\n\r\n    /**\r\n     * 创建动画\r\n     * 0,使用模板缓冲的数据，模板缓冲的数据，不允许修改\t\t\t\t\t（内存开销小，计算开销小，不支持换装）\r\n     * 1,使用动画自己的缓冲区，每个动画都会有自己的缓冲区，相当耗费内存\t（内存开销大，计算开销小，支持换装）\r\n     * 2,使用动态方式，去实时去画\t\t\t\t\t\t\t\t\t\t（内存开销小，计算开销大，支持换装,不建议使用）\r\n     * @param\taniMode 0\t动画模式，0:不支持换装,1,2支持换装\r\n     * @return\r\n     */\r\n    buildArmature(aniMode: number = 0): Skeleton {\r\n        let sk = new Skeleton(aniMode);\r\n        sk.templet = this;\r\n        return sk;\r\n    }\r\n\r\n    _parse(texture: Texture, createURL: string, skeletonData: ArrayBuffer) {\r\n        this._path = createURL.slice(0, createURL.lastIndexOf(\"/\")) + \"/\";\r\n        texture._addReference();\r\n        this._mainTexture = texture;\r\n\r\n        var reader: Byte = new Byte(skeletonData);\r\n        this._aniVersion = reader.readUTFString();\r\n        AnimationParser01.parse(this, reader);\r\n\r\n        if (this._aniVersion === LAYA_ANIMATION_VISION) {\r\n            this._isParseAudio = true;\r\n        } else if (this._aniVersion != LAYA_ANIMATION_160_VISION) {\r\n            console.log(\"[Error] 版本不一致，请使用IDE版本配套的重新导出\" + this._aniVersion + \"->\" + LAYA_ANIMATION_VISION);\r\n        }\r\n\r\n        for (let i = 0, n = this.getAnimationCount(); i < n; i++) {\r\n            this._graphicsCache.push([]);\r\n        }\r\n\r\n        var tByte: Byte = new Byte(this.getPublicExtData());\r\n        var tX: number = 0, tY: number = 0, tWidth: number = 0, tHeight: number = 0;\r\n        var tFrameX: number = 0, tFrameY: number = 0, tFrameWidth: number = 0, tFrameHeight: number = 0;\r\n        var tTempleData: number = 0;\r\n        var tTextureLen: number = tByte.getInt32();\r\n        var tTextureName: string = tByte.readUTFString();\r\n        var tTextureNameArr: any[] = tTextureName.split(\"\\n\");\r\n        var tSrcTexturePath: string;\r\n        for (let i = 0; i < tTextureLen; i++) {\r\n            tSrcTexturePath = this._path + tTextureNameArr[i * 2];\r\n            tTextureName = tTextureNameArr[i * 2 + 1];\r\n            tX = tByte.getFloat32();\r\n            tY = tByte.getFloat32();\r\n            tWidth = tByte.getFloat32();\r\n            tHeight = tByte.getFloat32();\r\n\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameX = isNaN(tTempleData) ? 0 : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameY = isNaN(tTempleData) ? 0 : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameWidth = isNaN(tTempleData) ? tWidth : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameHeight = isNaN(tTempleData) ? tHeight : tTempleData;\r\n\r\n            this.subTextureDic[tTextureName] = Texture.create(this._mainTexture, tX, tY, tWidth, tHeight, -tFrameX, -tFrameY, tFrameWidth, tFrameHeight);\r\n        }\r\n\r\n        var isSpine: boolean;\r\n        isSpine = this._aniClassName != \"Dragon\";\r\n\r\n        var tAniCount: number = tByte.getUint16();\r\n        var tSectionArr: any[];\r\n        for (let i = 0; i < tAniCount; i++) {\r\n            tSectionArr = [];\r\n            tSectionArr.push(tByte.getUint16());\r\n            tSectionArr.push(tByte.getUint16());\r\n            tSectionArr.push(tByte.getUint16());\r\n            tSectionArr.push(tByte.getUint16());\r\n            this.aniSectionDic[i] = tSectionArr;\r\n        }\r\n\r\n        var tBone: Bone;\r\n        var tParentBone: Bone;\r\n        var tName: string;\r\n        var tParentName: string;\r\n        var tBoneLen: number = tByte.getInt16();\r\n        var tBoneDic: any = {};\r\n        var tRootBone: Bone;\r\n        for (let i = 0; i < tBoneLen; i++) {\r\n            tBone = new Bone();\r\n            if (i == 0) {\r\n                tRootBone = tBone;\r\n            } else {\r\n                tBone.root = tRootBone;\r\n            }\r\n            tBone.d = isSpine ? -1 : 1;\r\n            tName = tByte.readUTFString();\r\n            tParentName = tByte.readUTFString();\r\n            tBone.length = tByte.getFloat32();\r\n            if (tByte.getByte() == 1) {\r\n                tBone.inheritRotation = false;\r\n            }\r\n            if (tByte.getByte() == 1) {\r\n                tBone.inheritScale = false;\r\n            }\r\n            tBone.name = tName;\r\n            if (tParentName) {\r\n                tParentBone = tBoneDic[tParentName];\r\n                if (tParentBone) {\r\n                    tParentBone.addChild(tBone);\r\n                } else {\r\n                    this.mRootBone = tBone;\r\n                }\r\n            }\r\n            tBoneDic[tName] = tBone;\r\n            this.mBoneArr.push(tBone);\r\n        }\r\n\r\n        this.tMatrixDataLen = tByte.getUint16();\r\n        var tLen: number = tByte.getUint16();\r\n        var boneLength: number = Math.floor(tLen / this.tMatrixDataLen);\r\n        var tResultTransform: Transform;\r\n        var tMatrixArray: any[] = this.srcBoneMatrixArr;\r\n        for (let i = 0; i < boneLength; i++) {\r\n            tResultTransform = new Transform();\r\n            tResultTransform.scX = tByte.getFloat32();\r\n            tResultTransform.skX = tByte.getFloat32();\r\n            tResultTransform.skY = tByte.getFloat32();\r\n            tResultTransform.scY = tByte.getFloat32();\r\n            tResultTransform.x = tByte.getFloat32();\r\n            tResultTransform.y = tByte.getFloat32();\r\n            if (this.tMatrixDataLen === 8) {\r\n                tResultTransform.skewX = tByte.getFloat32();\r\n                tResultTransform.skewY = tByte.getFloat32();\r\n            }\r\n            tMatrixArray.push(tResultTransform);\r\n            tBone = this.mBoneArr[i];\r\n            tBone.transform = tResultTransform;\r\n        }\r\n\r\n        var tIkConstraintData: IkConstraintData;\r\n        var tIkLen: number = tByte.getUint16();\r\n        var tIkBoneLen: number;\r\n        for (let i = 0; i < tIkLen; i++) {\r\n            tIkConstraintData = new IkConstraintData();\r\n            tIkBoneLen = tByte.getUint16();\r\n            for (let j = 0; j < tIkBoneLen; j++) {\r\n                tIkConstraintData.boneNames.push(tByte.readUTFString());\r\n                tIkConstraintData.boneIndexs.push(tByte.getInt16());\r\n            }\r\n            tIkConstraintData.name = tByte.readUTFString();\r\n            tIkConstraintData.targetBoneName = tByte.readUTFString();\r\n            tIkConstraintData.targetBoneIndex = tByte.getInt16();\r\n            tIkConstraintData.bendDirection = tByte.getFloat32();\r\n            tIkConstraintData.mix = tByte.getFloat32();\r\n            tIkConstraintData.isSpine = isSpine;\r\n            this.ikArr.push(tIkConstraintData);\r\n        }\r\n\r\n        var tTfConstraintData: TfConstraintData;\r\n        var tTfLen: number = tByte.getUint16();\r\n        var tTfBoneLen: number;\r\n        for (let i = 0; i < tTfLen; i++) {\r\n            tTfConstraintData = new TfConstraintData();\r\n            tTfBoneLen = tByte.getUint16();\r\n            for (let j = 0; j < tTfBoneLen; j++) {\r\n                tTfConstraintData.boneIndexs.push(tByte.getInt16());\r\n            }\r\n            tTfConstraintData.name = tByte.getUTFString();\r\n            tTfConstraintData.targetIndex = tByte.getInt16();\r\n            tTfConstraintData.rotateMix = tByte.getFloat32();\r\n            tTfConstraintData.translateMix = tByte.getFloat32();\r\n            tTfConstraintData.scaleMix = tByte.getFloat32();\r\n            tTfConstraintData.shearMix = tByte.getFloat32();\r\n            tTfConstraintData.offsetRotation = tByte.getFloat32();\r\n            tTfConstraintData.offsetX = tByte.getFloat32();\r\n            tTfConstraintData.offsetY = tByte.getFloat32();\r\n            tTfConstraintData.offsetScaleX = tByte.getFloat32();\r\n            tTfConstraintData.offsetScaleY = tByte.getFloat32();\r\n            tTfConstraintData.offsetShearY = tByte.getFloat32();\r\n            this.tfArr.push(tTfConstraintData);\r\n        }\r\n\r\n        var tPathConstraintData: PathConstraintData;\r\n        var tPathLen: number = tByte.getUint16();\r\n        var tPathBoneLen: number;\r\n        for (let i = 0; i < tPathLen; i++) {\r\n            tPathConstraintData = new PathConstraintData();\r\n            tPathConstraintData.name = tByte.readUTFString();\r\n            tPathBoneLen = tByte.getUint16();\r\n            for (let j = 0; j < tPathBoneLen; j++) {\r\n                tPathConstraintData.bones.push(tByte.getInt16());\r\n            }\r\n            tPathConstraintData.target = tByte.readUTFString();\r\n            tPathConstraintData.positionMode = tByte.readUTFString();\r\n            tPathConstraintData.spacingMode = tByte.readUTFString();\r\n            tPathConstraintData.rotateMode = tByte.readUTFString();\r\n            tPathConstraintData.offsetRotation = tByte.getFloat32();\r\n            tPathConstraintData.position = tByte.getFloat32();\r\n            tPathConstraintData.spacing = tByte.getFloat32();\r\n            tPathConstraintData.rotateMix = tByte.getFloat32();\r\n            tPathConstraintData.translateMix = tByte.getFloat32();\r\n            this.pathArr.push(tPathConstraintData);\r\n        }\r\n\r\n        var tDeformSlotLen: number;\r\n        var tDeformSlotDisplayLen: number;\r\n        var tDSlotIndex: number;\r\n        var tDAttachment: string;\r\n        var tDeformTimeLen: number;\r\n        var tDTime: number;\r\n        var tDeformVecticesLen: number;\r\n        var tDeformAniData: DeformAniData;\r\n        var tDeformSlotData: DeformSlotData;\r\n        var tDeformSlotDisplayData: DeformSlotDisplayData;\r\n        var tDeformVectices: any[];\r\n        var tDeformAniLen: number = tByte.getInt16();\r\n        for (let i = 0; i < tDeformAniLen; i++) {\r\n            var tDeformSkinLen: number = tByte.getUint8();\r\n            var tSkinDic: any = {};\r\n            this.deformAniArr.push(tSkinDic);\r\n            for (let f: number = 0; f < tDeformSkinLen; f++) {\r\n                tDeformAniData = new DeformAniData();\r\n                tDeformAniData.skinName = tByte.getUTFString();\r\n                tSkinDic[tDeformAniData.skinName] = tDeformAniData;\r\n                tDeformSlotLen = tByte.getInt16();\r\n                for (let j = 0; j < tDeformSlotLen; j++) {\r\n                    tDeformSlotData = new DeformSlotData();\r\n                    tDeformAniData.deformSlotDataList.push(tDeformSlotData);\r\n\r\n                    tDeformSlotDisplayLen = tByte.getInt16();\r\n                    for (let k = 0; k < tDeformSlotDisplayLen; k++) {\r\n                        tDeformSlotDisplayData = new DeformSlotDisplayData();\r\n                        tDeformSlotData.deformSlotDisplayList.push(tDeformSlotDisplayData);\r\n                        tDeformSlotDisplayData.slotIndex = tDSlotIndex = tByte.getInt16();\r\n                        tDeformSlotDisplayData.attachment = tDAttachment = tByte.getUTFString();\r\n                        tDeformTimeLen = tByte.getInt16();\r\n                        for (let l = 0; l < tDeformTimeLen; l++) {\r\n                            if (tByte.getByte() == 1) {\r\n                                tDeformSlotDisplayData.tweenKeyList.push(true);\r\n                            } else {\r\n                                tDeformSlotDisplayData.tweenKeyList.push(false);\r\n                            }\r\n                            tDTime = tByte.getFloat32();\r\n                            tDeformSlotDisplayData.timeList.push(tDTime);\r\n                            tDeformVectices = [];\r\n                            tDeformSlotDisplayData.vectices.push(tDeformVectices);\r\n                            tDeformVecticesLen = tByte.getInt16();\r\n                            for (let n = 0; n < tDeformVecticesLen; n++) {\r\n                                tDeformVectices.push(tByte.getFloat32());\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var tDrawOrderArr: DrawOrderData[];\r\n        var tDrawOrderAniLen: number = tByte.getInt16();\r\n        var tDrawOrderLen: number;\r\n        var tDrawOrderData: DrawOrderData;\r\n        var tDoLen: number;\r\n        for (let i = 0; i < tDrawOrderAniLen; i++) {\r\n            tDrawOrderLen = tByte.getInt16();\r\n            tDrawOrderArr = [];\r\n            for (let j = 0; j < tDrawOrderLen; j++) {\r\n                tDrawOrderData = new DrawOrderData();\r\n                tDrawOrderData.time = tByte.getFloat32();\r\n                tDoLen = tByte.getInt16();\r\n                for (let k = 0; k < tDoLen; k++) {\r\n                    tDrawOrderData.drawOrder.push(tByte.getInt16());\r\n                }\r\n                tDrawOrderArr.push(tDrawOrderData);\r\n            }\r\n            this.drawOrderAniArr.push(tDrawOrderArr);\r\n        }\r\n\r\n        var tEventArr: EventData[];\r\n        var tEventAniLen: number = tByte.getInt16();\r\n        var tEventLen: number;\r\n        var tEventData: EventData;\r\n        for (let i = 0; i < tEventAniLen; i++) {\r\n            tEventLen = tByte.getInt16();\r\n            tEventArr = [];\r\n            for (let j = 0; j < tEventLen; j++) {\r\n                tEventData = new EventData();\r\n                tEventData.name = tByte.getUTFString();\r\n                if (this._isParseAudio) tEventData.audioValue = tByte.getUTFString();\r\n                tEventData.intValue = tByte.getInt32();\r\n                tEventData.floatValue = tByte.getFloat32();\r\n                tEventData.stringValue = tByte.getUTFString();\r\n                tEventData.time = tByte.getFloat32();\r\n                tEventArr.push(tEventData);\r\n            }\r\n            this.eventAniArr.push(tEventArr);\r\n        }\r\n\r\n        var tAttachmentLen: number = tByte.getInt16();\r\n        if (tAttachmentLen > 0) {\r\n            this.attachmentNames = [];\r\n            for (let i = 0; i < tAttachmentLen; i++) {\r\n                this.attachmentNames.push(tByte.getUTFString());\r\n            }\r\n        }\r\n\r\n        //创建插槽并绑定到骨骼上\r\n        var tBoneSlotLen: number = tByte.getInt16();\r\n        var tDBBoneSlot: BoneSlot;\r\n        var tDBBoneSlotArr: any[];\r\n        for (let i = 0; i < tBoneSlotLen; i++) {\r\n            tDBBoneSlot = new BoneSlot();\r\n            tDBBoneSlot.name = tByte.readUTFString();\r\n            tDBBoneSlot.parent = tByte.readUTFString();\r\n            tDBBoneSlot.attachmentName = tByte.readUTFString();\r\n            tDBBoneSlot.srcDisplayIndex = tDBBoneSlot.displayIndex = tByte.getInt16();\r\n            tDBBoneSlot.templet = this;\r\n            this.boneSlotDic[tDBBoneSlot.name] = tDBBoneSlot;\r\n            tDBBoneSlotArr = this.bindBoneBoneSlotDic[tDBBoneSlot.parent];\r\n            if (tDBBoneSlotArr == null) {\r\n                this.bindBoneBoneSlotDic[tDBBoneSlot.parent] = tDBBoneSlotArr = [];\r\n            }\r\n            tDBBoneSlotArr.push(tDBBoneSlot);\r\n            this.boneSlotArray.push(tDBBoneSlot);\r\n        }\r\n\r\n        var tNameString: string = tByte.readUTFString();\r\n        var tNameArray: any[] = tNameString.split(\"\\n\");\r\n        var tNameStartIndex: number = 0;\r\n\r\n        var tSkinDataLen: number = tByte.getUint8();\r\n        var tSkinData: SkinData, tSlotData: SlotData, tDisplayData: SkinSlotDisplayData;\r\n        var tSlotDataLen: number, tDisplayDataLen: number;\r\n        var tUvLen: number, tWeightLen: number, tTriangleLen: number, tVerticeLen: number, tLengthLen: number;\r\n        for (let i = 0; i < tSkinDataLen; i++) {\r\n            tSkinData = new SkinData();\r\n            tSkinData.name = tNameArray[tNameStartIndex++];\r\n            tSlotDataLen = tByte.getUint8();\r\n            for (let j = 0; j < tSlotDataLen; j++) {\r\n                tSlotData = new SlotData();\r\n                tSlotData.name = tNameArray[tNameStartIndex++];\r\n                tDBBoneSlot = this.boneSlotDic[tSlotData.name];\r\n                tDisplayDataLen = tByte.getUint8();\r\n                for (let k = 0; k < tDisplayDataLen; k++) {\r\n                    tDisplayData = new SkinSlotDisplayData();\r\n                    this.skinSlotDisplayDataArr.push(tDisplayData);\r\n                    tDisplayData.name = tNameArray[tNameStartIndex++];\r\n                    tDisplayData.attachmentName = tNameArray[tNameStartIndex++];\r\n                    tDisplayData.transform = new Transform();\r\n                    tDisplayData.transform.scX = tByte.getFloat32();\r\n                    tDisplayData.transform.skX = tByte.getFloat32();\r\n                    tDisplayData.transform.skY = tByte.getFloat32();\r\n                    tDisplayData.transform.scY = tByte.getFloat32();\r\n                    tDisplayData.transform.x = tByte.getFloat32();\r\n                    tDisplayData.transform.y = tByte.getFloat32();\r\n\r\n                    tSlotData.displayArr.push(tDisplayData);\r\n                    tDisplayData.width = tByte.getFloat32();\r\n                    tDisplayData.height = tByte.getFloat32();\r\n                    tDisplayData.type = tByte.getUint8();\r\n                    tDisplayData.verLen = tByte.getUint16();\r\n\r\n                    tBoneLen = tByte.getUint16();\r\n                    if (tBoneLen > 0) {\r\n                        tDisplayData.bones = [];\r\n                        for (let l = 0; l < tBoneLen; l++) {\r\n                            let tBoneId: number = tByte.getUint16();\r\n                            tDisplayData.bones.push(tBoneId);\r\n                        }\r\n                    }\r\n                    tUvLen = tByte.getUint16();\r\n                    if (tUvLen > 0) {\r\n                        tDisplayData.uvs = [];\r\n                        for (let l = 0; l < tUvLen; l++) {\r\n                            tDisplayData.uvs.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n                    tWeightLen = tByte.getUint16();\r\n                    if (tWeightLen > 0) {\r\n                        tDisplayData.weights = [];\r\n                        for (let l = 0; l < tWeightLen; l++) {\r\n                            tDisplayData.weights.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n                    tTriangleLen = tByte.getUint16();\r\n                    if (tTriangleLen > 0) {\r\n                        tDisplayData.triangles = [];\r\n                        for (let l = 0; l < tTriangleLen; l++) {\r\n                            tDisplayData.triangles.push(tByte.getUint16());\r\n                        }\r\n                    }\r\n                    tVerticeLen = tByte.getUint16();\r\n                    if (tVerticeLen > 0) {\r\n                        tDisplayData.vertices = [];\r\n                        for (let l = 0; l < tVerticeLen; l++) {\r\n                            tDisplayData.vertices.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n\r\n                    tLengthLen = tByte.getUint16();\r\n                    if (tLengthLen > 0) {\r\n                        tDisplayData.lengths = [];\r\n                        for (let l = 0; l < tLengthLen; l++) {\r\n                            tDisplayData.lengths.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n                }\r\n                tSkinData.slotArr.push(tSlotData);\r\n            }\r\n            this.skinDic[tSkinData.name] = tSkinData;\r\n            this.skinDataArray.push(tSkinData);\r\n        }\r\n        var tReverse: number = tByte.getUint8();\r\n        if (tReverse == 1) {\r\n            this.yReverseMatrix = new Matrix(1, 0, 0, -1, 0, 0);\r\n            if (tRootBone) {\r\n                tRootBone.setTempMatrix(this.yReverseMatrix);\r\n            }\r\n        } else {\r\n            if (tRootBone) {\r\n                tRootBone.setTempMatrix(new Matrix());\r\n            }\r\n        }\r\n        this.showSkinByIndex(this.boneSlotDic, 0);\r\n    }\r\n\r\n    /**\r\n     * 得到指定的纹理\r\n     * @param\tname\t纹理的名字\r\n     * @return\r\n     */\r\n    getTexture(name: string): Texture {\r\n        let tTexture = this.subTextureDic[name];\r\n        if (!tTexture) {\r\n            tTexture = this.subTextureDic[name.substring(0, name.length - 1)];\r\n        }\r\n        if (tTexture == null) {\r\n            return this._mainTexture;\r\n        }\r\n        return tTexture;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 显示指定的皮肤\r\n     * @param\tboneSlotDic\t插糟字典的引用\r\n     * @param\tskinIndex\t皮肤的索引\r\n     * @param\tfreshDisplayIndex\t是否重置插槽纹理\r\n     */\r\n    showSkinByIndex(boneSlotDic: any, skinIndex: number, freshDisplayIndex: boolean = true): boolean {\r\n        if (skinIndex < 0 && skinIndex >= this.skinDataArray.length) return false;\r\n        var i: number, n: number;\r\n        var tBoneSlot: BoneSlot;\r\n        var tSlotData: SlotData;\r\n        var tSkinData: SkinData = this.skinDataArray[skinIndex];\r\n        if (tSkinData) {\r\n            for (i = 0, n = tSkinData.slotArr.length; i < n; i++) {\r\n                tSlotData = tSkinData.slotArr[i];\r\n                if (tSlotData) {\r\n                    tBoneSlot = boneSlotDic[tSlotData.name];\r\n                    if (tBoneSlot) {\r\n                        tBoneSlot.showSlotData(tSlotData, freshDisplayIndex);\r\n                        if (freshDisplayIndex && tBoneSlot.attachmentName != \"undefined\" && tBoneSlot.attachmentName != \"null\") {\r\n                            tBoneSlot.showDisplayByName(tBoneSlot.attachmentName);\r\n                        } else {\r\n                            tBoneSlot.showDisplayByIndex(tBoneSlot.displayIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 通过皮肤名字得到皮肤索引\r\n     * @param\tskinName 皮肤名称\r\n     * @return\r\n     */\r\n    getSkinIndexByName(skinName: string): number {\r\n        for (let i = 0, n = this.skinDataArray.length; i < n; i++) {\r\n            let tSkinData = this.skinDataArray[i];\r\n            if (tSkinData.name == skinName) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 得到缓冲数据\r\n     * @param\taniIndex\t动画索引\r\n     * @param\tframeIndex\t帧索引\r\n     * @return\r\n     */\r\n    getGrahicsDataWithCache(aniIndex: number, frameIndex: number): Graphics {\r\n        if (this._graphicsCache[aniIndex] && this._graphicsCache[aniIndex][frameIndex]) {\r\n            return this._graphicsCache[aniIndex][frameIndex];\r\n        }\r\n        //trace(\"getGrahicsDataWithCache fail:\",aniIndex,frameIndex,this._path);\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 保存缓冲grahpics\r\n     * @param\taniIndex\t动画索引\r\n     * @param\tframeIndex\t帧索引\r\n     * @param\tgraphics\t要保存的数据\r\n     */\r\n    setGrahicsDataWithCache(aniIndex: number, frameIndex: number, graphics: Graphics): void {\r\n        this._graphicsCache[aniIndex][frameIndex] = graphics;\r\n    }\r\n\r\n    deleteAniData(aniIndex: number): void {\r\n        if (this._anis[aniIndex]) {\r\n            var tAniDataO: AnimationContent = this._anis[aniIndex];\r\n            tAniDataO.bone3DMap = null;\r\n            tAniDataO.nodes = null;\r\n        }\r\n    }\r\n\r\n    protected _disposeResource(): void {\r\n        for (let k in this.subTextureDic) {\r\n            this.subTextureDic[k]?.destroy();\r\n        }\r\n        this._mainTexture._removeReference();\r\n\r\n        var tSkinSlotDisplayData: SkinSlotDisplayData;\r\n        for (var i: number = 0, n: number = this.skinSlotDisplayDataArr.length; i < n; i++) {\r\n            tSkinSlotDisplayData = this.skinSlotDisplayDataArr[i];\r\n            tSkinSlotDisplayData.destory();\r\n        }\r\n        this.skinSlotDisplayDataArr.length = 0;\r\n    }\r\n\r\n    /***********************************下面为一些儿访问接口*****************************************/\r\n    /**\r\n     * 通过索引得动画名称\r\n     * @param\tindex\r\n     * @return\r\n     */\r\n    getAniNameByIndex(index: number): string {\r\n        var tAni: any = this.getAnimation(index);\r\n        if (tAni) return tAni.name;\r\n        return null;\r\n    }\r\n}\r\n\r\nIAniLib.Templet = Templet;","import { ILoadTask, IResourceLoader, Loader } from \"../net/Loader\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { Templet } from \"./bone/Templet\";\r\n\r\nclass TempletLoader implements IResourceLoader {\r\n    load(task: ILoadTask) {\r\n        return Promise.all([\r\n            task.loader.fetch(task.url, \"arraybuffer\", task.progress.createCallback(), task.options),\r\n            task.loader.load(Utils.replaceFileExtension(task.url, \"png\"), null, task.progress.createCallback())\r\n        ]).then(res => {\r\n            if (!res[0] || !res[1])\r\n                return null;\r\n\r\n            let templet = new Templet();\r\n            templet._parse(res[1], task.url, res[0]);\r\n            return templet;\r\n        });\r\n    }\r\n}\r\n\r\nLoader.registerLoader([\"sk\"], TempletLoader);","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { Skeleton } from \"./bone/Skeleton\";\r\n\r\nimport \"./TempletLoader\";\r\n\r\nlet c = ClassUtils.regClass;\r\n\r\nc(\"Skeleton\", Skeleton);","import { Sprite } from \"../../display/Sprite\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { NodeFlags } from \"../../Const\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Loader } from \"../../net/Loader\";\r\n\r\n/**\r\n * 动画播放完毕后调度。\r\n * @eventType Event.COMPLETE\r\n */\r\n/*[Event(name = \"complete\", type = \"laya.events.Event\")]*/\r\n\r\n/**\r\n * 播放到某标签后调度。\r\n * @eventType Event.LABEL\r\n */\r\n/*[Event(name = \"label\", type = \"laya.events.Event\")]*/\r\n\r\n/**\r\n * 加载完成后调度。\r\n * @eventType Event.LOADED\r\n */\r\n/*[Event(name = \"loaded\", type = \"laya.events.Event\")]*/\r\n\r\n/**\r\n * 进入帧后调度。\r\n * @eventType Event.FRAME\r\n */\r\n/*[Event(name = \"frame\", type = \"laya.events.Event\")]*/\r\n\r\n/**\r\n * <p> <code>MovieClip</code> 用于播放经过工具处理后的 swf 动画。</p>\r\n */\r\nexport class MovieClip extends Sprite {\r\n    /**@internal */\r\n    protected static _ValueList: any[] = [\"x\", \"y\", \"width\", \"height\", \"scaleX\", \"scaleY\", \"rotation\", \"alpha\"];\r\n    /**@internal 数据起始位置。*/\r\n    protected _start: number = 0;\r\n    /**@internal 当前位置。*/\r\n    protected _Pos: number = 0;\r\n    /**@internal 数据。*/\r\n    protected _data: Byte;\r\n    /**@internal */\r\n    protected _curIndex: number;\r\n    /**@internal */\r\n    protected _preIndex: number;\r\n    /**@internal */\r\n    protected _playIndex: number;\r\n    /**@internal */\r\n    protected _playing: boolean;\r\n    /**@internal */\r\n    protected _ended: boolean = true;\r\n    /**@internal 总帧数。*/\r\n    protected _count: number;\r\n    /**@internal id_data起始位置表*/\r\n    _ids: any;\r\n    /**@internal */\r\n    protected _loadedImage: any = {};\r\n    /**@internal id_实例表*/\r\n    _idOfSprite: any[];\r\n    /**@internal 父mc*/\r\n    _parentMovieClip: MovieClip;\r\n    /**@internal 需要更新的movieClip表*/\r\n    _movieClipList: MovieClip[];\r\n    /**@internal */\r\n    protected _labels: any;\r\n    /**资源根目录。*/\r\n    basePath: string;\r\n    /**@internal */\r\n    private _isRoot: boolean;\r\n    /**@internal */\r\n    private _completeHandler: Handler;\r\n    /**@internal */\r\n    private _endFrame: number = -1;\r\n    private _source: string;\r\n\r\n    /** 播放间隔(单位：毫秒)。*/\r\n    interval: number = 30;\r\n    /**是否循环播放 */\r\n    loop: boolean;\r\n\r\n    /**\r\n     * 创建一个 <code>MovieClip</code> 实例。\r\n     * @param parentMovieClip 父MovieClip,自己创建时不需要传该参数\r\n     */\r\n    constructor(parentMovieClip: MovieClip = null) {\r\n        super();\r\n        this._ids = {};\r\n        this._idOfSprite = [];\r\n        this._reset();\r\n        this._playing = false;\r\n        this._parentMovieClip = parentMovieClip;\r\n        if (!parentMovieClip) {\r\n            this._movieClipList = [this];\r\n            this._isRoot = true;\r\n            this._setBitUp(NodeFlags.DISPLAY);\r\n        } else {\r\n            this._isRoot = false;\r\n            this._movieClipList = parentMovieClip._movieClipList;\r\n            this._movieClipList.push(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>销毁此对象。以及销毁引用的Texture</p>\r\n     * @param\tdestroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。\r\n     * @override\r\n     */\r\n    destroy(destroyChild: boolean = true): void {\r\n        this._clear();\r\n        super.destroy(destroyChild);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @override \r\n     */\r\n    _setDisplay(value: boolean): void {\r\n        super._setDisplay(value);\r\n        if (this._isRoot) {\r\n            this._onDisplay(value);\r\n        }\r\n    }\r\n    /**\r\n     * @internal \r\n     * @override\r\n     */\r\n    protected _onDisplay(value?: boolean): void {\r\n        if (value) this.timer.loop(this.interval, this, this.updates, null, true);\r\n        else this.timer.clear(this, this.updates);\r\n    }\r\n\r\n    /**@private 更新时间轴*/\r\n    //TODO:coverage\r\n    updates(): void {\r\n        if (this._parentMovieClip) return;\r\n        var i: number, len: number;\r\n        len = this._movieClipList.length;\r\n        for (i = 0; i < len; i++) {\r\n            this._movieClipList[i] && this._movieClipList[i]._update();\r\n        }\r\n    }\r\n\r\n    /**当前播放索引。*/\r\n    get index(): number {\r\n        return this._playIndex;\r\n    }\r\n\r\n    set index(value: number) {\r\n        this._playIndex = value;\r\n        if (this._data)\r\n            this._displayFrame(this._playIndex);\r\n        if (this._labels && this._labels[value]) this.event(Event.LABEL, this._labels[value]);\r\n    }\r\n\r\n    /**\r\n     * 增加一个标签到index帧上，播放到此index后会派发label事件\r\n     * @param\tlabel\t标签名称\r\n     * @param\tindex\t索引位置\r\n     */\r\n    addLabel(label: string, index: number): void {\r\n        if (!this._labels) this._labels = {};\r\n        this._labels[index] = label;\r\n    }\r\n\r\n    /**\r\n     * 删除某个标签\r\n     * @param\tlabel 标签名字，如果label为空，则删除所有Label\r\n     */\r\n    removeLabel(label: string): void {\r\n        if (!label) this._labels = null;\r\n        else if (!this._labels) {\r\n            for (var name in this._labels) {\r\n                if (this._labels[name] === label) {\r\n                    delete this._labels[name];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 帧总数。\r\n     */\r\n    get count(): number {\r\n        return this._count;\r\n    }\r\n\r\n    /**\r\n     * 是否在播放中\r\n     */\r\n    get playing(): boolean {\r\n        return this._playing;\r\n    }\r\n    /**\r\n     * @internal\r\n     * 动画的帧更新处理函数。\r\n     */\r\n    //TODO:coverage\r\n    private _update(): void {\r\n        if (!this._data) return;\r\n        if (!this._playing) return;\r\n        this._playIndex++;\r\n        if (this._playIndex >= this._count) {\r\n            if (!this.loop) {\r\n                this._playIndex--;\r\n                this.stop();\r\n                return;\r\n            }\r\n            this._playIndex = 0;\r\n        }\r\n        this._parseFrame(this._playIndex);\r\n        if (this._labels && this._labels[this._playIndex]) this.event(Event.LABEL, this._labels[this._playIndex]);\r\n        if (this._endFrame != -1 && this._endFrame == this._playIndex) {\r\n            this._endFrame = -1;\r\n            if (this._completeHandler != null) {\r\n                var handler: Handler = this._completeHandler;\r\n                this._completeHandler = null;\r\n                handler.run();\r\n            }\r\n            this.stop();\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止播放动画。\r\n     */\r\n    stop(): void {\r\n        this._playing = false;\r\n    }\r\n\r\n    /**\r\n     * 跳到某帧并停止播放动画。\r\n     * @param frame 要跳到的帧\r\n     */\r\n    gotoAndStop(index: number): void {\r\n        this.index = index;\r\n        this.stop();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 清理。\r\n     */\r\n    private _clear(): void {\r\n        this.stop();\r\n        this._idOfSprite.length = 0;\r\n        if (!this._parentMovieClip) {\r\n            this.timer.clear(this, this.updates);\r\n            var i: number, len: number;\r\n            len = this._movieClipList.length;\r\n            for (i = 0; i < len; i++) {\r\n                if (this._movieClipList[i] != this)\r\n                    this._movieClipList[i]._clear();\r\n            }\r\n            this._movieClipList.length = 0;\r\n        }\r\n        var key: string;\r\n        for (key in this._loadedImage) {\r\n            let obj = this._loadedImage[key];\r\n            if (obj) {\r\n                ILaya.Loader.clearRes(key, obj);\r\n                this._loadedImage[key] = false;\r\n            }\r\n        }\r\n        this.removeChildren();\r\n        this.graphics = null;\r\n        this._parentMovieClip = null;\r\n    }\r\n\r\n    /**\r\n     * 播放动画。\r\n     * @param\tindex 帧索引。\r\n     */\r\n    play(index: number = 0, loop: boolean = true): void {\r\n        this.loop = loop;\r\n        this._playing = true;\r\n        if (this._data)\r\n            this._displayFrame(index);\r\n    }\r\n\r\n    /**@internal */\r\n    //TODO:coverage\r\n    private _displayFrame(frameIndex: number = -1): void {\r\n        if (frameIndex != -1) {\r\n            if (this._curIndex > frameIndex) this._reset();\r\n            this._parseFrame(frameIndex);\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    private _reset(rm: boolean = true): void {\r\n        if (rm && this._curIndex != 1) this.removeChildren();\r\n        this._preIndex = this._curIndex = -1;\r\n        this._Pos = this._start;\r\n    }\r\n\r\n    /**@internal */\r\n    //TODO:coverage\r\n    private _parseFrame(frameIndex: number): void {\r\n        var mc: MovieClip, sp: Sprite, key: number, type: number, tPos: number, ttype: number, ifAdd: boolean = false;\r\n        var _idOfSprite: any[] = this._idOfSprite, _data: Byte = this._data, eStr: string;\r\n        if (this._ended) this._reset();\r\n        _data.pos = this._Pos;\r\n        this._ended = false;\r\n        this._playIndex = frameIndex;\r\n        if (this._curIndex > frameIndex && frameIndex < this._preIndex) {\r\n            this._reset(true);\r\n            _data.pos = this._Pos;\r\n        }\r\n        while ((this._curIndex <= frameIndex) && (!this._ended)) {\r\n            type = _data.getUint16();\r\n            switch (type) {\r\n                case 12: //new MC\r\n                    key = _data.getUint16();\r\n                    tPos = this._ids[_data.getUint16()];\r\n                    this._Pos = _data.pos;\r\n                    _data.pos = tPos;\r\n                    if ((ttype = _data.getUint8()) == 0) {\r\n                        var pid: number = _data.getUint16();\r\n                        sp = _idOfSprite[key]\r\n                        if (!sp) {\r\n                            sp = _idOfSprite[key] = new Sprite();\r\n                            var spp: Sprite = new Sprite();\r\n                            spp.loadImage(this.basePath + pid + \".png\");\r\n                            this._loadedImage[this.basePath + pid + \".png\"] = true;\r\n                            sp.addChild(spp);\r\n                            spp.size(_data.getFloat32(), _data.getFloat32());\r\n                            var mat: Matrix = _data._getMatrix();\r\n                            spp.transform = mat;\r\n                        }\r\n                        sp.alpha = 1;\r\n                    } else if (ttype == 1) {\r\n                        mc = _idOfSprite[key]\r\n                        if (!mc) {\r\n                            _idOfSprite[key] = mc = new MovieClip(this);\r\n                            mc.interval = this.interval;\r\n                            mc._ids = this._ids;\r\n                            mc.basePath = this.basePath;\r\n                            mc._setData(_data, tPos);\r\n                            mc._initState();\r\n                            mc.play(0);\r\n                        }\r\n                        mc.alpha = 1;\r\n                    }\r\n                    _data.pos = this._Pos;\r\n                    break;\r\n                case 3: //addChild\r\n                    var node: Sprite = _idOfSprite[ /*key*/_data.getUint16()];\r\n                    if (node) {\r\n                        this.addChild(node);\r\n                        node.zOrder = _data.getUint16();\r\n                        ifAdd = true;\r\n                    }\r\n                    break;\r\n                case 4: //remove\r\n                    node = _idOfSprite[ /*key*/_data.getUint16()];\r\n                    node && node.removeSelf();\r\n                    break;\r\n                case 5: //setValue\r\n                    _idOfSprite[_data.getUint16()][MovieClip._ValueList[_data.getUint16()]] = (_data.getFloat32());\r\n                    break;\r\n                case 6: //visible\r\n                    _idOfSprite[_data.getUint16()].visible = ( /*visible*/_data.getUint8() > 0);\r\n                    break;\r\n                case 7: //SetTransform\r\n                    sp = _idOfSprite[ /*key*/_data.getUint16()]; //.transform=mt;\r\n                    var mt: Matrix = sp.transform || Matrix.create();\r\n                    mt.setTo(_data.getFloat32(), _data.getFloat32(), _data.getFloat32(), _data.getFloat32(), _data.getFloat32(), _data.getFloat32());\r\n                    sp.transform = mt;\r\n                    break;\r\n                case 8: //pos\r\n                    _idOfSprite[_data.getUint16()].setPos(_data.getFloat32(), _data.getFloat32());\r\n                    break;\r\n                case 9: //size\r\n                    _idOfSprite[_data.getUint16()].setSize(_data.getFloat32(), _data.getFloat32());\r\n                    break;\r\n                case 10: //alpha\r\n                    _idOfSprite[ /*key*/_data.getUint16()].alpha = /*alpha*/ _data.getFloat32();\r\n                    break;\r\n                case 11: //scale\r\n                    _idOfSprite[_data.getUint16()].setScale(_data.getFloat32(), _data.getFloat32());\r\n                    break;\r\n                case 98: //event\t\t\r\n                    eStr = _data.getString();\r\n                    this.event(eStr);\r\n                    if (eStr == \"stop\") this.stop();\r\n                    break;\r\n                case 99: //FrameBegin\t\t\t\t\r\n                    this._curIndex = _data.getUint16();\r\n                    ifAdd && this.updateZOrder();\r\n                    break;\r\n                case 100: //cmdEnd\r\n                    this._count = this._curIndex + 1;\r\n                    this._ended = true;\r\n                    if (this._playing) {\r\n                        this.event(Event.FRAME);\r\n                        this.event(Event.END);\r\n                        this.event(Event.COMPLETE);\r\n                    }\r\n\r\n                    this._reset(false);\r\n                    break;\r\n            }\r\n        }\r\n        if (this._playing && !this._ended) this.event(Event.FRAME);\r\n        this._Pos = _data.pos;\r\n    }\r\n\r\n    /**@internal */\r\n    //TODO:coverage\r\n    _setData(data: Byte, start: number): void {\r\n        this._data = data;\r\n        this._start = start + 3;\r\n    }\r\n\r\n    get source() {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * 资源地址。\r\n     */\r\n    set source(value: string) {\r\n        this.load(value);\r\n    }\r\n\r\n    /**\r\n     * 加载资源。\r\n     * @param\turl swf 资源地址。\r\n     * @param   atlas  是否使用图集资源\r\n     * @param   atlasPath  图集路径，默认使用与swf同名的图集\r\n     */\r\n    load(url: string, atlas: boolean = false, atlasPath: string = null): void {\r\n        this.stop();\r\n        this._clear();\r\n        this._movieClipList = [this];\r\n        this._source = url;\r\n\r\n        if (atlas)\r\n            atlasPath = atlasPath ? atlasPath : url.split(\".swf\")[0] + \".json\";\r\n\r\n        ILaya.loader.load(atlasPath ? [url, atlasPath] : [url], Loader.BUFFER).then(res => {\r\n            if (!res) {\r\n                this.event(Event.ERROR, \"file not find\");\r\n                return;\r\n            }\r\n\r\n            let basePath: string = atlas ? res[1]?.dir : url.split(\".swf\")[0] + \"/image/\";\r\n            this._initData(new Byte(res[0].data), basePath);\r\n        });\r\n    }\r\n\r\n    /**@internal */\r\n    //TODO:coverage\r\n    private _initState(): void {\r\n        this._reset();\r\n        this._ended = false;\r\n        var preState: boolean = this._playing;\r\n        this._playing = false;\r\n        this._curIndex = 0;\r\n        while (!this._ended) this._parseFrame(++this._curIndex);\r\n        this._playing = preState;\r\n    }\r\n\r\n    /**@internal */\r\n    //TODO:coverage\r\n    private _initData(data: Byte, basePath: string): void {\r\n        this.basePath = basePath;\r\n        let len: number = data.getUint16();\r\n        for (let i = 0; i < len; i++) this._ids[data.getInt16()] = data.getInt32();\r\n        this.interval = 1000 / data.getUint16();\r\n        this._setData(data, this._ids[32767]);\r\n        this._initState();\r\n        this.play(0);\r\n        this.event(Event.READY);\r\n        if (!this._parentMovieClip) this.timer.loop(this.interval, this, this.updates, null, true);\r\n    }\r\n\r\n    /**\r\n     * 从开始索引播放到结束索引，结束之后出发complete回调\r\n     * @param\tstart\t开始索引\r\n     * @param\tend\t\t结束索引\r\n     * @param\tcomplete\t结束回调\r\n     */\r\n    playTo(start: number, end: number, complete: Handler = null): void {\r\n        this._completeHandler = complete;\r\n        this._endFrame = end;\r\n        this.play(start, false);\r\n    }\r\n}\r\n\r\n"],"mappings":"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"}