{"version":3,"names":["CollisionTool","constructor","this","_hitResultsPoolIndex","_hitResultsPool","_contactPonintsPoolIndex","_contactPointsPool","_collisionsPool","_collisions","getHitResult","hitResult","HitResult","push","recoverAllHitResultsPool","getContactPoints","contactPoint","ContactPoint","recoverAllContactPointsPool","getCollision","physicComponentA","physicComponentB","collision","idA","_id","idB","subCollisionFirst","length","Collision","pop","_colliderA","_colliderB","recoverCollision","garbageCollection","subCollisionsKey","subCollisions","wholeDelete","collisionKey","btPhysicsManager","physicsSettings","maxSubSteps","fixedTimeStep","dt","_gravity","Vector3","_updatedRigidbodies","_updateCount","_previousFrameCollisions","_currentFrameCollisions","_collisionsUtils","_currentConstraint","_physicsUpdateList","PhysicsUpdateList","_characters","bt","_bt","btPhysicsCreateUtil","_btCollisionConfiguration","btDefaultCollisionConfiguration_create","_btDispatcher","btCollisionDispatcher_create","_btBroadphase","btDbvtBroadphase_create","btOverlappingPairCache_setInternalGhostPairCallback","btDbvtBroadphase_getOverlappingPairCache","btGhostPairCallback_create","conFlags","flags","PHYSICSENGINEFLAGS_COLLISIONSONLY","_btCollisionWorld","btCollisionWorld","PHYSICSENGINEFLAGS_SOFTBODYSUPPORT","solver","btSequentialImpulseConstraintSolver_create","_btDiscreteDynamicsWorld","btDiscreteDynamicsWorld_create","_btSolverInfo","btDynamicsWorld_getSolverInfo","_btDispatchInfo","btCollisionWorld_getDispatchInfo","_btVector3Zero","btVector3_create","_btDefaultQuaternion","btQuaternion_create","_btClosestRayResultCallback","ClosestRayResultCallback_create","_btAllHitsRayResultCallback","AllHitsRayResultCallback_create","_btClosestConvexResultCallback","ClosestConvexResultCallback_create","_btAllConvexResultCallback","AllConvexResultCallback_create","btGImpactCollisionAlgorithm_RegisterAlgorithm","initPhysicsCapable","static","_btTempVector30","_btTempVector31","_btTempQuaternion0","_btTempQuaternion1","_btTempTransform0","btTransform_create","_btTempTransform1","_tempVector30","lVector","out","btVector3_setValue","x","y","z","_simulate","deltaTime","btDiscreteDynamicsWorld_stepSimulation","PerformDiscreteCollisionDetection","_updatePhysicsTransformFromRender","elements","i","n","physicCollider","_derivePhysicsTransformation","inPhysicUpdateListIndex","_updateCollisions","previous","loopCount","numManifolds","btDispatcher_getNumManifolds","contactManifold","btDispatcher_getManifoldByIndexInternal","componentA","btCollider","_physicObjectsMap","btCollisionObject_getUserIndex","btPersistentManifold_getBody0","componentB","btPersistentManifold_getBody1","tt","isFirstCollision","contacts","_isTrigger","numContacts","btPersistentManifold_getNumContacts","j","pt","btPersistentManifold_getContactPoint","distance","btManifoldPoint_getDistance","_updateFrame","_enableProcessCollisions","btNormal","btManifoldPoint_get_m_normalWorldOnB","normal","btVector3_x","btVector3_y","btVector3_z","btPostionA","btManifoldPoint_get_m_positionWorldOnA","positionOnA","btPostionB","btManifoldPoint_get_m_positionWorldOnB","positionOnB","_setUpdateFrame","character","getOverlappingObj","body","btCharacterCollider","compa","compb","dispatchCollideEvent","curFrameCol","colliderA","colliderB","_destroyed","ownerA","owner","ownerB","_lastUpdateFrame","event","Event","TRIGGER_STAY","other","COLLISION_STAY","TRIGGER_ENTER","COLLISION_ENTER","preFrameCol","preColliderA","preColliderB","TRIGGER_EXIT","COLLISION_EXIT","id","constraintObj","_isBreakConstrained","bodya","bodyb","_connectOwner","JOINT_BREAK","_updateCharacters","_updateTransformComponent","btCollisionObject_getWorldTransform","_btCollider","enableDebugDrawer","value","btDynamicsWorld_enableDebugDrawer","getPhysicsCapable","_physicsEngineCapableMap","get","Map","set","EPhysicsCapable","Physics_Gravity","Physics_StaticCollider","Physics_DynamicCollider","Physics_CharacterCollider","Physics_BoxColliderShape","Physics_SphereColliderShape","Physics_CapsuleColliderShape","Physics_CylinderColliderShape","Physics_ConeColliderShape","Physics_MeshColliderShape","Physics_CompoundColliderShape","setGravity","gravity","cloneTo","btGravity","btDiscreteDynamicsWorld_setGravity","addCollider","collider","btcollider","_type","btColliderType","StaticCollider","btCollisionWorld_addCollisionObject","_collisionGroup","_canCollideWith","RigidbodyCollider","_addRigidBody","CharactorCollider","_addCharacter","_isSimulate","removeCollider","remove","btCollisionWorld_removeCollisionObject","_removeRigidBody","_removeCharacter","addJoint","joint","btCollisionWorld_addConstraint","_btJoint","_disableCollisionsBetweenLinkedBodies","removeJoint","btCollisionWorld_removeConstraint","update","elapsedTime","_addUpdateList","rayCast","ray","outHitResult","collisonGroup","Physics3DUtils","COLLISIONFILTERGROUP_ALLFILTER","collisionMask","from","origin","to","normalize","direction","scale","add","rayResultCall","rayFrom","rayTo","ClosestRayResultCallback_set_m_rayFromWorld","ClosestRayResultCallback_set_m_rayToWorld","RayResultCallback_set_m_collisionFilterGroup","RayResultCallback_set_m_collisionFilterMask","RayResultCallback_set_m_collisionObject","RayResultCallback_set_m_closestHitFraction","btCollisionWorld_rayTest","RayResultCallback_hasHit","succeeded","RayResultCallback_get_m_collisionObject","hitFraction","RayResultCallback_get_m_closestHitFraction","btPoint","ClosestRayResultCallback_get_m_hitPointWorld","point","ClosestRayResultCallback_get_m_hitNormalWorld","rayCastAll","AllHitsRayResultCallback_set_m_rayFromWorld","AllHitsRayResultCallback_set_m_rayToWorld","collisionObjects","AllHitsRayResultCallback_get_m_collisionObjects","btPoints","AllHitsRayResultCallback_get_m_hitPointWorld","btNormals","AllHitsRayResultCallback_get_m_hitNormalWorld","btFractions","AllHitsRayResultCallback_get_m_hitFractions","tBtCollisionObjectArray_clear","tVector3Array_clear","tScalarArray_clear","count","tBtCollisionObjectArray_size","tBtCollisionObjectArray_at","tScalarArray_at","tVector3Array_at","pointE","destroy","btCollisionWorld_destroy","btDbvtBroadphase_destroy","btCollisionDispatcher_destroy","btDefaultCollisionConfiguration_destroy","rigidBody","btDiscreteDynamicsWorld_addRigidBody","btDiscreteDynamicsWorld_removeRigidBody","btDynamicsWorld_addAction","_btKinematicCharacter","btDynamicsWorld_removeAction","characters","splice","indexOf","COLLISIONFILTERGROUP_DEFAULTFILTER","COLLISIONFILTERGROUP_STATICFILTER","COLLISIONFILTERGROUP_KINEMATICFILTER","COLLISIONFILTERGROUP_DEBRISFILTER","COLLISIONFILTERGROUP_SENSORTRIGGER","COLLISIONFILTERGROUP_CHARACTERFILTER","COLLISIONFILTERGROUP_CUSTOMFILTER1","COLLISIONFILTERGROUP_CUSTOMFILTER2","COLLISIONFILTERGROUP_CUSTOMFILTER3","COLLISIONFILTERGROUP_CUSTOMFILTER4","COLLISIONFILTERGROUP_CUSTOMFILTER5","COLLISIONFILTERGROUP_CUSTOMFILTER6","COLLISIONFILTERGROUP_CUSTOMFILTER7","COLLISIONFILTERGROUP_CUSTOMFILTER8","COLLISIONFILTERGROUP_CUSTOMFILTER9","COLLISIONFILTERGROUP_CUSTOMFILTER10","ACTIVATIONSTATE_ACTIVE_TAG","ACTIVATIONSTATE_ISLAND_SLEEPING","ACTIVATIONSTATE_WANTS_DEACTIVATION","ACTIVATIONSTATE_DISABLE_DEACTIVATION","ACTIVATIONSTATE_DISABLE_SIMULATION","COLLISIONFLAGS_STATIC_OBJECT","COLLISIONFLAGS_KINEMATIC_OBJECT","COLLISIONFLAGS_NO_CONTACT_RESPONSE","COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK","COLLISIONFLAGS_CHARACTER_OBJECT","COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT","COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING","PHYSICSENGINEFLAGS_NONE","PHYSICSENGINEFLAGS_MULTITHREADED","PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE","SOLVERMODE_RANDMIZE_ORDER","SOLVERMODE_FRICTION_SEPARATE","SOLVERMODE_USE_WARMSTARTING","SOLVERMODE_USE_2_FRICTION_DIRECTIONS","SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING","SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION","SOLVERMODE_CACHE_FRIENDLY","SOLVERMODE_SIMD","SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS","SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS","HITSRAYRESULTCALLBACK_FLAG_NONE","HITSRAYRESULTCALLBACK_FLAG_FILTERBACKFACESS","HITSRAYRESULTCALLBACK_FLAG_KEEPUNFILIPPEDNORMAL","HITSRAYRESULTCALLBACK_FLAG_USESUBSIMPLEXCONVEXCASTRAYTEST","HITSRAYRESULTCALLBACK_FLAG_USEGJKCONVEXCASTRAYTEST","HITSRAYRESULTCALLBACK_FLAG_TERMINATOR","physicsManager","_restitution","_friction","_rollingFriction","_transformFlag","_physicsManager","_colliderID","getColliderType","_btVector30","_btQuaternion0","_tempQuaternion0","Quaternion","_tempQuaternion1","_tempMatrix4x40","Matrix4x4","getCapable","setOwner","node","_transform","transform","_initCollider","setCollisionGroup","setCanCollideWith","setBounciness","setfriction","setRollingFriction","_onScaleChange","_btColliderShape","setWorldScale","_onShapeChange","btColObj","btCollisionObject_getCollisionFlags","btCollisionObject_setCollisionFlags","setColliderShape","shape","_btShape","lastColliderShape","btCollisionObject_setCollisionShape","simulate","componentEnable","btCollisionObject_destroy","force","btColliderObject","btTransform","_innerDerivePhysicsTransformation","btCollisionObject_setWorldTransform","physicTransformPtr","_getTransformFlag","Transform3D","TRANSFORM_WORLDPOSITION","shapeOffset","_localOffset","position","btPosition","physicPosition","worldMat","worldMatrix","transformCoordinate","btTransform_setOrigin","_setTransformFlag","TRANSFORM_WORLDQUATERNION","btRotation","rotation","btQuaternion_setValue","w","btTransform_setRotation","TRANSFORM_WORLDSCALE","getWorldLossyScale","physicsTransform","syncRot","addmargin","colliderShape","localOffset","btTransform_getOrigin","btTransform_getRotation","btRotX","btQuaternion_x","btRotY","btQuaternion_y","btRotZ","btQuaternion_z","btRotW","btQuaternion_w","btScale","btCollisionShape_getLocalScaling","rotShapePosition","transformQuat","type","transformChanged","flag","btCollisionObject_setRestitution","btCollisionObject_setFriction","btCollisionObject_setRollingFriction","TYPE_STATIC","TYPE_DYNAMIC","TYPE_KINEMATIC","super","_stepHeight","_upAxis","_maxSlope","_fallSpeed","_pushForce","ghostObject","btPairCachingGhostObject_create","btCollisionObject_setUserIndex","initCapable","getCharacterCapable","setShapelocalOffset","setSkinWidth","width","setPosition","setRadius","setHeight","setminDistance","setDynamicFriction","setStaticFriction","setFrictionCombine","setBounceCombine","_characterCapableMap","ECharacterCapable","Charcater_Gravity","Charcater_CollisionGroup","Charcater_WorldPosition","Charcater_Move","Charcater_Jump","Charcater_StepOffset","Character_UpDirection","Character_FallSpeed","Character_SlopeLimit","Character_PushForce","Character_Radius","Character_Height","Character_offset","Character_Skin","Character_minDistance","Character_EventFilter","btKinematicCharacterController_destroy","btUpAxis","btKinematicCharacterController_create","setfallSpeed","setSlopeLimit","btKinematicCharacterController_setJumpAxis","setPushForce","setWorldPosition","btKinematicCharacterController_setCurrentPosition","move","disp","btMovement","btKinematicCharacterController_setWalkDirection","jump","velocity","btVelocity","_convertToBulletVec3","btKinematicCharacterController_jump","setStepOffset","offset","btKinematicCharacterController_setStepHeight","setUpDirection","up","btKinematicCharacterController_setUp","getVerticalVel","btKinematicCharacterController_getVerticalVelocity","slopeLimit","btKinematicCharacterController_setMaxSlope","Math","PI","btKinematicCharacterController_setFallSpeed","btKinematicCharacterController_setPushForce","btKinematicCharacterController_setGravity","cb","ghost","num","btCollisionObject_getNumOverlappingObjects","obj","btCollisionObject_getOverlappingObject","comp","btColliderShape","_btScale","_worldScale","_createShape","_getType","setOffset","equal","btCollisionShape_setLocalScaling","btCollisionShape_destroy","SHAPEORIENTATION_UPX","SHAPEORIENTATION_UPY","SHAPEORIENTATION_UPZ","SHAPETYPES_BOX","SHAPETYPES_SPHERE","SHAPETYPES_CYLINDER","SHAPETYPES_CAPSULE","SHAPETYPES_CONVEXHULL","SHAPETYPES_COMPOUND","SHAPETYPES_STATICPLANE","SHAPETYPES_CONE","SHAPETYPES_HEIGHTFIELDTERRAIN","btMeshColliderShape","_limitvertex","mesh","_mesh","_convex","_createConvexMeshGeometry","_createTrianggleMeshGeometry","_btTempVector32","setPhysicsMeshFromMesh","setConvexMesh","setLimitVertex","limit","convex","_createPhysicsMeshFromMesh","_triangleMesh","triangleMesh","btTriangleMesh_create","nativePositio0","nativePositio1","nativePositio2","posArray","Array","getPositions","indices","_indexBuffer","getData","position0","position1","position2","btTriangleMesh_addTriangle","_createConvexMeshFromMesh","_convexMesh","physicMesh","btShapeHull_create","_physicMesh","btBvhTriangleMeshShape_create","convexMesh","btConvexHullShape_create","btRigidBodyCollider","manager","_isKinematic","_mass","_angularDamping","_linearDamping","_overrideGravity","_totalTorque","_totalForce","_linearVelocity","_angularVelocity","_linearFactor","_angularFactor","_detectCollisions","_allowSleep","_btInertia","_btImpulse","_btImpulseOffset","_btGravity","_btTransform0","getRigidBodyCapable","_rigidBodyCapableMap","EColliderCapable","Collider_AllowTrigger","Collider_CollisionGroup","Collider_Friction","Collider_Restitution","Collider_RollingFriction","Collider_DynamicFriction","Collider_StaticFriction","Collider_BounceCombine","Collider_FrictionCombine","Collider_EventFilter","RigidBody_AllowSleep","RigidBody_Gravity","RigidBody_LinearDamp","RigidBody_AngularDamp","RigidBody_LinearVelocity","RigidBody_AngularVelocity","RigidBody_Mass","RigidBody_InertiaTensor","RigidBody_MassCenter","RigidBody_MaxAngularVelocity","RigidBody_MaxDepenetrationVelocity","RigidBody_SleepThreshold","RigidBody_SleepAngularVelocity","RigidBody_SolverIterations","RigidBody_AllowDetectionMode","RigidBody_AllowKinematic","RigidBody_LinearFactor","RigidBody_AngularFactor","RigidBody_ApplyForce","RigidBody_ClearForce","RigidBody_ApplyForceWithOffset","RigidBody_ApplyTorque","RigidBody_ApplyImpulse","RigidBody_ApplyTorqueImpulse","RigidBody_WorldPosition","RigidBody_WorldOrientation","btRigidBody_setCenterOfMassPos","setWorldRotation","btRigidBody_setCenterOfMassOrientation","sleep","_setoverrideGravity","btRigidBody_getFlags","_BT_DISABLE_WORLD_GRAVITY","btRigidBody_setFlags","_updateMass","mass","btCollisionShape_calculateLocalInertia","btRigidBody_setMassProps","btRigidBody_updateInertiaTensor","isSleeping","btCollisionObject_getActivationState","motionState","layaMotionState_create","layaMotionState_set_rigidBodyID","_btLayaMotionState","constructInfo","btRigidBodyConstructionInfo_create","btRigid","btRigidBody_create","btRigidBodyConstructionInfo_destroy","setMass","setConstraints","setLinearDamping","setAngularDamping","setIsKinematic","setInertiaTensor","console","error","btRigidBody_setCenterOfMassTransform","btRigidBody_setDamping","setLinearVelocity","btValue","wakeUp","btRigidBody_setLinearVelocity","setSleepLinearVelocity","btRigidBody_setSleepingThresholds","btRigidBody_getAngularSleepingThreshold","setAngularVelocity","btRigidBody_setAngularVelocity","max","btRigidBody_setGravity","setCenterOfMass","setMaxAngularVelocity","Error","setMaxDepenetrationVelocity","setSleepThreshold","setSleepAngularVelocity","btRigidBody_getLinearSleepingThreshold","setSolverIterations","setCollisionDetectionMode","canInSimulation","oldSimulate","natColObj","btCollisionObject_forceActivationState","btCollisionObject_setActivationState","btZero","btCollisionObject_setInterpolationLinearVelocity","btCollisionObject_setInterpolationAngularVelocity","linearFactor","angularFactor","btRigidBody_setLinearFactor","btRigidBody_setAngularFactor","setTrigger","_applyForce","btForce","btOffset","btRigidBody_applyForce","btRigidBody_applyCentralForce","_applyTorque","torque","btTorque","btRigidBody_applyTorque","_applyImpulse","impulse","btRigidBody_applyImpulse","btRigidBody_applyCentralImpulse","_applyTorqueImpulse","torqueImpulse","btTorqueImpulse","btRigidBody_applyTorqueImpulse","addForce","mode","PhysicsForceMode","Force","Impulse","addTorque","clearForces","btRigidBody_clearForces","btCollisionObject_activate","oriTransform","btTransform_equal","MeshColliderShape","btMotionState_destroy","_BT_ENABLE_GYROPSCOPIC_FORCE","btStaticCollider","btCollisionObject_create","isStatic","getStaticColliderCapable","_staticCapableMap","btJoint","_getJointFeedBack","_anchor","_connectAnchor","_currentForce","_currentTorque","_manager","initJoint","initJointCapable","_jointCapableMap","EJointCapable","Joint_Anchor","Joint_ConnectAnchor","_createJoint","setCollider","_collider","setConnectedCollider","_connectCollider","setLocalPos","pos","_btTempTrans0","_btTempTrans1","setConnectLocalPos","getlinearForce","getAngularForce","isValid","isEnable","btTypedConstraint_setEnabled","isCollision","_breakForce","_breakTorque","btTransform_setIdentity","_btFeedBackInfo","isBreakForce","scalarLength","isBreakTorque","applyForce","btJointFeedback_getAppliedForceBodyA","_btJointFeedBackObj","applyTorque","btJointFeedback_getAppliedTorqueBodyA","setValue","setConnectedMassScale","setConnectedInertiaScale","setMassScale","setInertiaScale","setBreakForce","setBreakTorque","CONSTRAINT_POINT2POINT_CONSTRAINT_TYPE","CONSTRAINT_HINGE_CONSTRAINT_TYPE","CONSTRAINT_CONETWIST_CONSTRAINT_TYPE","CONSTRAINT_D6_CONSTRAINT_TYPE","CONSTRAINT_SLIDER_CONSTRAINT_TYPE","CONSTRAINT_CONTACT_CONSTRAINT_TYPE","CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE","CONSTRAINT_GEAR_CONSTRAINT_TYPE","CONSTRAINT_FIXED_CONSTRAINT_TYPE","CONSTRAINT_MAX_CONSTRAINT_TYPE","CONSTRAINT_CONSTRAINT_ERP","CONSTRAINT_CONSTRAINT_STOP_ERP","CONSTRAINT_CONSTRAINT_CFM","CONSTRAINT_CONSTRAINT_STOP_CFM","btCustomJoint","_minAngularXLimit","_maxAngularXLimit","_minAngularYLimit","_maxAngularYLimit","_minAngularZLimit","_maxAngularZLimit","_minLinearLimit","_maxLinearLimit","_linearXMotion","D6Axis","eFREE","_linearYMotion","_linearZMotion","_angularXMotion","_angularYMotion","_angularZMotion","_axis","_secondAxis","_btAxis","_btsceondAxis","btGeneric6DofSpring2Constraint_create","btJointFeedback_create","btTypedConstraint_setJointFeedback","_initAllConstraintInfo","setMotion","eLOCKED","D6MotionType","eX","eY","eZ","eTWIST","eSWING1","eSWING2","setEquilibriumPoint","axis","equilibriumPoint","btGeneric6DofSpring2Constraint_setEquilibriumPoint","btGeneric6DofSpring2Constraint_setFrames","setAxis","secendary","btGeneric6DofSpring2Constraint_setAxis","_setLimit","motionType","low","high","lowLimit","maxLimit","btGeneric6DofSpring2Constraint_setLimit","eLIMITED","_setSpring","springValue","limitIfNeeded","enableSpring","btGeneric6DofSpring2Constraint_enableSpring","btGeneric6DofSpring2Constraint_setStiffness","_setBounce","bounce","btGeneric6DofSpring2Constraint_setBounce","_setDamp","damp","btGeneric6DofSpring2Constraint_setDamping","setDistanceLimit","bounceness","bounceThreshold","spring","setLinearLimit","linearAxis","upper","lower","damping","setTwistLimit","setSwingLimit","yAngle","zAngle","setDrive","index","stiffness","forceLimit","btGeneric6DofSpring2Constraint_enableMotor","setDriveTransform","rotate","D6Drive","setDriveVelocity","angular","btGeneric6DofSpring2Constraint_setTargetVelocity","getTwistAngle","getSwingYAngle","getSwingZAngle","btFixedJoint","btFixedConstraint_create","btHingeJoint","_uperLimit","_lowerLimit","_angularAxis","_enableLimit","_enableDrive","_initJointConstraintInfo","ANGULAR_X","ANGULAR_Y","ANGULAR_Z","setLowerLimit","lowerLimit","setUpLimit","setBounceness","setBouncenMinVelocity","setContactDistance","enableLimit","enableDrive","enableFreeSpin","setSwingOffset","getAngle","getVelocity","setHardLimit","upperLimit","contactDist","setSoftLimit","setDriveForceLimit","setDriveGearRatio","ratio","setHingeJointFlag","btSpringJoint","_minDistance","_maxDistance","Number","MAX_VALUE","ANGULARSPRING_AXIS_X","ANGULARSPRING_AXIS_Y","ANGULARSPRING_AXIS_Z","LINEARSPRING_AXIS_X","LINEARSPRING_AXIS_Y","LINEARSPRING_AXIS_Z","setMinDistance","setMaxDistance","setTolerance","tolerance","setStiffness","setDamping","btBoxColliderShape","_size","_btSize","changeBoxShape","btBoxShape_create","setSize","size","btCapsuleColliderShape","_radius","_length","_orientation","btCapsuleShapeX_create","btCapsuleShape_create","btCapsuleShapeZ_create","radius","height","setUpAxis","upAxis","fixScale","btConeColliderShape","btConeShapeX_create","btConeShape_create","btConeShapeZ_create","btCylinderColliderShape","btCylinderShapeX_create","btCylinderShape_create","btCylinderShapeZ_create","btSphereColliderShape","btSphereShape_create","BulletInteractive","mem","dbgline","drawLine","sx","sy","sz","ex","ey","ez","color","dbgLine","line","clearLine","clear","jslog","ptr","len","td","TextDecoder","str","Uint8Array","buffer","jsstr","decode","log","getWorldTransform","rigidBodyID","worldTransPointer","setWorldTransform","Physics_Joint","Physics_D6Joint","Physics_FixedJoint","Physics_SpringJoint","Physics_HingeJoint","Physics_CreateCorveMesh","initialize","physics3D","window","Physics3D","Config3D","defaultPhysicsMemory","then","init","__init__","Promise","resolve","createPhysicsManger","createDynamicCollider","createStaticCollider","createCharacterController","createFixedJoint","createHingeJoint","createSpringJoint","createD6Joint","createBoxColliderShape","createSphereColliderShape","createCapsuleColliderShape","createMeshColliderShape","createPlaneColliderShape","createCylinderColliderShape","createConeColliderShape","createCorveMesh","__convexMesh","vertexCount","btShapeHull_numVertices","indexCount","btShapeHull_numIndices","vertexDeclaration","VertexMesh","getVertexDeclaration","vertexFloatStride","vertexStride","vertice","Float32Array","triangles","vector3","btShapeHull_getVertexPointer","btShapeHull_getIndexPointer","PrimitiveMesh","_createMesh","Uint16Array","Laya3D","PhysicsCreateUtil","_childColliderShapes","_clearChildShape","_attatched","_compoundParent","_indexInCompound","_updateChildTransform","shapes","removeChildShape","addChildShape","clearChildShape","getChildShapeCount","destObject","destCompoundColliderShape","clone","dest","CompoundColliderShape"],"sources":["../../src/layaAir/laya/Physics3D/Bullet/CollisionTool.ts","../../src/layaAir/laya/Physics3D/Bullet/btPhysicsManager.ts","../../src/layaAir/laya/Physics3D/Bullet/Collider/btCollider.ts","../../src/layaAir/laya/Physics3D/Bullet/Collider/btCharacterCollider.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btColliderShape.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btMeshColliderShape.ts","../../src/layaAir/laya/Physics3D/Bullet/Collider/btRigidBodyCollider.ts","../../src/layaAir/laya/Physics3D/Bullet/Collider/btStaticCollider.ts","../../src/layaAir/laya/Physics3D/Bullet/Joint/btJoint.ts","../../src/layaAir/laya/Physics3D/Bullet/Joint/btCustomJoint.ts","../../src/layaAir/laya/Physics3D/Bullet/Joint/btFixedJoint.ts","../../src/layaAir/laya/Physics3D/Bullet/Joint/btHingeJoint.ts","../../src/layaAir/laya/Physics3D/Bullet/Joint/btSpringJoint.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btBoxColliderShape.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btCapsuleColliderShape.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btConeColliderShape.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btCylinderColliderShape.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btSphereColliderShape.ts","../../src/layaAir/laya/Physics3D/Bullet/btInteractive.ts","../../src/layaAir/laya/Physics3D/Bullet/btPhysicsCreateUtil.ts","../../src/layaAir/laya/Physics3D/Bullet/Shape/btCompoundColliderShape.ts"],"sourcesContent":["import { Collision } from \"../../d3/physics/Collision\";\r\nimport { ContactPoint } from \"../../d3/physics/ContactPoint\";\r\nimport { HitResult } from \"../../d3/physics/HitResult\";\r\nimport { btCollider } from \"./Collider/btCollider\";\r\n\r\n\r\n/**\r\n * <code>CollisionMap</code> 类用于实现碰撞组合实例图。\r\n */\r\nexport class CollisionTool {\r\n\t/**@internal\t*/\r\n\tprivate _hitResultsPoolIndex: number = 0;\r\n\t/**@internal\t*/\r\n\tprivate _hitResultsPool: HitResult[] = [];\r\n\t/**@internal\t*/\r\n\tprivate _contactPonintsPoolIndex: number = 0;\r\n\t/**@internal\t*/\r\n\tprivate _contactPointsPool: ContactPoint[] = [];\r\n\t/**@internal */\r\n\tprivate _collisionsPool: Collision[] = [];\r\n\r\n\t/**@internal */\r\n\tprivate _collisions: any = {};\r\n\r\n\t/**\r\n\t * 创建一个 <code>CollisionMap</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetHitResult(): HitResult {\r\n\t\tvar hitResult: HitResult = this._hitResultsPool[this._hitResultsPoolIndex++];\r\n\t\tif (!hitResult) {\r\n\t\t\thitResult = new HitResult();\r\n\t\t\tthis._hitResultsPool.push(hitResult);\r\n\t\t}\r\n\t\treturn hitResult;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverAllHitResultsPool(): void {\r\n\t\tthis._hitResultsPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetContactPoints(): ContactPoint {\r\n\t\tvar contactPoint: ContactPoint = this._contactPointsPool[this._contactPonintsPoolIndex++];\r\n\t\tif (!contactPoint) {\r\n\t\t\tcontactPoint = new ContactPoint();\r\n\t\t\tthis._contactPointsPool.push(contactPoint);\r\n\t\t}\r\n\t\treturn contactPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverAllContactPointsPool(): void {\r\n\t\tthis._contactPonintsPoolIndex = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgetCollision(physicComponentA: btCollider, physicComponentB: btCollider): Collision {\r\n\t\tvar collision: Collision;\r\n\t\tvar idA = physicComponentA._id;\r\n\t\tvar idB = physicComponentB._id;\r\n\t\tvar subCollisionFirst: any = this._collisions[idA];\r\n\t\tif (subCollisionFirst)\r\n\t\t\tcollision = subCollisionFirst[idB];\r\n\t\tif (!collision) {\r\n\t\t\tif (!subCollisionFirst) {\r\n\t\t\t\tsubCollisionFirst = {};\r\n\t\t\t\tthis._collisions[idA] = subCollisionFirst;\r\n\t\t\t}\r\n\t\t\tcollision = this._collisionsPool.length === 0 ? new Collision() : this._collisionsPool.pop();\r\n\t\t\tcollision._colliderA = physicComponentA;\r\n\t\t\tcollision._colliderB = physicComponentB;\r\n\t\t\tsubCollisionFirst[idB] = collision;\r\n\t\t}\r\n\t\treturn collision;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\trecoverCollision(collision: Collision): void {\r\n\t\tvar idA = (collision._colliderA as btCollider)._id;\r\n\t\tvar idB = (collision._colliderB as btCollider)._id;\r\n\t\tthis._collisions[idA][idB] = null;\r\n\t\tthis._collisionsPool.push(collision);\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tgarbageCollection(): void {//TODO:哪里调用\r\n\t\tthis._hitResultsPoolIndex = 0;\r\n\t\tthis._hitResultsPool.length = 0;\r\n\r\n\t\tthis._contactPonintsPoolIndex = 0;\r\n\t\tthis._contactPointsPool.length = 0;\r\n\r\n\t\tthis._collisionsPool.length = 0;\r\n\t\tfor (var subCollisionsKey in this._collisionsPool) {\r\n\t\t\tvar subCollisions: any = this._collisionsPool[subCollisionsKey];\r\n\t\t\tvar wholeDelete: boolean = true;\r\n\t\t\tfor (var collisionKey in subCollisions) {\r\n\t\t\t\tif (subCollisions[collisionKey])\r\n\t\t\t\t\twholeDelete = false;\r\n\t\t\t\telse\r\n\t\t\t\t\tdelete subCollisions[collisionKey];\r\n\t\t\t}\r\n\t\t\tif (wholeDelete)\r\n\t\t\t\tdelete this._collisionsPool[subCollisionsKey];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { Ray } from \"../../d3/math/Ray\";\r\nimport { PhysicsSettings } from \"../../d3/physics/PhysicsSettings\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { IPhysicsManager } from \"../interface/IPhysicsManager\";\r\nimport { btJoint } from \"./Joint/btJoint\";\r\nimport { btCollider, btColliderType } from \"./Collider/btCollider\";\r\nimport { btPhysicsCreateUtil } from \"./btPhysicsCreateUtil\";\r\nimport { btCharacterCollider } from \"./Collider/btCharacterCollider\";\r\nimport { CollisionTool } from \"./CollisionTool\";\r\nimport { Collision } from \"../../d3/physics/Collision\";\r\nimport { ContactPoint } from \"../../d3/physics/ContactPoint\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { HitResult } from \"../../d3/physics/HitResult\";\r\nimport { EPhysicsCapable } from \"../physicsEnum/EPhycisCapable\";\r\nimport { Physics3DUtils } from \"../../d3/utils/Physics3DUtils\";\r\nimport { PhysicsUpdateList } from \"../../d3/physics/PhysicsUpdateList\";\r\nimport { ICollider } from \"../interface/ICollider\";\r\n\r\nexport class btPhysicsManager implements IPhysicsManager {\r\n    /**默认碰撞组 */\r\n    static COLLISIONFILTERGROUP_DEFAULTFILTER: number = 0x1;\r\n    /**静态碰撞组 */\r\n    static COLLISIONFILTERGROUP_STATICFILTER: number = 0x2;\r\n    /**运动学刚体碰撞组 */\r\n    static COLLISIONFILTERGROUP_KINEMATICFILTER: number = 0x4;\r\n    /**碎片碰撞组 */\r\n    static COLLISIONFILTERGROUP_DEBRISFILTER: number = 0x8;\r\n    /**传感器触发器*/\r\n    static COLLISIONFILTERGROUP_SENSORTRIGGER: number = 0x10;\r\n    /**字符过滤器 */\r\n    static COLLISIONFILTERGROUP_CHARACTERFILTER: number = 0x20;\r\n    /**自定义过滤1 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER1: number = 0x40;\r\n    /**自定义过滤2 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER2: number = 0x80;\r\n    /**自定义过滤3 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER3: number = 0x100;\r\n    /**自定义过滤4 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER4: number = 0x200;\r\n    /**自定义过滤5 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER5: number = 0x400;\r\n    /**自定义过滤6 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER6: number = 0x800;\r\n    /**自定义过滤7 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER7: number = 0x1000;\r\n    /**自定义过滤8 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER8: number = 0x2000;\r\n    /**自定义过滤9 */\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER9: number = 0x4000;\r\n    /**自定义过滤10*/\r\n    static COLLISIONFILTERGROUP_CUSTOMFILTER10: number = 0x8000;\r\n    /**所有过滤 */\r\n    static COLLISIONFILTERGROUP_ALLFILTER: number = -1;\r\n\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_ACTIVE_TAG = 1;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_ISLAND_SLEEPING = 2;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_WANTS_DEACTIVATION = 3;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4;\r\n    /** @internal */\r\n    static ACTIVATIONSTATE_DISABLE_SIMULATION = 5;\r\n\r\n    /** @internal */\r\n    static COLLISIONFLAGS_STATIC_OBJECT = 1;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_KINEMATIC_OBJECT = 2;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8;//this allows per-triangle material (friction/restitution)\r\n    /** @internal */\r\n    static COLLISIONFLAGS_CHARACTER_OBJECT = 16;\r\n    /** @internal */\r\n    static COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32;//disable debug drawing\r\n    /** @internal */\r\n    static COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64;//disable parallel/SPU processing\r\n\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_NONE = 0x0;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_COLLISIONSONLY = 0x1;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 0x2;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_MULTITHREADED = 0x4;\r\n    /** @internal */\r\n    static PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 0x8;\r\n\r\n    /** @internal */\r\n    static SOLVERMODE_RANDMIZE_ORDER = 1;\r\n    /** @internal */\r\n    static SOLVERMODE_FRICTION_SEPARATE = 2;\r\n    /** @internal */\r\n    static SOLVERMODE_USE_WARMSTARTING = 4;\r\n    /** @internal */\r\n    static SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16;\r\n    /** @internal */\r\n    static SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32;\r\n    /** @internal */\r\n    static SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64;\r\n    /** @internal */\r\n    static SOLVERMODE_CACHE_FRIENDLY = 128;\r\n    /** @internal */\r\n    static SOLVERMODE_SIMD = 256;\r\n    /** @internal */\r\n    static SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512;\r\n    /** @internal */\r\n    static SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_NONE = 0;\r\n    /** @internal 射线回调模式 忽略反面,射线检测时，会忽略掉反面的三角形*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_FILTERBACKFACESS = 1;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_KEEPUNFILIPPEDNORMAL = 2;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_USESUBSIMPLEXCONVEXCASTRAYTEST = 4;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_USEGJKCONVEXCASTRAYTEST = 8;\r\n    /** @internal 射线回调模式*/\r\n    static HITSRAYRESULTCALLBACK_FLAG_TERMINATOR = 0xffffffff;\r\n\r\n\r\n    /** @internal */\r\n    private static _btTempVector30: number;\r\n    /** @internal */\r\n    private static _btTempVector31: number;\r\n    /** @internal */\r\n    private static _btTempQuaternion0: number;\r\n    /** @internal */\r\n    private static _btTempQuaternion1: number;\r\n    /** @internal */\r\n    private static _btTempTransform0: number;\r\n    /** @internal */\r\n    private static _btTempTransform1: number;\r\n    /** @internal */\r\n    private static _tempVector30: Vector3;\r\n\r\n    static init(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        btPhysicsManager._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n        btPhysicsManager._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n        btPhysicsManager._btTempQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n        btPhysicsManager._btTempQuaternion1 = bt.btQuaternion_create(0, 0, 0, 1);\r\n        btPhysicsManager._btTempTransform0 = bt.btTransform_create();\r\n        btPhysicsManager._btTempTransform1 = bt.btTransform_create();\r\n        btPhysicsManager._tempVector30 = new Vector3();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    static _convertToBulletVec3(lVector: Vector3, out: number): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btVector3_setValue(out, lVector.x, lVector.y, lVector.z);\r\n    }\r\n\r\n    /**物理引擎在一帧中用于补偿减速的最大次数：模拟器每帧允许的最大模拟次数，如果引擎运行缓慢,可能需要增加该次数，否则模拟器会丢失“时间\",引擎间隔时间小于maxSubSteps*fixedTimeStep非常重要。*/\r\n    public maxSubSteps = 1;\r\n    /**物理模拟器帧的间隔时间:通过减少fixedTimeStep可增加模拟精度，默认是1.0 / 60.0。*/\r\n    public fixedTimeStep = 1.0 / 60.0;\r\n    /**delta */\r\n    public dt = 1 / 60;\r\n    /**@internal */\r\n    private _bt;\r\n    //Physcics World Params\r\n    /** @internal */\r\n    private _btDiscreteDynamicsWorld: number;\r\n    /** @internal */\r\n    private _btCollisionWorld: number;\r\n    /** @internal */\r\n    protected _btDispatcher: number;\r\n    /** @internal */\r\n    private _btCollisionConfiguration: number;\r\n    /** @internal */\r\n    private _btBroadphase: number;\r\n    /** @internal */\r\n    _btSolverInfo: number;\r\n    /** @internal */\r\n    private _btDispatchInfo: number;\r\n    /** @internal */\r\n    _gravity = new Vector3(0, -10, 0);\r\n\r\n    //Ray cast/Shape Cast\r\n    /** @internal */\r\n    private _btClosestRayResultCallback: number;\r\n    /** @internal */\r\n    private _btAllHitsRayResultCallback: number;\r\n    /** @internal */\r\n    private _btClosestConvexResultCallback: number;\r\n    /** @internal */\r\n    private _btAllConvexResultCallback: number;\r\n    /** @internal */\r\n    private _btVector3Zero: number;\r\n    /** @internal */\r\n    private _btDefaultQuaternion: number;\r\n\r\n\r\n    //Simulate\r\n    /**@internal*/\r\n    _updatedRigidbodies = 0;\r\n    protected _updateCount = 0;\r\n    /** @internal */\r\n    protected _previousFrameCollisions: Collision[] = [];\r\n    /** @internal */\r\n    protected _currentFrameCollisions: Collision[] = [];\r\n    /** @internal */\r\n    protected _collisionsUtils = new CollisionTool();\r\n\r\n    //Joint\r\n    /** @internal */\r\n    private _currentConstraint: { [key: number]: btJoint } = {};\r\n\r\n    //collider\r\n    /** @internal */\r\n    _physicsUpdateList = new PhysicsUpdateList();\r\n    _characters: btCharacterCollider[] = [];\r\n\r\n    // capable map\r\n    protected _physicsEngineCapableMap: Map<any, any>;\r\n\r\n    constructor(physicsSettings: PhysicsSettings) {\r\n        let bt = this._bt = btPhysicsCreateUtil._bt;\r\n        //Physcics World create\r\n        this.maxSubSteps = physicsSettings.maxSubSteps;\r\n        this.fixedTimeStep = physicsSettings.fixedTimeStep;\r\n\r\n        this._btCollisionConfiguration = bt.btDefaultCollisionConfiguration_create();\r\n        this._btDispatcher = bt.btCollisionDispatcher_create(this._btCollisionConfiguration);\r\n        this._btBroadphase = bt.btDbvtBroadphase_create();\r\n        bt.btOverlappingPairCache_setInternalGhostPairCallback(bt.btDbvtBroadphase_getOverlappingPairCache(this._btBroadphase), bt.btGhostPairCallback_create());//this allows characters to have proper physics behavior\r\n\r\n        var conFlags = physicsSettings.flags;\r\n        if (conFlags & btPhysicsManager.PHYSICSENGINEFLAGS_COLLISIONSONLY) {\r\n            this._btCollisionWorld = new bt.btCollisionWorld(this._btDispatcher, this._btBroadphase, this._btCollisionConfiguration);\r\n        } else if (conFlags & btPhysicsManager.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT) {\r\n            throw \"PhysicsSimulation:SoftBody processing is not yet available\";\r\n        } else {\r\n            var solver: number = bt.btSequentialImpulseConstraintSolver_create();\r\n            this._btDiscreteDynamicsWorld = bt.btDiscreteDynamicsWorld_create(this._btDispatcher, this._btBroadphase, solver, this._btCollisionConfiguration);\r\n            this._btCollisionWorld = this._btDiscreteDynamicsWorld;\r\n        }\r\n\r\n        if (this._btDiscreteDynamicsWorld) {\r\n            this._btSolverInfo = bt.btDynamicsWorld_getSolverInfo(this._btDiscreteDynamicsWorld); //we are required to keep this reference, or the GC will mess up\r\n            this._btDispatchInfo = bt.btCollisionWorld_getDispatchInfo(this._btDiscreteDynamicsWorld);\r\n        }\r\n\r\n        //Ray\r\n        this._btVector3Zero = bt.btVector3_create(0, 0, 0);\r\n        this._btDefaultQuaternion = bt.btQuaternion_create(0, 0, 0, -1);\r\n        this._btClosestRayResultCallback = bt.ClosestRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n        this._btAllHitsRayResultCallback = bt.AllHitsRayResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n        this._btClosestConvexResultCallback = bt.ClosestConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);\r\n        this._btAllConvexResultCallback = bt.AllConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero);//TODO:是否优化C++\r\n\r\n        bt.btGImpactCollisionAlgorithm_RegisterAlgorithm(this._btDispatcher);//注册算法\r\n        this.initPhysicsCapable();  // 初始化物理能力\r\n    }\r\n\r\n    //TODO\r\n    //  * @internal\r\n    //  */\r\n    //  get speculativeContactRestitution(): boolean {\r\n    //     if (!this._btDiscreteDynamicsWorld)\r\n    //         throw \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n    //     return ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld);\r\n    // }\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  */\r\n    // set speculativeContactRestitution(value: boolean) {\r\n    //     if (!this._btDiscreteDynamicsWorld)\r\n    //         throw \"Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n    //     ILaya3D.Physics3D._bullet.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld, value);\r\n    // }\r\n\r\n    //TODO\r\n    // /**\r\n    //  * 是否进行连续碰撞检测。\r\n    //  */\r\n    // get continuousCollisionDetection(): boolean {\r\n    //     return ILaya3D.Physics3D._bullet.btCollisionWorld_get_m_useContinuous(this._btDispatchInfo);\r\n    // }\r\n\r\n    // set continuousCollisionDetection(value: boolean) {\r\n    //     ILaya3D.Physics3D._bullet.btCollisionWorld_set_m_useContinuous(this._btDispatchInfo, value);\r\n    // }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    private _simulate(deltaTime: number): void {\r\n        this._updatedRigidbodies = 0;\r\n        this.dt = deltaTime;\r\n        var bt: any = this._bt;\r\n        if (this._btDiscreteDynamicsWorld)\r\n            bt.btDiscreteDynamicsWorld_stepSimulation(this._btDiscreteDynamicsWorld, deltaTime, this.maxSubSteps, this.fixedTimeStep);\r\n        else\r\n            bt.PerformDiscreteCollisionDetection(this._btCollisionWorld);\r\n\r\n        this._updateCount++;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _updatePhysicsTransformFromRender(): void {\r\n        var elements: any = this._physicsUpdateList.elements;\r\n        for (var i = 0, n = this._physicsUpdateList.length; i < n; i++) {\r\n            var physicCollider: btCollider = elements[i];\r\n            physicCollider._derivePhysicsTransformation(false);\r\n            physicCollider.inPhysicUpdateListIndex = -1;//置空索引\r\n        }\r\n        this._physicsUpdateList.length = 0;//清空物理更新队列\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _updateCollisions(): void {\r\n        this._collisionsUtils.recoverAllContactPointsPool();\r\n        var previous = this._currentFrameCollisions;\r\n        this._currentFrameCollisions = this._previousFrameCollisions;\r\n        this._currentFrameCollisions.length = 0;\r\n        this._previousFrameCollisions = previous;\r\n        var loopCount = this._updateCount;\r\n        var bt: any = this._bt;\r\n        var numManifolds: number = bt.btDispatcher_getNumManifolds(this._btDispatcher);\r\n        for (let i = 0; i < numManifolds; i++) {\r\n            var contactManifold: number = bt.btDispatcher_getManifoldByIndexInternal(this._btDispatcher, i);//1.可能同时返回A和B、B和A 2.可能同时返回A和B多次(可能和CCD有关)\r\n            var componentA: btCollider = btCollider._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody0(contactManifold))];\r\n            var componentB: btCollider = btCollider._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.btPersistentManifold_getBody1(contactManifold))];\r\n            if (componentA._id > componentB._id) {\r\n                //交换一下，保证A.id<b.id\r\n                let tt = componentA;\r\n                componentA = componentB;\r\n                componentB = tt;\r\n            }\r\n            var collision: Collision = null;\r\n            var isFirstCollision: boolean;//可能同时返回A和B多次,需要过滤\r\n            var contacts: ContactPoint[] = null;\r\n            var isTrigger = componentA._isTrigger || componentB._isTrigger;\r\n            if (isTrigger) {\r\n                //if (componentA.owner._getBit(NodeFlags.PROCESS_TRIGGERS) || componentB.owner._getBit(NodeFlags.PROCESS_TRIGGERS)) {\r\n                var numContacts: number = bt.btPersistentManifold_getNumContacts(contactManifold);\r\n                for (let j = 0; j < numContacts; j++) {\r\n                    var pt: number = bt.btPersistentManifold_getContactPoint(contactManifold, j);\r\n                    var distance: number = bt.btManifoldPoint_getDistance(pt);\r\n                    if (distance <= 0) {\r\n                        collision = this._collisionsUtils.getCollision(componentA, componentB);\r\n                        contacts = collision.contacts;\r\n                        isFirstCollision = collision._updateFrame !== loopCount;\r\n                        if (isFirstCollision) {\r\n                            collision._isTrigger = true;\r\n                            contacts.length = 0;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                //}\r\n                //} else if (componentA.owner._getBit(NodeFlags.PROCESS_COLLISIONS) || componentB.owner._getBit(NodeFlags.PROCESS_COLLISIONS)) {\r\n            } else {\r\n                if (componentA._enableProcessCollisions || componentB._enableProcessCollisions) {//例：A和B均为运动刚体或PhysicCollider\r\n                    numContacts = bt.btPersistentManifold_getNumContacts(contactManifold);\r\n                    for (let j = 0; j < numContacts; j++) {\r\n                        pt = bt.btPersistentManifold_getContactPoint(contactManifold, j);\r\n                        distance = bt.btManifoldPoint_getDistance(pt)\r\n                        if (distance <= 0) {\r\n                            var contactPoint = this._collisionsUtils.getContactPoints();\r\n                            contactPoint._colliderA = componentA;\r\n                            contactPoint._colliderB = componentB;\r\n                            contactPoint.distance = distance;\r\n                            var btNormal: number = bt.btManifoldPoint_get_m_normalWorldOnB(pt);\r\n                            var normal = contactPoint.normal;\r\n                            normal.x = bt.btVector3_x(btNormal);\r\n                            normal.y = bt.btVector3_y(btNormal);\r\n                            normal.z = bt.btVector3_z(btNormal);\r\n                            var btPostionA: number = bt.btManifoldPoint_get_m_positionWorldOnA(pt);\r\n                            var positionOnA = contactPoint.positionOnA;\r\n                            positionOnA.x = bt.btVector3_x(btPostionA);\r\n                            positionOnA.y = bt.btVector3_y(btPostionA);\r\n                            positionOnA.z = bt.btVector3_z(btPostionA);\r\n                            var btPostionB: number = bt.btManifoldPoint_get_m_positionWorldOnB(pt);\r\n                            var positionOnB = contactPoint.positionOnB;\r\n                            positionOnB.x = bt.btVector3_x(btPostionB);\r\n                            positionOnB.y = bt.btVector3_y(btPostionB);\r\n                            positionOnB.z = bt.btVector3_z(btPostionB);\r\n\r\n                            if (!collision) {\r\n                                collision = this._collisionsUtils.getCollision(componentA, componentB);\r\n                                contacts = collision.contacts;\r\n                                isFirstCollision = collision._updateFrame !== loopCount;\r\n                                if (isFirstCollision) {\r\n                                    collision._isTrigger = false;\r\n                                    contacts.length = 0;\r\n                                }\r\n                            }\r\n                            contacts.push(contactPoint);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (collision && isFirstCollision) {//isFirstCollision是因为可能有AB,AB,BA\r\n                this._currentFrameCollisions.push(collision);\r\n                collision._setUpdateFrame(loopCount);\r\n            }\r\n        }\r\n\r\n        // 角色的碰撞需要特殊处理一下。由于在角色流程中有可能已经解决了碰撞，导致发现不了碰撞，所以特殊处理\r\n        for (var i = 0, n = this._characters.length; i < n; i++) {\r\n            var character = this._characters[i];\r\n\r\n            //取出所有碰撞对象\r\n            character.getOverlappingObj(body => {\r\n                // 如果body也是角色则忽略，因为每个角色都会遍历到\r\n                if (body instanceof btCharacterCollider) return;\r\n                let compa = character;\r\n                let compb = body;\r\n                if (character._id > body._id) {\r\n                    compa = body as any;\r\n                    compb = character as any;\r\n                }\r\n                let collision = this._collisionsUtils.getCollision(compa, compb);\r\n                // a和b已经有碰撞了，则忽略\r\n                if (collision._updateFrame === loopCount) return;\r\n                let contacts = collision.contacts;\r\n                contacts.length = 1;\t// 反正是假的，只记录一个假的碰撞点\r\n                collision._setUpdateFrame(loopCount);\r\n                // 添加假的碰撞点\r\n                var contactPoint = this._collisionsUtils.getContactPoints();\r\n                contactPoint._colliderA = compa;\r\n                contactPoint._colliderB = compb;\r\n                contactPoint.distance = 0;\r\n                contacts[0] = contactPoint;\r\n                this._currentFrameCollisions.push(collision);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 这个只是给对象发送事件，不会挨个组件调用碰撞函数\r\n     * 组件要响应碰撞的话，要通过监听事件\r\n     */\r\n    dispatchCollideEvent(): void {\r\n        let loopCount = this._updateCount;\r\n        for (let i = 0, n = this._currentFrameCollisions.length; i < n; i++) {\r\n            let curFrameCol = this._currentFrameCollisions[i];\r\n            let colliderA = curFrameCol._colliderA as btCollider;\r\n            let colliderB = curFrameCol._colliderB as btCollider;\r\n            if (colliderA._destroyed || colliderB._destroyed)//前一个循环可能会销毁后面循环的同一物理组件\r\n                continue;\r\n            // TODO 下面是否正确。现在这个_enableProcessCollisions是kinematic的话，就是false，所以先改成&&\r\n            //if(!colliderA._enableProcessCollisions && colliderB._enableProcessCollisions) return;\t// 这个会导致角色和kinematic地板的碰撞不处理\r\n            let ownerA = colliderA.owner;\r\n            let ownerB = colliderB.owner;\r\n            if (loopCount - curFrameCol._lastUpdateFrame === 1) {// 上一帧有，这一帧还有,则是stay\r\n                if (curFrameCol._isTrigger) {\r\n                    ownerA.event(Event.TRIGGER_STAY, colliderB);\r\n                    ownerB.event(Event.TRIGGER_STAY, colliderA);\r\n                } else {\r\n                    curFrameCol.other = colliderB;\r\n                    ownerA.event(Event.COLLISION_STAY, curFrameCol);\r\n                    curFrameCol.other = colliderA;\r\n                    ownerB.event(Event.COLLISION_STAY, curFrameCol);\r\n                }\r\n            } else {\r\n                if (curFrameCol._isTrigger) {\r\n                    ownerA.event(Event.TRIGGER_ENTER, colliderB);\r\n                    ownerB.event(Event.TRIGGER_ENTER, colliderA);\r\n                } else {\r\n                    curFrameCol.other = colliderB;\r\n                    ownerA.event(Event.COLLISION_ENTER, curFrameCol);\r\n                    curFrameCol.other = colliderA;\r\n                    ownerB.event(Event.COLLISION_ENTER, curFrameCol);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0, n = this._previousFrameCollisions.length; i < n; i++) {\r\n            let preFrameCol = this._previousFrameCollisions[i];\r\n            let preColliderA = preFrameCol._colliderA as btCollider;\r\n            let preColliderB = preFrameCol._colliderB as btCollider;\r\n            if (preColliderA._destroyed || preColliderB._destroyed)\r\n                continue;\r\n            let ownerA = preColliderA.owner;\r\n            let ownerB = preColliderB.owner;\r\n\r\n            if (loopCount - preFrameCol._updateFrame === 1) {\r\n                this._collisionsUtils.recoverCollision(preFrameCol);//回收collision对象\r\n                if (preFrameCol._isTrigger) {\r\n                    ownerA.event(Event.TRIGGER_EXIT, preColliderB);\r\n                    ownerB.event(Event.TRIGGER_EXIT, preColliderA);\r\n                } else {\r\n                    preFrameCol.other = preColliderB;\r\n                    ownerA.event(Event.COLLISION_EXIT, preFrameCol);\r\n                    preFrameCol.other = preColliderA;\r\n                    ownerB.event(Event.COLLISION_EXIT, preFrameCol);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let id in this._currentConstraint) {\r\n            // 检查所有的约束\r\n            let constraintObj = this._currentConstraint[id] as btJoint;\r\n            // TODO 这个只要发一次就行\r\n            if (constraintObj._isBreakConstrained()) {\r\n                let bodya = constraintObj.owner;\r\n                let bodyb = constraintObj._connectOwner;\r\n                bodya.event(Event.JOINT_BREAK);\r\n                bodyb.event(Event.JOINT_BREAK);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    _updateCharacters(): void {\r\n        var bt: any = this._bt;\r\n        for (var i = 0, n = this._characters.length; i < n; i++) {\r\n            var character = this._characters[i];\r\n            //TODO 临时加一个0.04，对一个人来说0.04的margin太大了，足以把脚陷入地下，所以先加回来\r\n            character._updateTransformComponent(bt.btCollisionObject_getWorldTransform(character._btCollider), false, 0.04);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * debugger Function\r\n     * @param value \r\n     */\r\n    enableDebugDrawer(value: boolean) {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btDynamicsWorld_enableDebugDrawer(this._btDiscreteDynamicsWorld, value);\r\n    }\r\n\r\n    getPhysicsCapable(value: EPhysicsCapable): boolean {\r\n        return this._physicsEngineCapableMap.get(value);\r\n    }\r\n\r\n    initPhysicsCapable(): void {\r\n        this._physicsEngineCapableMap = new Map();\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_Gravity, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_StaticCollider, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_DynamicCollider, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CharacterCollider, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_BoxColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_SphereColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CapsuleColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CylinderColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_ConeColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_MeshColliderShape, false);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CompoundColliderShape, false);\r\n    }\r\n\r\n    /**\r\n     * gravity\r\n     * @param gravity \r\n     */\r\n    setGravity(gravity: Vector3): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        gravity.cloneTo(this._gravity);\r\n        var bt = this._bt;\r\n        var btGravity: number = btPhysicsManager._btTempVector30;\r\n        bt.btVector3_setValue(btGravity, gravity.x, gravity.y, gravity.z);//TODO:是否先get省一个变量\r\n        bt.btDiscreteDynamicsWorld_setGravity(this._btDiscreteDynamicsWorld, btGravity);\r\n    }\r\n\r\n\r\n    addCollider(collider: ICollider): void {\r\n        let btcollider = collider as btCollider;\r\n        btcollider._derivePhysicsTransformation(true);\r\n        switch (btcollider._type) {\r\n            case btColliderType.StaticCollider:\r\n                this._bt.btCollisionWorld_addCollisionObject(this._btCollisionWorld, btcollider._btCollider, btcollider._collisionGroup, btcollider._canCollideWith);\r\n                break;\r\n            case btColliderType.RigidbodyCollider:\r\n                this._addRigidBody(btcollider);\r\n                break;\r\n            case btColliderType.CharactorCollider:\r\n                this._addCharacter(btcollider as btCharacterCollider);\r\n                //TODO:\r\n                break;\r\n        }\r\n        btcollider._isSimulate = true;\r\n\r\n    }\r\n\r\n    removeCollider(collider: ICollider): void {\r\n        let btcollider = collider as btCollider;\r\n        if (btcollider.inPhysicUpdateListIndex !== -1)\r\n            this._physicsUpdateList.remove(btcollider);\r\n        switch (btcollider._type) {\r\n            case btColliderType.StaticCollider:\r\n                this._bt.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, btcollider._btCollider);\r\n                break;\r\n            case btColliderType.RigidbodyCollider:\r\n                this._removeRigidBody(btcollider);\r\n                break;\r\n            case btColliderType.CharactorCollider:\r\n                //TODO:\r\n                this._removeCharacter(btcollider as btCharacterCollider);\r\n                break;\r\n        }\r\n        btcollider._isSimulate = false;\r\n    }\r\n\r\n    addJoint(joint: btJoint) {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        // this._nativeDiscreteDynamicsWorld.addConstraint(constraint._nativeConstraint, disableCollisionsBetweenLinkedBodies);\r\n        this._bt.btCollisionWorld_addConstraint(this._btDiscreteDynamicsWorld, joint._btJoint, joint._disableCollisionsBetweenLinkedBodies);\r\n        this._currentConstraint[joint._id] = joint;\r\n    }\r\n\r\n    removeJoint(joint: btJoint) {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        // this._nativeDiscreteDynamicsWorld.removeConstraint(constraint._nativeConstraint);\r\n        this._bt.btCollisionWorld_removeConstraint(this._btDiscreteDynamicsWorld, joint._btJoint);\r\n        delete this._currentConstraint[joint._id];\r\n    }\r\n\r\n    update(elapsedTime: number): void {\r\n        this._updatePhysicsTransformFromRender();\r\n        btCollider._addUpdateList = false;//物理模拟器会触发_updateTransformComponent函数,不加入更新队列\r\n        //simulate physics\r\n        this._simulate(elapsedTime);\r\n        //update character sprite3D transforms from physics engine simulation\r\n        this._updateCharacters();\r\n        btCollider._addUpdateList = true;\r\n        //handle frame contacts\r\n        this._updateCollisions();\r\n        //send contact events\r\n        this.dispatchCollideEvent();\r\n    }\r\n\r\n    rayCast(ray: Ray, outHitResult: HitResult, distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n        var from = ray.origin;\r\n        var to = btPhysicsManager._tempVector30;\r\n        Vector3.normalize(ray.direction, to);\r\n        Vector3.scale(to, distance, to);\r\n        Vector3.add(from, to, to);\r\n\r\n        var bt: any = this._bt;\r\n        var rayResultCall: number = this._btClosestRayResultCallback;\r\n        var rayFrom = btPhysicsManager._btTempVector30;\r\n        var rayTo = btPhysicsManager._btTempVector31;\r\n        bt.btVector3_setValue(rayFrom, from.x, from.y, from.z);\r\n        bt.btVector3_setValue(rayTo, to.x, to.y, to.z);\r\n        bt.ClosestRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\r\n        bt.ClosestRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\r\n        bt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\r\n        bt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\r\n\r\n        bt.RayResultCallback_set_m_collisionObject(rayResultCall, null);//还原默认值\r\n        bt.RayResultCallback_set_m_closestHitFraction(rayResultCall, 1);//还原默认值\r\n        bt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);//TODO:out为空可优化,bullet内\r\n        if (bt.RayResultCallback_hasHit(rayResultCall)) {\r\n            if (outHitResult) {\r\n                outHitResult.succeeded = true;\r\n                outHitResult.collider = btCollider._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.RayResultCallback_get_m_collisionObject(rayResultCall))];\r\n                outHitResult.hitFraction = bt.RayResultCallback_get_m_closestHitFraction(rayResultCall);\r\n                var btPoint: number = bt.ClosestRayResultCallback_get_m_hitPointWorld(rayResultCall);\r\n                var point = outHitResult.point;\r\n                point.x = bt.btVector3_x(btPoint);\r\n                point.y = bt.btVector3_y(btPoint);\r\n                point.z = bt.btVector3_z(btPoint);\r\n                var btNormal: number = bt.ClosestRayResultCallback_get_m_hitNormalWorld(rayResultCall);\r\n                var normal = outHitResult.normal;\r\n                normal.x = bt.btVector3_x(btNormal);\r\n                normal.y = bt.btVector3_y(btNormal);\r\n                normal.z = bt.btVector3_z(btNormal);\r\n            }\r\n            return true;\r\n        } else {\r\n            if (outHitResult)\r\n                outHitResult.succeeded = false;\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    rayCastAll(ray: Ray, out: HitResult[], distance: number = 2147483647/*Int.MAX_VALUE*/, collisonGroup: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER, collisionMask: number = Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER): boolean {\r\n        var from = ray.origin;\r\n        var to = btPhysicsManager._tempVector30;\r\n        Vector3.normalize(ray.direction, to);\r\n        Vector3.scale(to, distance, to);\r\n        Vector3.add(from, to, to);\r\n        var bt: any = this._bt;\r\n        var rayResultCall: number = this._btAllHitsRayResultCallback;\r\n        var rayFrom: number = btPhysicsManager._btTempVector30;\r\n        var rayTo: number = btPhysicsManager._btTempVector31;\r\n\r\n        out.length = 0;\r\n        bt.btVector3_setValue(rayFrom, from.x, from.y, from.z);\r\n        bt.btVector3_setValue(rayTo, to.x, to.y, to.z);\r\n        bt.AllHitsRayResultCallback_set_m_rayFromWorld(rayResultCall, rayFrom);\r\n        bt.AllHitsRayResultCallback_set_m_rayToWorld(rayResultCall, rayTo);\r\n        bt.RayResultCallback_set_m_collisionFilterGroup(rayResultCall, collisonGroup);\r\n        bt.RayResultCallback_set_m_collisionFilterMask(rayResultCall, collisionMask);\r\n\r\n        //rayResultCall.set_m_collisionObject(null);//还原默认值\r\n        //rayResultCall.set_m_closestHitFraction(1);//还原默认值\r\n        var collisionObjects: number = bt.AllHitsRayResultCallback_get_m_collisionObjects(rayResultCall);\r\n        var btPoints: number = bt.AllHitsRayResultCallback_get_m_hitPointWorld(rayResultCall);\r\n        var btNormals: number = bt.AllHitsRayResultCallback_get_m_hitNormalWorld(rayResultCall);\r\n        var btFractions: number = bt.AllHitsRayResultCallback_get_m_hitFractions(rayResultCall);\r\n        bt.tBtCollisionObjectArray_clear(collisionObjects);//清空检测队列\r\n        bt.tVector3Array_clear(btPoints);\r\n        bt.tVector3Array_clear(btNormals);\r\n        bt.tScalarArray_clear(btFractions);\r\n        bt.btCollisionWorld_rayTest(this._btCollisionWorld, rayFrom, rayTo, rayResultCall);\r\n        var count: number = bt.tBtCollisionObjectArray_size(collisionObjects);\r\n        if (count > 0) {\r\n            this._collisionsUtils.recoverAllHitResultsPool();\r\n            for (var i = 0; i < count; i++) {\r\n                var hitResult = this._collisionsUtils.getHitResult();\r\n                out.push(hitResult);\r\n                hitResult.succeeded = true;\r\n                hitResult.collider = btCollider._physicObjectsMap[bt.btCollisionObject_getUserIndex(bt.tBtCollisionObjectArray_at(collisionObjects, i))];\r\n                hitResult.hitFraction = bt.tScalarArray_at(btFractions, i);\r\n                var btPoint: number = bt.tVector3Array_at(btPoints, i);//取出后需要立即赋值,防止取出法线时被覆盖\r\n                var pointE = hitResult.point;\r\n                pointE.x = bt.btVector3_x(btPoint);\r\n                pointE.y = bt.btVector3_y(btPoint);\r\n                pointE.z = bt.btVector3_z(btPoint);\r\n                var btNormal: number = bt.tVector3Array_at(btNormals, i);\r\n                var normal = hitResult.normal;\r\n                normal.x = bt.btVector3_x(btNormal);\r\n                normal.y = bt.btVector3_y(btNormal);\r\n                normal.z = bt.btVector3_z(btNormal);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        var bt = this._bt;\r\n        if (this._btDiscreteDynamicsWorld) {\r\n            bt.btCollisionWorld_destroy(this._btDiscreteDynamicsWorld);\r\n            this._btDiscreteDynamicsWorld = null;\r\n        } else {\r\n            bt.btCollisionWorld_destroy(this._btCollisionWorld);\r\n            this._btCollisionWorld = null;\r\n        }\r\n        bt.btDbvtBroadphase_destroy(this._btBroadphase);\r\n        this._btBroadphase = null;\r\n        bt.btCollisionDispatcher_destroy(this._btDispatcher);\r\n        this._btDispatcher = null;\r\n        bt.btDefaultCollisionConfiguration_destroy(this._btCollisionConfiguration);\r\n        this._btCollisionConfiguration = null;\r\n        this._physicsEngineCapableMap = null;\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    private _addRigidBody(rigidBody: btCollider): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        this._bt.btDiscreteDynamicsWorld_addRigidBody(this._btCollisionWorld, rigidBody._btCollider, rigidBody._collisionGroup, rigidBody._canCollideWith);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _removeRigidBody(rigidBody: btCollider): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        this._bt.btDiscreteDynamicsWorld_removeRigidBody(this._btCollisionWorld, rigidBody._btCollider);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addCharacter(character: btCharacterCollider): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n\r\n        this._bt.btCollisionWorld_addCollisionObject(this._btCollisionWorld, character._btCollider, character._collisionGroup, character._canCollideWith);\r\n        this._bt.btDynamicsWorld_addAction(this._btCollisionWorld, character._btKinematicCharacter);\r\n\r\n        var characters: btCharacterCollider[] = this._characters;\r\n        characters.push(character);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _removeCharacter(character: btCharacterCollider): void {\r\n        if (!this._btDiscreteDynamicsWorld)\r\n            throw \"Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly\";\r\n        this._bt.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, character._btCollider);\r\n        this._bt.btDynamicsWorld_removeAction(this._btCollisionWorld, character._btKinematicCharacter);\r\n        var characters: btCharacterCollider[] = this._characters;\r\n        characters.splice(characters.indexOf(character), 1);\r\n    }\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  */\r\n    // private addVehicle(v: RaycastVehicle) {\r\n    //     let bt: any = ILaya3D.Physics3D._bullet;\r\n    //     bt.btDynamicsWorld_addAction(this._btDiscreteDynamicsWorld, v.btVehiclePtr);\r\n    // }\r\n\r\n    // /**\r\n    //  * @internal\r\n    //  */\r\n    // private removeVehicle(v: RaycastVehicle) {\r\n    //     let bt: any = ILaya3D.Physics3D._bullet;\r\n    //     bt.btDynamicsWorld_removeAction(v.btVehiclePtr);\r\n    // }\r\n\r\n}","import { Transform3D } from \"../../../d3/core/Transform3D\";\r\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ICollider } from \"../../interface/ICollider\";\r\nimport { btColliderShape } from \"../Shape/btColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { Sprite3D } from \"../../../d3/core/Sprite3D\";\r\n\r\nexport enum btColliderType {\r\n    RigidbodyCollider,\r\n    CharactorCollider,\r\n    StaticCollider\r\n}\r\n\r\nexport class btCollider implements ICollider {\r\n    static _colliderID: number = 0;\r\n    static _addUpdateList: boolean = true;\r\n\r\n    /*\r\n     * 刚体类型_静态。\r\n     * 设定为永远不会移动刚体,引擎也不会自动更新。\r\n     * 如果你打算移动物理,建议使用TYPE_KINEMATIC。\r\n     */\r\n    static TYPE_STATIC = 0;\r\n    /*\r\n     * 刚体类型_动态。\r\n     * 可以通过forces和impulsesy移动刚体,并且不需要修改移动转换。\r\n     */\r\n    static TYPE_DYNAMIC = 1;\r\n    /*\r\n     * 刚体类型_运动。\r\n     * 可以移动刚体,物理引擎会自动处理动态交互。\r\n     * 注意：和静态或其他类型刚体不会产生动态交互。\r\n     */\r\n    static TYPE_KINEMATIC = 2;\r\n\r\n    /** @internal */\r\n    static _physicObjectsMap: { [key: number]: btCollider } = {};\r\n\r\n    protected static _btVector30: number;\r\n    /** @internal */\r\n    protected static _btQuaternion0: number;\r\n    /** @internal */\r\n    protected static _tempVector30: Vector3;\r\n    /** @internal */\r\n    protected static _tempQuaternion0: Quaternion;\r\n    /** @internal */\r\n    protected static _tempQuaternion1: Quaternion;\r\n    /** @internal */\r\n    protected static _tempMatrix4x40: Matrix4x4;\r\n\r\n    _btCollider: any;\r\n\r\n    _btColliderShape: btColliderShape;\r\n\r\n    _collisionGroup: number;\r\n\r\n    _canCollideWith: number;\r\n\r\n    _physicsManager: btPhysicsManager;\r\n\r\n    _isSimulate: boolean = false;//是否已经生效\r\n\r\n    _type: btColliderType;\r\n\r\n    //update list index\r\n    inPhysicUpdateListIndex: number = -1;\r\n\r\n    _id: number;\r\n\r\n    /**触发器 */\r\n    _isTrigger: boolean;\r\n\r\n    _enableProcessCollisions: boolean;\r\n\r\n    _destroyed: boolean = false;\r\n\r\n    owner: Sprite3D;\r\n\r\n    _transform: Transform3D;\r\n\r\n    /**@internal */\r\n    componentEnable: boolean;\r\n    /** @internal */\r\n    protected _restitution = 0.0;\r\n    /** @internal */\r\n    protected _friction = 0.5;\r\n    /** @internal */\r\n    protected _rollingFriction = 0.0;\r\n\r\n    /** @internal */\r\n    protected _transformFlag = 2147483647 /*int.MAX_VALUE*/;\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    static __init__(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        btCollider._btVector30 = bt.btVector3_create(0, 0, 0);\r\n        btCollider._btQuaternion0 = bt.btQuaternion_create(0, 0, 0, 1);\r\n        btCollider._tempVector30 = new Vector3();\r\n        btCollider._tempQuaternion0 = new Quaternion();\r\n        btCollider._tempQuaternion1 = new Quaternion();\r\n        btCollider._tempMatrix4x40 = new Matrix4x4();\r\n    }\r\n\r\n    constructor(physicsManager: btPhysicsManager) {\r\n        this._collisionGroup = btPhysicsManager.COLLISIONFILTERGROUP_DEFAULTFILTER;\r\n        this._canCollideWith = btPhysicsManager.COLLISIONFILTERGROUP_ALLFILTER;\r\n        this._physicsManager = physicsManager;\r\n        this._id = btCollider._colliderID++;\r\n        this._isTrigger = false;\r\n        this._enableProcessCollisions = false;\r\n        btCollider._physicObjectsMap[this._id] = this;\r\n        this._type = this.getColliderType();\r\n    }\r\n\r\n    getCapable(value: number): boolean {\r\n        return null;\r\n    }\r\n\r\n    setOwner(node: Sprite3D): void {\r\n        this.owner = node;\r\n        this._transform = node.transform;\r\n        this._initCollider();\r\n    }\r\n\r\n    setCollisionGroup(value: number) {\r\n        if (value != this._collisionGroup) {\r\n            this._collisionGroup = value;\r\n            this._physicsManager.removeCollider(this);\r\n            this._physicsManager.addCollider(this);\r\n        }\r\n    }\r\n\r\n    setCanCollideWith(value: number) {\r\n        if (value != this._canCollideWith) {\r\n            this._canCollideWith = value;\r\n            this._physicsManager.removeCollider(this);\r\n            this._physicsManager.addCollider(this);\r\n        }\r\n    }\r\n\r\n    protected _initCollider() {\r\n        this.setBounciness(this._restitution);\r\n        this.setfriction(this._friction);\r\n        this.setRollingFriction(this._friction);\r\n    }\r\n\r\n    protected getColliderType(): btColliderType {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onScaleChange(scale: Vector3): void {\r\n        this._btColliderShape.setWorldScale(scale);\r\n    }\r\n\r\n    protected _onShapeChange() {\r\n        var btColObj: any = this._btCollider;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\r\n\r\n        if ((flags & btPhysicsManager.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) > 0)\r\n            bt.btCollisionObject_setCollisionFlags(btColObj, flags ^ btPhysicsManager.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);\r\n    }\r\n\r\n    setColliderShape(shape: btColliderShape) {\r\n        shape._btCollider = this;\r\n        if (shape == this._btColliderShape||shape._btShape == null)\r\n            return;\r\n        var lastColliderShape: btColliderShape = this._btColliderShape;\r\n        this._btColliderShape = shape;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (shape) {\r\n            if (this._btCollider) {\r\n                bt.btCollisionObject_setCollisionShape(this._btCollider, shape._btShape);\r\n                let simulate = this._isSimulate;\r\n                simulate && this._physicsManager.removeCollider(this);//修改shape必须把Collison从物理世界中移除再重新添加\r\n                this._onShapeChange();//修改shape会计算惯性\r\n                if ((simulate || !lastColliderShape) && this.componentEnable) {\r\n                    this._derivePhysicsTransformation(true);\r\n                    this._physicsManager.addCollider(this);\r\n                }\r\n            }\r\n        } else {\r\n            if (this._isSimulate) {\r\n                this._physicsManager.removeCollider(this);\r\n                this._isSimulate = false;\r\n            }\r\n        }\r\n        lastColliderShape && lastColliderShape.destroy();\r\n    }\r\n\r\n    destroy(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btCollisionObject_destroy(this._btCollider);\r\n        delete btCollider._physicObjectsMap[this._id];\r\n        this._destroyed = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * \t@internal\r\n     * 通过渲染矩阵更新物理矩阵。\r\n     */\r\n    _derivePhysicsTransformation(force: boolean): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btColliderObject: number = this._btCollider;\r\n        var btTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n        this._innerDerivePhysicsTransformation(btTransform, force);\r\n        bt.btCollisionObject_setWorldTransform(btColliderObject, btTransform);\r\n    }\r\n\r\n    /**\r\n     * \t@internal\r\n     *\t通过渲染矩阵更新物理矩阵。\r\n     */\r\n    _innerDerivePhysicsTransformation(physicTransformPtr: number, force: boolean): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var transform = this._transform;\r\n        let pxoff = 0;\r\n        let pyoff = 0;\r\n        let pzoff = 0;\r\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)) {\r\n            var shapeOffset = this._btColliderShape._localOffset;\r\n            var position = transform.position;\r\n            //position.x-=pxoff; position.y-=pyoff; position.z-=pzoff; 这里错了，-=会修改模型位置，\r\n            var btPosition = btCollider._btVector30;\r\n            if (shapeOffset.x !== 0 || shapeOffset.y !== 0 || shapeOffset.z !== 0) {\r\n                var physicPosition = btCollider._tempVector30;\r\n                var worldMat = transform.worldMatrix;\r\n                Vector3.transformCoordinate(shapeOffset, worldMat, physicPosition);\r\n                bt.btVector3_setValue(btPosition, physicPosition.x, physicPosition.y, physicPosition.z);\r\n            } else {\r\n                bt.btVector3_setValue(btPosition, position.x - pxoff, position.y - pyoff, position.z - pzoff);\r\n            }\r\n            bt.btTransform_setOrigin(physicTransformPtr, btPosition);\r\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION, false);\r\n        }\r\n\r\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)) {\r\n            //var shapeRotation = this._btColliderShape._localRotation;\r\n            var btRotation = btCollider._btQuaternion0;\r\n            var rotation = transform.rotation;\r\n            // if (shapeRotation.x !== 0 || shapeRotation.y !== 0 || shapeRotation.z !== 0 || shapeRotation.w !== 1) {\r\n            //     var physicRotation = btCollider._tempQuaternion0;\r\n            //     btCollider.physicQuaternionMultiply(rotation.x, rotation.y, rotation.z, rotation.w, shapeRotation, physicRotation);\r\n            //     bt.btQuaternion_setValue(btRotation, physicRotation.x, physicRotation.y, physicRotation.z, physicRotation.w);\r\n            // } else {\r\n            bt.btQuaternion_setValue(btRotation, rotation.x, rotation.y, rotation.z, rotation.w);\r\n            //}\r\n            bt.btTransform_setRotation(physicTransformPtr, btRotation);\r\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION, false);\r\n        }\r\n\r\n        if (force || this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)) {\r\n            this._onScaleChange(transform.getWorldLossyScale());\r\n            this._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 通过物理矩阵更新渲染矩阵。\r\n     */\r\n    _updateTransformComponent(physicsTransform: number, syncRot = true, addmargin = 0): void {\r\n        //TODO:Need Test!!! because _innerDerivePhysicsTransformation update position use worldMatrix,not(position rotation WorldLossyScale),maybe the center is no different.\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var colliderShape = this._btColliderShape;\r\n        var localOffset = colliderShape._localOffset;\r\n        //var localRotation = colliderShape._localRotation;\r\n\r\n        var transform = this._transform;\r\n        if (!transform) return;\r\n        var position = transform.position;\r\n        var rotation = transform.rotation;\r\n\r\n        var btPosition: number = bt.btTransform_getOrigin(physicsTransform);\r\n\r\n        if (syncRot) {\r\n            var btRotation: number = bt.btTransform_getRotation(physicsTransform);\r\n\r\n            var btRotX: number = bt.btQuaternion_x(btRotation);\r\n            var btRotY: number = bt.btQuaternion_y(btRotation);\r\n            var btRotZ: number = bt.btQuaternion_z(btRotation);\r\n            var btRotW: number = bt.btQuaternion_w(btRotation);\r\n\r\n            // if (localRotation.x !== 0 || localRotation.y !== 0 || localRotation.z !== 0 || localRotation.w !== 1) {\r\n            //     var invertShapeRotaion = btCollider._tempQuaternion0;\r\n            //     localRotation.invert(invertShapeRotaion);\r\n            //     btCollider.physicQuaternionMultiply(btRotX, btRotY, btRotZ, btRotW, invertShapeRotaion, rotation);\r\n            // } else {\r\n            rotation.x = btRotX;\r\n            rotation.y = btRotY;\r\n            rotation.z = btRotZ;\r\n            rotation.w = btRotW;\r\n            //}\r\n            transform.rotation = rotation;\r\n        }\r\n\r\n        if (localOffset.x !== 0 || localOffset.y !== 0 || localOffset.z !== 0) {\r\n            var btScale: number = bt.btCollisionShape_getLocalScaling(colliderShape._btShape);\r\n            var rotShapePosition = btCollider._tempVector30;\r\n            rotShapePosition.x = localOffset.x * bt.btVector3_x(btScale);\r\n            rotShapePosition.y = localOffset.y * bt.btVector3_y(btScale);\r\n            rotShapePosition.z = localOffset.z * bt.btVector3_z(btScale);\r\n            Vector3.transformQuat(rotShapePosition, rotation, rotShapePosition);\r\n            position.x = bt.btVector3_x(btPosition) - rotShapePosition.x;\r\n            //TODO 临时加一个0.04，对一个人来说0.04的margin太大了，足以把脚陷入地下，所以先加回来\r\n            position.y = bt.btVector3_y(btPosition) - rotShapePosition.y + addmargin;\r\n            position.z = bt.btVector3_z(btPosition) - rotShapePosition.z;\r\n        } else {\r\n            position.x = bt.btVector3_x(btPosition);\r\n            position.y = bt.btVector3_y(btPosition);\r\n            position.z = bt.btVector3_z(btPosition);\r\n        }\r\n\r\n        transform.position = position;\r\n        //transform.worldMatrix;  TODO\r\n        //this.owner.callaterChange && this.owner.callaterChange();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _getTransformFlag(type: number): boolean {\r\n        return (this._transformFlag & type) != 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _setTransformFlag(type: number, value: boolean): void {\r\n        if (value)\r\n            this._transformFlag |= type;\r\n        else\r\n            this._transformFlag &= ~type;\r\n    }\r\n\r\n    transformChanged(flag: number): void {\r\n        this._transformFlag = flag;\r\n        if (this.inPhysicUpdateListIndex == -1 && !this._enableProcessCollisions) {\r\n            this._physicsManager._physicsUpdateList.add(this);\r\n        }\r\n    }\r\n\r\n    setBounciness(value: number): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._restitution = value;\r\n        this._btCollider && bt.btCollisionObject_setRestitution(this._btCollider, value);\r\n    }\r\n\r\n    setfriction(value: number): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._friction = value;\r\n        this._btCollider && bt.btCollisionObject_setFriction(this._btCollider, value);\r\n    }\r\n\r\n    setRollingFriction(value: number): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._rollingFriction = value;\r\n        this._btCollider && bt.btCollisionObject_setRollingFriction(this._btCollider, value);\r\n    }\r\n}","import { btCollider, btColliderType } from \"./btCollider\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { ICharacterController } from \"../../interface/ICharacterController\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { ECharacterCapable } from \"../../physicsEnum/ECharacterCapable\";\r\nimport { btColliderShape } from \"../Shape/btColliderShape\";\r\nimport { PhysicsCombineMode } from \"../../../d3/physics/PhysicsColliderComponent\";\r\n\r\nexport class btCharacterCollider extends btCollider implements ICharacterController {\r\n\r\n\r\n    /** @internal */\r\n    private static _btTempVector30: number;\r\n    /**@internal */\r\n    _btKinematicCharacter: number = null;\r\n    /** @internal */\r\n    private _stepHeight: number = 0.1;\r\n    /** @internal */\r\n    private _upAxis = new Vector3(0, 1, 0);\r\n    /**@internal */\r\n    private _maxSlope = 90.0;\t// 45度容易在地形上卡住\r\n    /**@internal */\r\n    private _fallSpeed = 55.0;\r\n    /** @internal */\r\n    private _gravity = new Vector3(0, -9.8 * 3, 0);\r\n\r\n    /**@internal */\r\n    private _pushForce = 1;\r\n\r\n    /**@internal */\r\n    static _characterCapableMap: Map<any, any>;\r\n\r\n    /** @internal */\r\n    componentEnable: boolean;\r\n\r\n    static __init__(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        btCharacterCollider._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n        btCharacterCollider.initCapable();\r\n    }\r\n\r\n    getCapable(value: number): boolean {\r\n        return btCharacterCollider.getCharacterCapable(value);\r\n    }\r\n\r\n    constructor(physicsManager: btPhysicsManager) {\r\n        super(physicsManager);\r\n        this._enableProcessCollisions = true;  // not support trigger\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        var ghostObject: number = bt.btPairCachingGhostObject_create();\r\n        bt.btCollisionObject_setUserIndex(ghostObject, this._id);\r\n        bt.btCollisionObject_setCollisionFlags(ghostObject, btPhysicsManager.COLLISIONFLAGS_CHARACTER_OBJECT);\r\n        this._btCollider = ghostObject;\r\n    }\r\n    setShapelocalOffset(value: Vector3): void {\r\n        // bullet no shapeoffset,need set collidershape\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setSkinWidth?(width: number): void {\r\n        // bullet no skinwidth\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setPosition(value: Vector3): void {\r\n        // bullet no direct setposition\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setRadius?(value: number): void {\r\n        // bullet no radius,need set collidershape\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setHeight?(value: number): void {\r\n        // bullet no height,need set collidershape\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setminDistance(value: number): void {\r\n        // bullet no mindistance\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setDynamicFriction?(value: number): void {\r\n        // bullet no dynamicFriction\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setStaticFriction?(value: number): void {\r\n        // bullet no staticFriction\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setFrictionCombine?(value: PhysicsCombineMode): void {\r\n        // bullet no frictionCombine\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setBounceCombine?(value: PhysicsCombineMode): void {\r\n        // bullet no bounceCombine\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    static getCharacterCapable(value: ECharacterCapable): boolean {\r\n        return btCharacterCollider._characterCapableMap.get(value);\r\n    }\r\n\r\n    static initCapable(): void {\r\n        this._characterCapableMap = new Map();\r\n        // this._characterCapableMap.set(ECharacterCapable.Charcater_AllowSleep, false);\r\n        this._characterCapableMap.set(ECharacterCapable.Charcater_Gravity, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Charcater_CollisionGroup, true);\r\n        // this._characterCapableMap.set(ECharacterCapable.Charcater_Friction, true);\r\n        // this._characterCapableMap.set(ECharacterCapable.Charcater_Restitution, true);\r\n        // this._characterCapableMap.set(ECharacterCapable.Charcater_RollingFriction, true);\r\n        // this._characterCapableMap.set(ECharacterCapable.Charcater_AllowTrigger, false);\r\n        this._characterCapableMap.set(ECharacterCapable.Charcater_WorldPosition, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Charcater_Move, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Charcater_Jump, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Charcater_StepOffset, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_UpDirection, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_FallSpeed, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_SlopeLimit, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_PushForce, true);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_Radius, false);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_Height, false);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_offset, false);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_Skin, false);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_minDistance, false);\r\n        this._characterCapableMap.set(ECharacterCapable.Character_EventFilter, false);\r\n    }\r\n\r\n    protected getColliderType(): btColliderType {\r\n        return btColliderType.CharactorCollider;\r\n    }\r\n\r\n    protected _initCollider() {\r\n        super._initCollider();\r\n    }\r\n\r\n    protected _onShapeChange() {\r\n        super._onShapeChange();\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        if (this._btKinematicCharacter)\r\n            bt.btKinematicCharacterController_destroy(this._btKinematicCharacter);\r\n\r\n        var btUpAxis: number = btCharacterCollider._btTempVector30;\r\n        bt.btVector3_setValue(btUpAxis, this._upAxis.x, this._upAxis.y, this._upAxis.z);\r\n        this._btKinematicCharacter = bt.btKinematicCharacterController_create(this._btCollider, this._btColliderShape._btShape, this._stepHeight, btUpAxis);\r\n        //bt.btKinematicCharacterController_setUseGhostSweepTest(this._btKinematicCharacter, false);\r\n        this.setfallSpeed(this._fallSpeed);\r\n        this.setSlopeLimit(this._maxSlope);\r\n        this.setGravity(this._gravity);\r\n        bt.btKinematicCharacterController_setJumpAxis(this._btKinematicCharacter, 0, 1, 0);\r\n        this.setPushForce(this._pushForce);\r\n    }\r\n\r\n    setWorldPosition(value: Vector3): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btKinematicCharacterController_setCurrentPosition(this._btKinematicCharacter, value.x, value.y, value.z);\r\n    }\r\n\r\n    move(disp: Vector3): void {\r\n        var btMovement: number = btCharacterCollider._btVector30;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btVector3_setValue(btMovement, disp.x, disp.y, disp.z);\r\n        bt.btKinematicCharacterController_setWalkDirection(this._btKinematicCharacter, btMovement);\r\n    }\r\n\r\n    jump(velocity: Vector3): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        var btVelocity: number = btCharacterCollider._btVector30;\r\n        if (velocity) {\r\n            btPhysicsManager._convertToBulletVec3(velocity, btVelocity);\r\n            bt.btKinematicCharacterController_jump(this._btKinematicCharacter, btVelocity);\r\n        }\r\n    }\r\n\r\n    setStepOffset(offset: number): void {\r\n        this._stepHeight = offset;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btKinematicCharacterController_setStepHeight(this._btKinematicCharacter, offset);\r\n    }\r\n\r\n    setUpDirection(up: Vector3) {\r\n        up.cloneTo(this._upAxis);\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        var btUpAxis: number = btCharacterCollider._btTempVector30;\r\n        btPhysicsManager._convertToBulletVec3(up, btUpAxis);\r\n        bt.btKinematicCharacterController_setUp(this._btKinematicCharacter, btUpAxis);\r\n    }\r\n\r\n    getVerticalVel(): number {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        return bt.btKinematicCharacterController_getVerticalVelocity(this._btKinematicCharacter);\r\n    }\r\n\r\n    setSlopeLimit(slopeLimit: number): void {\r\n        this._maxSlope = slopeLimit;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btKinematicCharacterController_setMaxSlope(this._btKinematicCharacter, (slopeLimit / 180) * Math.PI);\r\n    }\r\n\r\n    setfallSpeed(value: number): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        this._fallSpeed = value;\r\n        bt.btKinematicCharacterController_setFallSpeed(this._btKinematicCharacter, value);\r\n    }\r\n\r\n    setPushForce(value: number): void {\r\n        this._pushForce = value;\r\n        if (this._btCollider && this._btKinematicCharacter) {\r\n            var bt = btPhysicsCreateUtil._bt;\r\n            bt.btKinematicCharacterController_setPushForce(this._btKinematicCharacter, value);\r\n        }\r\n    }\r\n\r\n    setGravity(value: Vector3): void {\r\n        this._gravity = value;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        var btGravity: number = btCharacterCollider._btTempVector30;\r\n        bt.btVector3_setValue(btGravity, value.x, value.y, value.z);\r\n        bt.btKinematicCharacterController_setGravity(this._btKinematicCharacter, btGravity);\r\n    }\r\n\r\n    /**\r\n     * 获得角色碰撞的对象\r\n     * @param cb \r\n     */\r\n    getOverlappingObj(cb: (body: btCollider) => void) {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        let ghost = this._btCollider;\r\n        let num = bt.btCollisionObject_getNumOverlappingObjects(ghost);\r\n        for (let i = 0; i < num; i++) {\r\n            let obj = bt.btCollisionObject_getOverlappingObject(ghost, i);\r\n            let comp = btCollider._physicObjectsMap[bt.btCollisionObject_getUserIndex(obj)] as btCharacterCollider;\r\n            if (comp) {\r\n                cb(comp);\r\n            }\r\n        }\r\n    }\r\n\r\n    setColliderShape(shape: btColliderShape): void {\r\n        super.setColliderShape(shape);\r\n    }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IColliderShape } from \"../../interface/Shape/IColliderShape\";\r\nimport { btCollider } from \"../Collider/btCollider\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\n\r\nexport class btColliderShape implements IColliderShape {\r\n\r\n    /** 形状方向_X轴正向 */\r\n    static SHAPEORIENTATION_UPX: number = 0;\r\n    /** 形状方向_Y轴正向 */\r\n    static SHAPEORIENTATION_UPY: number = 1;\r\n    /** 形状方向_Z轴正向 */\r\n    static SHAPEORIENTATION_UPZ: number = 2;\r\n\r\n    /** @internal */\r\n    static SHAPETYPES_BOX: number = 0;\r\n    /** @internal */\r\n    static SHAPETYPES_SPHERE: number = 1;\r\n    /** @internal */\r\n    static SHAPETYPES_CYLINDER: number = 2;\r\n    /** @internal */\r\n    static SHAPETYPES_CAPSULE: number = 3;\r\n    /** @internal */\r\n    static SHAPETYPES_CONVEXHULL: number = 4;\r\n    /** @internal */\r\n    static SHAPETYPES_COMPOUND: number = 5;\r\n    /** @internal */\r\n    static SHAPETYPES_STATICPLANE: number = 6;\r\n    /** @internal */\r\n    static SHAPETYPES_CONE: number = 7;\r\n    /** @internal */\r\n    static SHAPETYPES_HEIGHTFIELDTERRAIN: number = 8;\r\n\r\n    _type: number;\r\n\r\n    _btShape: any;\r\n\r\n    _btScale: any;\r\n\r\n    _localOffset: Vector3;\r\n\r\n    _worldScale: Vector3;\r\n\r\n    _btCollider: btCollider;//btActor\r\n\r\n    _destroyed: boolean;\r\n\r\n    constructor() {\r\n        this._localOffset = new Vector3(0, 0, 0);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btScale = bt.btVector3_create(1, 1, 1);\r\n        this._worldScale = new Vector3(-1, -1, -1);\r\n        this._destroyed = false;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createShape() {\r\n        throw \"override this function\"\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _getType(): number {\r\n        throw \"override this function\"\r\n    }\r\n\r\n    setOffset(value: Vector3): void {\r\n        value.cloneTo(this._localOffset);\r\n    }\r\n\r\n    setWorldScale(scale: Vector3): void {\r\n        if (this._worldScale.equal(scale))\r\n            return;\r\n        scale.cloneTo(this._worldScale);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btVector3_setValue(this._btScale, this._worldScale.x, this._worldScale.y, this._worldScale.z);\r\n        bt.btCollisionShape_setLocalScaling(this._btShape, this._btScale);\r\n    }\r\n\r\n    destroy(): void {\r\n        if (this._btShape && !this._destroyed) {\r\n            btPhysicsCreateUtil._bt.btCollisionShape_destroy(this._btShape);\r\n            this._btShape = null;\r\n            this._destroyed = true;\r\n        }\r\n    }\r\n\r\n}","import { Mesh } from \"../../../d3/resource/models/Mesh\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IMeshColliderShape } from \"../../interface/Shape/IMeshColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { btColliderShape } from \"./btColliderShape\";\r\n\r\n\r\nexport class btMeshColliderShape extends btColliderShape implements IMeshColliderShape {\r\n\t/**@internal */\r\n\tprivate _mesh: Mesh;\r\n\r\n\t/**@internal */\r\n\tprivate _physicMesh: any;\r\n\r\n\t/**@internal */\r\n\tstatic _btTempVector30: number;\r\n\t/**@internal */\r\n\tstatic _btTempVector31: number;\r\n\t/**@internal */\r\n\tstatic _btTempVector32: number;\r\n\r\n\r\n\tprivate _limitvertex = 10;\r\n\r\n\tprivate _convex: boolean;\r\n\r\n\r\n\t/**\r\n\t * 网格\r\n\t*/\r\n\tpublic get mesh(): Mesh {\r\n\t\treturn this._mesh;\r\n\t}\r\n\tpublic set mesh(value: Mesh) {\r\n\t\tif (this._mesh == value)\r\n\t\t\treturn;\r\n\t\tthis._mesh = value;\r\n\t\tif (this._convex) {\r\n\t\t\tthis._createConvexMeshGeometry();\r\n\t\t} else {\r\n\t\t\tthis._createTrianggleMeshGeometry();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tstatic __init__() {\r\n\t\tlet bt = btPhysicsCreateUtil._bt;\r\n\t\tbtMeshColliderShape._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n\t\tbtMeshColliderShape._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n\t\tbtMeshColliderShape._btTempVector32 = bt.btVector3_create(0, 0, 0);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tsetPhysicsMeshFromMesh(value: Mesh): void {\r\n\t\tthis._mesh = value;\r\n\t\tthis._convex = false;\r\n\t\tthis._createTrianggleMeshGeometry();\r\n\t}\r\n\r\n\tsetConvexMesh(value: Mesh): void {\r\n\t\tthis._mesh = value;\r\n\t\tthis._convex = true;\r\n\t\t//TODO\r\n\t\tthis._createConvexMeshGeometry();\r\n\t}\r\n\r\n\tsetLimitVertex(limit: number): void {\r\n\r\n\t\tthis._limitvertex = limit;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tget convex(): boolean {\r\n\t\treturn this._convex;\r\n\t}\r\n\r\n\tprivate _createPhysicsMeshFromMesh(value: Mesh): number {\r\n\t\tif (value._triangleMesh) {\r\n\t\t\treturn value._triangleMesh;\r\n\t\t}\r\n\t\tlet bt = btPhysicsCreateUtil._bt;\r\n\r\n\t\tvar triangleMesh: number = value._triangleMesh = bt.btTriangleMesh_create();//TODO:独立抽象btTriangleMesh,增加内存复用\r\n\t\tvar nativePositio0: number = btMeshColliderShape._btTempVector30;\r\n\t\tvar nativePositio1: number = btMeshColliderShape._btTempVector31;\r\n\t\tvar nativePositio2: number = btMeshColliderShape._btTempVector32;\r\n\r\n\t\tlet posArray = new Array<Vector3>();\r\n\t\tvalue.getPositions(posArray);\r\n\r\n\t\tvar indices: Uint16Array = value._indexBuffer.getData();//TODO:API修改问题\r\n\t\tfor (var i: number = 0, n: number = indices.length; i < n; i += 3) {\r\n\t\t\tvar position0: Vector3 = posArray[indices[i]];\r\n\t\t\tvar position1: Vector3 = posArray[indices[i + 1]];\r\n\t\t\tvar position2: Vector3 = posArray[indices[i + 2]];\r\n\t\t\tbtPhysicsManager._convertToBulletVec3(position0, nativePositio0);\r\n\t\t\tbtPhysicsManager._convertToBulletVec3(position1, nativePositio1);\r\n\t\t\tbtPhysicsManager._convertToBulletVec3(position2, nativePositio2);\r\n\t\t\tbt.btTriangleMesh_addTriangle(triangleMesh, nativePositio0, nativePositio1, nativePositio2, true);\r\n\t\t}\r\n\t\treturn triangleMesh;\r\n\t}\r\n\r\n\tprivate _createConvexMeshFromMesh(value: Mesh): number {\r\n\t\tif (!value._convexMesh) {\r\n\t\t\tlet bt = btPhysicsCreateUtil._bt;\r\n\t\t\tlet physicMesh = this._createPhysicsMeshFromMesh(this._mesh);\r\n\t\t\tvalue._convexMesh = bt.btShapeHull_create(physicMesh);\r\n\t\t}\r\n\t\treturn value._convexMesh;\r\n\t}\r\n\r\n\tprotected _createTrianggleMeshGeometry(): void {\r\n\t\tlet bt = btPhysicsCreateUtil._bt;\r\n\t\tif (this._btShape) {\r\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t}\r\n\t\tthis._physicMesh = this._createPhysicsMeshFromMesh(this._mesh);\r\n\t\tif (this._physicMesh) {\r\n\t\t\tthis._btShape = bt.btBvhTriangleMeshShape_create(this._physicMesh);\r\n\t\t\tif (this._btCollider) this._btCollider.setColliderShape(this);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _createConvexMeshGeometry(): void {\r\n\t\tlet bt = btPhysicsCreateUtil._bt;\r\n\t\tif (this._btShape) {\r\n\t\t\tbt.btCollisionShape_destroy(this._btShape);\r\n\t\t}\r\n\t\tlet convexMesh = this._createConvexMeshFromMesh(this._mesh);\r\n\t\tthis._btShape = bt.btConvexHullShape_create(convexMesh);\r\n\t\tif (this._btCollider) this._btCollider.setColliderShape(this);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tsetWorldScale(value: Vector3): void {\r\n\t\tif (this._btShape && this._btCollider) {\r\n\t\t\tlet bt = btPhysicsCreateUtil._bt;\r\n\t\t\tbt.btVector3_setValue(btMeshColliderShape._btTempVector30, value.x, value.y, value.z);\r\n\t\t\tbt.btCollisionShape_setLocalScaling(this._btShape, btMeshColliderShape._btTempVector30);\r\n\t\t\t// if (this._btCollider._btColliderShape && this._btCollider._enableProcessCollisions) {\r\n\t\t\t// \tbt.btGImpactShapeInterface_updateBound(this._btShape);//更新缩放后需要更新包围体,有性能损耗\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { PhysicsForceMode } from \"../../../d3/physics/PhysicsColliderComponent\";\r\nimport { MeshColliderShape } from \"../../../d3/physics/shape/MeshColliderShape\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IDynamicCollider } from \"../../interface/IDynamicCollider\";\r\nimport { EColliderCapable } from \"../../physicsEnum/EColliderCapable\";\r\nimport { btColliderShape } from \"../Shape/btColliderShape\";\r\nimport { btMeshColliderShape } from \"../Shape/btMeshColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { btCollider, btColliderType } from \"./btCollider\";\r\n\r\nexport class btRigidBodyCollider extends btCollider implements IDynamicCollider {\r\n    /** @internal */\r\n    static _BT_DISABLE_WORLD_GRAVITY = 1;\r\n    /** @internal */\r\n    static _BT_ENABLE_GYROPSCOPIC_FORCE = 2;\r\n    /** @internal */\r\n    private static _btTempVector30: number;\r\n    /** @internal */\r\n    private static _btTempVector31: number;\r\n    /** @internal */\r\n    private static _btVector3Zero: number;\r\n    /**@internal */\r\n    private static _btTransform0: number;\r\n    /** @internal */\r\n    private static _btInertia: number;\r\n    /** @internal */\r\n    private static _btImpulse: number;\r\n    /** @internal */\r\n    private static _btImpulseOffset: number;\r\n    /** @internal */\r\n    private static _btGravity: number;\r\n\r\n    /**@internal */\r\n    static _rigidBodyCapableMap: Map<any, any>;\r\n    /**\r\n    * @internal\r\n    */\r\n    static __init__(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        btRigidBodyCollider._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n        btRigidBodyCollider._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n        btRigidBodyCollider._btVector3Zero = bt.btVector3_create(0, 0, 0);\r\n        btRigidBodyCollider._btInertia = bt.btVector3_create(0, 0, 0);\r\n        btRigidBodyCollider._btImpulse = bt.btVector3_create(0, 0, 0);\r\n        btRigidBodyCollider._btImpulseOffset = bt.btVector3_create(0, 0, 0);\r\n        btRigidBodyCollider._btGravity = bt.btVector3_create(0, 0, 0);\r\n        btRigidBodyCollider._btTransform0 = bt.btTransform_create();\r\n        btRigidBodyCollider.initCapable();\r\n    }\r\n    /**@internal */\r\n    componentEnable: boolean;\r\n    /** @internal */\r\n    private _btLayaMotionState: number;\r\n    /** @internal */\r\n    private _isKinematic = false;\r\n    /** @internal */\r\n    private _mass = 1.0;\r\n    /** @internal */\r\n    private _gravity = new Vector3(0, -10, 0);\r\n    /** @internal */\r\n    private _angularDamping = 0.0;\r\n    /** @internal */\r\n    private _linearDamping = 0.0;\r\n    /** @internal */\r\n    private _overrideGravity = false;\r\n    /** @internal */\r\n    private _totalTorque = new Vector3(0, 0, 0);\r\n    /** @internal */\r\n    private _totalForce = new Vector3(0, 0, 0);\r\n    /** @internal */\r\n    private _linearVelocity = new Vector3();\r\n    /** @internal */\r\n    private _angularVelocity = new Vector3();\r\n    /** @internal */\r\n    private _linearFactor = new Vector3(1, 1, 1);\r\n    /** @internal */\r\n    private _angularFactor = new Vector3(1, 1, 1);\r\n    /** @internal */\r\n    private _detectCollisions = true;\r\n    /**@internal TODO*/\r\n    private _allowSleep: boolean = false;\r\n\r\n\r\n    constructor(manager: btPhysicsManager) {\r\n        super(manager);\r\n    }\r\n\r\n    getCapable(value: number): boolean {\r\n        return btRigidBodyCollider.getRigidBodyCapable(value);\r\n    }\r\n\r\n    static getRigidBodyCapable(value: EColliderCapable): boolean {\r\n        return this._rigidBodyCapableMap.get(value);\r\n    }\r\n\r\n    static initCapable(): void {\r\n        this._rigidBodyCapableMap = new Map();\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_AllowTrigger, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_CollisionGroup, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_Friction, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_Restitution, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_RollingFriction, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_DynamicFriction, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_StaticFriction, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_BounceCombine, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_FrictionCombine, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.Collider_EventFilter, false);\r\n\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_AllowSleep, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_Gravity, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_LinearDamp, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_AngularDamp, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_LinearVelocity, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_AngularVelocity, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_Mass, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_InertiaTensor, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_MassCenter, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_MaxAngularVelocity, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_MaxDepenetrationVelocity, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_SleepThreshold, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_SleepAngularVelocity, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_SolverIterations, false);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_AllowDetectionMode, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_AllowKinematic, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_LinearFactor, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_AngularFactor, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_ApplyForce, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_ClearForce, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_ApplyForceWithOffset, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_ApplyTorque, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_ApplyImpulse, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_ApplyTorqueImpulse, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_WorldPosition, true);\r\n        this._rigidBodyCapableMap.set(EColliderCapable.RigidBody_WorldOrientation, true);\r\n    }\r\n\r\n    setWorldPosition(value: Vector3): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btColliderObject = this._btCollider;\r\n        bt.btRigidBody_setCenterOfMassPos(btColliderObject, value.x, value.y, value.z);\r\n    }\r\n\r\n    setWorldRotation(value: Quaternion): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btColliderObject = this._btCollider;\r\n        bt.btRigidBody_setCenterOfMassOrientation(btColliderObject, value.x, value.y, value.z, value.w);\r\n    }\r\n\r\n    sleep(): void {\r\n        this._allowSleep = true;\r\n    }\r\n\r\n    protected getColliderType() {\r\n        return this._type = btColliderType.RigidbodyCollider;\r\n\r\n    }\r\n\r\n    /**\r\n    * 是否重载重力。\r\n    */\r\n    private _setoverrideGravity(value: boolean) {\r\n        this._overrideGravity = value;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider) {\r\n            var flag: number = bt.btRigidBody_getFlags(this._btCollider);\r\n            if (value) {\r\n                if ((flag & btRigidBodyCollider._BT_DISABLE_WORLD_GRAVITY) === 0)\r\n                    bt.btRigidBody_setFlags(this._btCollider, flag | btRigidBodyCollider._BT_DISABLE_WORLD_GRAVITY);\r\n            } else {\r\n                if ((flag & btRigidBodyCollider._BT_DISABLE_WORLD_GRAVITY) > 0)\r\n                    bt.btRigidBody_setFlags(this._btCollider, flag ^ btRigidBodyCollider._BT_DISABLE_WORLD_GRAVITY);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * @internal\r\n    */\r\n    private _updateMass(mass: number): void {\r\n        if (this._btCollider && this._btColliderShape && this._btColliderShape._btShape) {\r\n            let bt = btPhysicsCreateUtil._bt;\r\n            bt.btCollisionShape_calculateLocalInertia(this._btColliderShape._btShape, mass, btRigidBodyCollider._btInertia);\r\n            bt.btRigidBody_setMassProps(this._btCollider, mass, btRigidBodyCollider._btInertia);\r\n            bt.btRigidBody_updateInertiaTensor(this._btCollider); //this was the major headache when I had to debug Slider and Hinge constraint\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否处于睡眠状态。\r\n     */\r\n    private isSleeping(): boolean {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider)\r\n            return bt.btCollisionObject_getActivationState(this._btCollider) === btPhysicsManager.ACTIVATIONSTATE_ISLAND_SLEEPING;\r\n        return false;\r\n    }\r\n\r\n    protected _initCollider() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var motionState: number = bt.layaMotionState_create();\r\n        bt.layaMotionState_set_rigidBodyID(motionState, this._id);\r\n        this._btLayaMotionState = motionState;\r\n        var constructInfo: number = bt.btRigidBodyConstructionInfo_create(0.0, motionState, null, btRigidBodyCollider._btVector3Zero);\r\n        var btRigid: number = bt.btRigidBody_create(constructInfo);\r\n        bt.btCollisionObject_setUserIndex(btRigid, this._id);\r\n        this._btCollider = btRigid;\r\n        bt.btRigidBodyConstructionInfo_destroy(constructInfo);\r\n        super._initCollider();\r\n\r\n        this.setMass(this._mass);\r\n        this.setConstraints(this._linearFactor, this._angularFactor);\r\n        this.setLinearDamping(this._linearDamping);\r\n        this.setAngularDamping(this._angularDamping);\r\n        this.setIsKinematic(this._isKinematic);\r\n        this.setInertiaTensor(this._gravity);\r\n    }\r\n\r\n    protected _onShapeChange() {\r\n        super._onShapeChange();\r\n        if (this._mass <= 0) return;\r\n        if (this._btColliderShape instanceof btMeshColliderShape && !this._btColliderShape.convex) {\r\n            console.error(\"btRigidBodyCollider: TriangleMeshShap performance is poor, please use convex.\")\r\n        }\r\n        if (this._isKinematic) {\r\n            this._updateMass(0);\r\n        } else {\r\n            let bt = btPhysicsCreateUtil._bt;\r\n            bt.btRigidBody_setCenterOfMassTransform(this._btCollider, bt.btCollisionObject_getWorldTransform(this._btCollider));//修改Shape会影响坐标,需要更新插值坐标,否则物理引擎motionState.setWorldTrans数据为旧数据\r\n            this._updateMass(this._mass);\r\n        }\r\n    }\r\n\r\n    setLinearDamping(value: number): void {\r\n        this._linearDamping = value;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider)\r\n            bt.btRigidBody_setDamping(this._btCollider, value, this._angularDamping);\r\n    }\r\n\r\n    setAngularDamping(value: number): void {\r\n        this._angularDamping = value;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider)\r\n            bt.btRigidBody_setDamping(this._btCollider, this._linearDamping, value);\r\n    }\r\n\r\n    setLinearVelocity(value: Vector3): void {\r\n        this._linearVelocity = value;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider) {\r\n            var btValue: number = btRigidBodyCollider._btTempVector30;\r\n            btPhysicsManager._convertToBulletVec3(value, btValue);\r\n            (this.isSleeping()) && (this.wakeUp());//可能会因睡眠导致设置线速度无效\r\n            bt.btRigidBody_setLinearVelocity(this._btCollider, btValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置睡眠刚体线速度阈值\r\n     * @param value \r\n     */\r\n    setSleepLinearVelocity(value: Vector3): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btRigidBody_setSleepingThresholds(this._btCollider, value, bt.btRigidBody_getAngularSleepingThreshold(this._btCollider));\r\n    }\r\n\r\n    setAngularVelocity(value: Vector3): void {\r\n        this._angularVelocity = value;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider) {\r\n            var btValue: number = btRigidBodyCollider._btTempVector30;\r\n            btPhysicsManager._convertToBulletVec3(value, btValue);\r\n            (this.isSleeping()) && (this.wakeUp());//可能会因睡眠导致设置角速度无效\r\n            bt.btRigidBody_setAngularVelocity(this._btCollider, btValue);\r\n        }\r\n    }\r\n\r\n    setMass(value: number): void {\r\n        value = Math.max(value, 1e-07);//质量最小为1e-07\r\n        this._mass = value;\r\n        (this._isKinematic) || (this._updateMass(value));\r\n    }\r\n\r\n\r\n    setInertiaTensor(value: Vector3): void {\r\n        this._gravity = value;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btVector3_setValue(btRigidBodyCollider._btGravity, value.x, value.y, value.z);\r\n        bt.btRigidBody_setGravity(this._btCollider, btRigidBodyCollider._btGravity);\r\n        if (value.equal(this._physicsManager._gravity)) {\r\n            this._setoverrideGravity(false);\r\n        } else {\r\n            this._setoverrideGravity(true);\r\n        }\r\n\r\n    }\r\n\r\n    setCenterOfMass(value: Vector3) {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btColliderObject = this._btCollider;\r\n        bt.btRigidBody_setCenterOfMassPos(btColliderObject, value.x, value.y, value.z);\r\n    }\r\n\r\n    setMaxAngularVelocity(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    setMaxDepenetrationVelocity(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    //这里是bug把  类都不对\r\n    setSleepThreshold(value: number): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        //btRigidBody_getLinearSleepingThreshold\r\n        this._btCollider && bt.btRigidBody_setSleepingThresholds(this._btCollider, value, bt.btRigidBody_getAngularSleepingThreshold(this._btCollider));\r\n    }\r\n\r\n    setSleepAngularVelocity(value: number) {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btRigidBody_setSleepingThresholds(this._btCollider, bt.btRigidBody_getLinearSleepingThreshold(this._btCollider), value);\r\n    }\r\n\r\n\r\n    setSolverIterations(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    setCollisionDetectionMode(value: number): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var canInSimulation = this._isSimulate;\r\n        //如果动态改变只能重新添加。否则world不能正确记录动态物体\r\n        canInSimulation && this._physicsManager.removeCollider(this);\r\n        if (value & 3) {\r\n            this._isKinematic = true;\r\n            canInSimulation && this._updateMass(0)\r\n        } else {\r\n            canInSimulation && this._updateMass(this._mass);\r\n        }\r\n        bt.btCollisionObject_setCollisionFlags(this._btCollider, value);\r\n        canInSimulation && this._physicsManager.addCollider(this);\r\n    }\r\n\r\n    setIsKinematic(value: boolean): void {\r\n        this._isKinematic = value;\r\n        //this._controlBySimulation = !value;//isKinematic not controll by Simulation\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        let oldSimulate = this._isSimulate;\r\n        oldSimulate && this._physicsManager.removeCollider(this);\r\n        var natColObj: any = this._btCollider;\r\n        var flags: number = bt.btCollisionObject_getCollisionFlags(natColObj);\r\n        if (value) {\r\n            flags = flags | btPhysicsManager.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n            bt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\r\n            // TODO kinematic直接禁止睡眠有问题，例如如果实际不动的话，会导致与他接触的物体都无法进入睡眠状态\r\n            bt.btCollisionObject_forceActivationState(this._btCollider, btPhysicsManager.ACTIVATIONSTATE_DISABLE_DEACTIVATION);//触发器开启主动检测,并防止睡眠\r\n            this._enableProcessCollisions = false;\r\n            this._updateMass(0);//必须设置Mass为0来保证InverMass为0\r\n        } else {\r\n            if ((flags & btPhysicsManager.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\r\n                flags = flags ^ btPhysicsManager.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n            bt.btCollisionObject_setCollisionFlags(natColObj, flags);//加入场景前必须配置flag,加入后无效\r\n            bt.btCollisionObject_setActivationState(this._btCollider, btPhysicsManager.ACTIVATIONSTATE_ACTIVE_TAG);\r\n            this._enableProcessCollisions = true;\r\n            this._updateMass(this._mass);\r\n        }\r\n\r\n        var btZero: number = btRigidBodyCollider._btVector3Zero;\r\n        bt.btCollisionObject_setInterpolationLinearVelocity(natColObj, btZero);\r\n        bt.btRigidBody_setLinearVelocity(natColObj, btZero);\r\n        bt.btCollisionObject_setInterpolationAngularVelocity(natColObj, btZero);\r\n        bt.btRigidBody_setAngularVelocity(natColObj, btZero);\r\n\r\n        oldSimulate && this._physicsManager.addCollider(this);\r\n    }\r\n\r\n    setConstraints(linearFactor: Vector3, angularFactor: Vector3): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        //if (!linearFactor.equal(this._linearFactor)) {\r\n        linearFactor.cloneTo(linearFactor);\r\n        var btValue: number = btRigidBodyCollider._btTempVector30;\r\n        btPhysicsManager._convertToBulletVec3(linearFactor, btValue);\r\n        bt.btRigidBody_setLinearFactor(this._btCollider, btValue);\r\n        //}\r\n\r\n        //if (!angularFactor.equal(this._angularFactor)) {\r\n        angularFactor.cloneTo(this._angularFactor);\r\n        var btValue: number = btRigidBodyCollider._btTempVector30;\r\n        btPhysicsManager._convertToBulletVec3(angularFactor, btValue);\r\n        bt.btRigidBody_setAngularFactor(this._btCollider, btValue);\r\n        //}\r\n    }\r\n\r\n    setTrigger(value: boolean): void {\r\n        this._isTrigger = value;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider) {\r\n            var flags: number = bt.btCollisionObject_getCollisionFlags(this._btCollider);\r\n            if (value) {\r\n                if ((flags & btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE) === 0)\r\n                    bt.btCollisionObject_setCollisionFlags(this._btCollider, flags | btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n            } else {\r\n                if ((flags & btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE) !== 0)\r\n                    bt.btCollisionObject_setCollisionFlags(this._btCollider, flags ^ btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用作用力。\r\n     * @param\tforce 作用力。\r\n     * @param\tlocalOffset 偏移,如果为null则为中心点\r\n     */\r\n    private _applyForce(force: Vector3, localOffset: Vector3 = null): void {\r\n        if (this._btCollider == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btForce = btRigidBodyCollider._btTempVector30;\r\n        bt.btVector3_setValue(btForce, force.x, force.y, force.z);\r\n        this.wakeUp();\r\n        if (localOffset) {\r\n            var btOffset: number = btRigidBodyCollider._btTempVector31;\r\n            bt.btVector3_setValue(btOffset, localOffset.x, localOffset.y, localOffset.z);\r\n            bt.btRigidBody_applyForce(this._btCollider, btForce, btOffset);\r\n        } else {\r\n            bt.btRigidBody_applyCentralForce(this._btCollider, btForce);\r\n        }\r\n    }\r\n\r\n    /**\r\n   * 应用扭转力。\r\n   * @param\ttorque 扭转力。\r\n   */\r\n    private _applyTorque(torque: Vector3): void {\r\n        if (this._btCollider == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btTorque: number = btRigidBodyCollider._btTempVector30;\r\n        this.wakeUp();\r\n        bt.btVector3_setValue(btTorque, torque.x, torque.y, torque.z);\r\n        bt.btRigidBody_applyTorque(this._btCollider, btTorque);\r\n    }\r\n\r\n    /**\r\n     * 应用冲量。\r\n     * @param\timpulse 冲量。\r\n     * @param   localOffset 偏移,如果为null则为中心点。\r\n     */\r\n    private _applyImpulse(impulse: Vector3, localOffset: Vector3 = null): void {\r\n        if (this._btCollider == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btVector3_setValue(btRigidBodyCollider._btImpulse, impulse.x, impulse.y, impulse.z);\r\n        this.wakeUp();\r\n        if (localOffset) {\r\n            bt.btVector3_setValue(btRigidBodyCollider._btImpulseOffset, localOffset.x, localOffset.y, localOffset.z);\r\n            bt.btRigidBody_applyImpulse(this._btCollider, btRigidBodyCollider._btImpulse, btRigidBodyCollider._btImpulseOffset);\r\n        } else {\r\n            bt.btRigidBody_applyCentralImpulse(this._btCollider, btRigidBodyCollider._btImpulse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用扭转冲量。\r\n     * @param\ttorqueImpulse\r\n     */\r\n    private _applyTorqueImpulse(torqueImpulse: Vector3): void {\r\n        if (this._btCollider == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btTorqueImpulse: number = btRigidBodyCollider._btTempVector30;\r\n        this.wakeUp();\r\n        bt.btVector3_setValue(btTorqueImpulse, torqueImpulse.x, torqueImpulse.y, torqueImpulse.z);\r\n        bt.btRigidBody_applyTorqueImpulse(this._btCollider, btTorqueImpulse);\r\n    }\r\n\r\n    addForce(force: Vector3, mode: PhysicsForceMode, localOffset: Vector3): void {\r\n        switch (mode) {\r\n            case PhysicsForceMode.Force:\r\n                this._applyForce(force, localOffset);\r\n                break;\r\n            case PhysicsForceMode.Impulse:\r\n                this._applyImpulse(force, localOffset);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    addTorque(torque: Vector3, mode: PhysicsForceMode): void {\r\n        switch (mode) {\r\n            case PhysicsForceMode.Force:\r\n                this._applyTorque(torque);\r\n                break;\r\n            case PhysicsForceMode.Impulse:\r\n                this._applyTorqueImpulse(torque);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除应用到刚体上的所有力。\r\n     */\r\n    private clearForces(): void {\r\n        var rigidBody: number = this._btCollider;\r\n        if (rigidBody == null)\r\n            throw \"Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.\";\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btRigidBody_clearForces(rigidBody);\r\n        var btZero: number = btRigidBodyCollider._btVector3Zero;\r\n        bt.btCollisionObject_setInterpolationLinearVelocity(rigidBody, btZero);\r\n        bt.btRigidBody_setLinearVelocity(rigidBody, btZero);\r\n        bt.btCollisionObject_setInterpolationAngularVelocity(rigidBody, btZero);\r\n        bt.btRigidBody_setAngularVelocity(rigidBody, btZero);\r\n    }\r\n\r\n\r\n    wakeUp(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btCollider && (bt.btCollisionObject_activate(this._btCollider, false));\r\n    }\r\n\r\n    /**\r\n     * \t@internal\r\n     * 通过渲染矩阵更新物理矩阵。\r\n     */\r\n    _derivePhysicsTransformation(force: boolean): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btColliderObject = this._btCollider;\r\n        //btColliderObject 当前的trasform\r\n        var oriTransform: number = bt.btCollisionObject_getWorldTransform(btColliderObject);\r\n\r\n        // 临时transform\r\n        var transform = btRigidBodyCollider._btTransform0;//must use another transform\r\n\r\n        // transform = origTransform。 由于transform是公用的，下面的设置可能只是设置一部分，所以先完整拷贝一下当前的物理位置\r\n        bt.btTransform_equal(transform, oriTransform);\r\n        this._innerDerivePhysicsTransformation(transform, force);\r\n        bt.btRigidBody_setCenterOfMassTransform(btColliderObject, transform);//RigidBody use 'setCenterOfMassTransform' instead(influence interpolationWorldTransform and so on) ,or stepSimulation may return old transform because interpolation.\r\n    }\r\n\r\n    setColliderShape(shape: btColliderShape) {\r\n        if (shape instanceof MeshColliderShape) {\r\n            console.error(\"RigidBody3D is not support MeshColliderShape\");\r\n            shape = null;\r\n        }\r\n        super.setColliderShape(shape);\r\n    }\r\n\r\n    destroy(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btMotionState_destroy(this._btLayaMotionState);\r\n        super.destroy();\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IStaticCollider } from \"../../interface/IStaticCollider\";\r\nimport { EColliderCapable } from \"../../physicsEnum/EColliderCapable\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { btCollider, btColliderType } from \"./btCollider\";\r\n\r\nexport class btStaticCollider extends btCollider implements IStaticCollider {\r\n    /**@internal */\r\n    static _staticCapableMap: Map<any, any>;\r\n    /**@internal */\r\n    componentEnable: boolean;\r\n    /**\r\n     * @internal\r\n     */\r\n    static __init__(): void {\r\n        btStaticCollider.initCapable();\r\n    }\r\n\r\n    protected _initCollider() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btColObj: number = bt.btCollisionObject_create();\r\n        bt.btCollisionObject_setUserIndex(btColObj, this._id);\r\n        bt.btCollisionObject_forceActivationState(btColObj, btPhysicsManager.ACTIVATIONSTATE_DISABLE_SIMULATION);//prevent simulation\r\n\r\n        var flags: number = bt.btCollisionObject_getCollisionFlags(btColObj);\r\n        if ((this.owner).isStatic) {//TODO:\r\n            if ((flags & btPhysicsManager.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0)\r\n                flags = flags ^ btPhysicsManager.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n            flags = flags | btPhysicsManager.COLLISIONFLAGS_STATIC_OBJECT;\r\n        } else {\r\n            if ((flags & btPhysicsManager.COLLISIONFLAGS_STATIC_OBJECT) > 0)\r\n                flags = flags ^ btPhysicsManager.COLLISIONFLAGS_STATIC_OBJECT;\r\n            flags = flags | btPhysicsManager.COLLISIONFLAGS_KINEMATIC_OBJECT;\r\n        }\r\n        bt.btCollisionObject_setCollisionFlags(btColObj, flags);\r\n        this._btCollider = btColObj;\r\n    }\r\n\r\n    setTrigger(value: boolean): void {\r\n        this._isTrigger = value;\r\n        this._enableProcessCollisions = !this._isTrigger;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btCollider) {\r\n            var flags: number = bt.btCollisionObject_getCollisionFlags(this._btCollider);\r\n            if (value) {\r\n                if ((flags & btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE) === 0)\r\n                    bt.btCollisionObject_setCollisionFlags(this._btCollider, flags | btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n            } else {\r\n                if ((flags & btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE) !== 0)\r\n                    bt.btCollisionObject_setCollisionFlags(this._btCollider, flags ^ btPhysicsManager.COLLISIONFLAGS_NO_CONTACT_RESPONSE);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getColliderType(): btColliderType {\r\n        return btColliderType.StaticCollider;\r\n    }\r\n\r\n    getCapable(value: number): boolean {\r\n        return btStaticCollider.getStaticColliderCapable(value);\r\n    }\r\n\r\n    constructor(physicsManager: btPhysicsManager) {\r\n        super(physicsManager);\r\n        this._enableProcessCollisions = !this._isTrigger;\r\n    }\r\n\r\n\r\n    static getStaticColliderCapable(value: EColliderCapable): boolean {\r\n        return this._staticCapableMap.get(value);\r\n    }\r\n\r\n    static initCapable(): void {\r\n        this._staticCapableMap = new Map();\r\n        this._staticCapableMap.set(EColliderCapable.Collider_AllowTrigger, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_CollisionGroup, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_Friction, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_Restitution, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_RollingFriction, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_DynamicFriction, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_StaticFriction, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_BounceCombine, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_FrictionCombine, true);\r\n        this._staticCapableMap.set(EColliderCapable.Collider_EventFilter, false);\r\n    }\r\n\r\n    setWorldPosition(value: Vector3): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var btColliderObject = this._btCollider;\r\n        bt.btRigidBody_setCenterOfMassPos(btColliderObject, value.x, value.y, value.z);\r\n    }\r\n\r\n}","import { Sprite3D } from \"../../../d3/core/Sprite3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ICollider } from \"../../interface/ICollider\";\r\nimport { IJoint } from \"../../interface/Joint/IJoint\";\r\nimport { EJointCapable } from \"../../physicsEnum/EJointCapable\";\r\nimport { btCollider } from \"../Collider/btCollider\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\n\r\nexport class btJoint implements IJoint {\r\n    /**@internal */\r\n    static _jointCapableMap: Map<any, any>;\r\n\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_POINT2POINT_CONSTRAINT_TYPE = 3;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_HINGE_CONSTRAINT_TYPE = 4;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_CONETWIST_CONSTRAINT_TYPE = 5;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_D6_CONSTRAINT_TYPE = 6;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_SLIDER_CONSTRAINT_TYPE = 7;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_CONTACT_CONSTRAINT_TYPE = 8;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_D6_SPRING_CONSTRAINT_TYPE = 9;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_GEAR_CONSTRAINT_TYPE = 10;\r\n    /** @internal */\r\n    static CONSTRAINT_FIXED_CONSTRAINT_TYPE = 11;\r\n    /** @internal TODO*/\r\n    static CONSTRAINT_MAX_CONSTRAINT_TYPE = 12;\r\n    /** @internal error reduction parameter (ERP)*/\r\n    static CONSTRAINT_CONSTRAINT_ERP = 1;\r\n    /** @internal*/\r\n    static CONSTRAINT_CONSTRAINT_STOP_ERP = 2;\r\n    /** @internal constraint force mixing（CFM）*/\r\n    static CONSTRAINT_CONSTRAINT_CFM = 3;\r\n    /** @internal*/\r\n    static CONSTRAINT_CONSTRAINT_STOP_CFM = 4;\r\n\r\n    /**@internal */\r\n    _connectCollider: ICollider;\r\n    /**@internal */\r\n    _collider: ICollider;\r\n\r\n    /**@internal */\r\n    _connectOwner: Sprite3D;\r\n    /**@internal */\r\n    owner: Sprite3D;\r\n\r\n\r\n    /**@internal */\r\n    _id: number;\r\n    /**@internal */\r\n    _btJoint: any;\r\n    /**@internal 回调参数*/\r\n    _btJointFeedBackObj: number;\r\n    /**@internal */\r\n    private _getJointFeedBack: boolean = false;\r\n    /**@internal */\r\n    _constraintType: number;\r\n    _manager: btPhysicsManager;\r\n    /** 连接的两个物体是否进行碰撞检测 */\r\n    _disableCollisionsBetweenLinkedBodies = false;\r\n\r\n    /**@internal */\r\n    _anchor: Vector3 = new Vector3(0);\r\n    /** @internal */\r\n    _connectAnchor = new Vector3(0);\r\n    /**@internal */\r\n    private _currentForce: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _breakForce: number;\r\n    /**@internal */\r\n    private _currentTorque: Vector3 = new Vector3;\r\n    /**@internal */\r\n    private _breakTorque: number;\r\n    /**@internal */\r\n    protected _btTempVector30: number;\r\n    /**@internal */\r\n    protected _btTempVector31: number;\r\n    /**@internal */\r\n    protected _btTempTrans0: number;\r\n    /**@internal */\r\n    protected _btTempTrans1: number;\r\n\r\n    static __init__(): void {\r\n        btJoint.initJointCapable();\r\n    }\r\n\r\n    static initJointCapable(): void {\r\n        btJoint._jointCapableMap = new Map();\r\n        btJoint._jointCapableMap.set(EJointCapable.Joint_Anchor, true);\r\n        btJoint._jointCapableMap.set(EJointCapable.Joint_ConnectAnchor, true);\r\n    }\r\n\r\n    static getJointCapable(value: EJointCapable): boolean {\r\n        return btJoint._jointCapableMap.get(value);\r\n    }\r\n\r\n    constructor(manager: btPhysicsManager) {\r\n        this._manager = manager;\r\n        this.initJoint();\r\n    }\r\n\r\n    protected _createJoint() {\r\n        //override it\r\n    }\r\n\r\n    setCollider(collider: btCollider): void {\r\n        if (collider == this._collider)\r\n            return;\r\n        this._collider = collider;\r\n        this._createJoint();\r\n    }\r\n\r\n    setConnectedCollider(collider: btCollider): void {\r\n        if (collider == this._connectCollider)\r\n            return;\r\n        if (collider) {\r\n            this._connectOwner = collider.owner;\r\n        }\r\n        this._connectCollider = collider;\r\n        this._createJoint();\r\n    }\r\n\r\n    setLocalPos(pos: Vector3): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._anchor = pos;\r\n        bt.btVector3_setValue(this._btTempVector30, this._anchor.x, this._anchor.y, this._anchor.z);\r\n        bt.btVector3_setValue(this._btTempVector31, this._connectAnchor.x, this._connectAnchor.y, this._connectAnchor.z);\r\n        bt.btTransform_setOrigin(this._btTempTrans0, this._btTempVector30);\r\n        bt.btTransform_setOrigin(this._btTempTrans1, this._btTempVector31);\r\n    }\r\n    setConnectLocalPos(pos: Vector3): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._connectAnchor = pos;\r\n        bt.btVector3_setValue(this._btTempVector30, this._anchor.x, this._anchor.y, this._anchor.z);\r\n        bt.btVector3_setValue(this._btTempVector31, this._connectAnchor.x, this._connectAnchor.y, this._connectAnchor.z);\r\n        bt.btTransform_setOrigin(this._btTempTrans0, this._btTempVector30);\r\n        bt.btTransform_setOrigin(this._btTempTrans1, this._btTempVector31);\r\n    }\r\n    getlinearForce(): Vector3 {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getAngularForce(): Vector3 {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    isValid(): boolean {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    isEnable(value: boolean): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btTypedConstraint_setEnabled(this._btJoint, value);\r\n    }\r\n\r\n    isCollision(value: boolean): void {\r\n        this._disableCollisionsBetweenLinkedBodies = !value;\r\n        this._createJoint();\r\n    }\r\n\r\n    protected initJoint() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._breakForce = -1;\r\n        this._breakTorque = -1;\r\n        this._btTempVector30 = bt.btVector3_create(0, 0, 0);\r\n        this._btTempVector31 = bt.btVector3_create(0, 0, 0);\r\n        this._btTempTrans0 = bt.btTransform_create();\r\n        this._btTempTrans1 = bt.btTransform_create();\r\n        bt.btTransform_setIdentity(this._btTempTrans0);\r\n        bt.btTransform_setOrigin(this._btTempTrans0, this._btTempVector30);\r\n        bt.btTransform_setIdentity(this._btTempTrans1);\r\n        bt.btTransform_setOrigin(this._btTempTrans1, this._btTempVector31);\r\n    }\r\n\r\n    setOwner(owner: Sprite3D) {\r\n        this.owner = owner;\r\n    }\r\n\r\n\r\n    _isBreakConstrained() {\r\n        this._getJointFeedBack = false;\r\n        if (this._breakForce == -1 && this._breakTorque == -1)\r\n            return false;\r\n        this._btFeedBackInfo();\r\n        var isBreakForce: Boolean = this._breakForce != -1 && (Vector3.scalarLength(this._currentForce) > this._breakForce);\r\n        var isBreakTorque: Boolean = this._breakTorque != -1 && (Vector3.scalarLength(this._currentTorque) > this._breakTorque);\r\n        if (isBreakForce || isBreakTorque) {\r\n            this.setConnectedCollider(null);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 获取bt回调参数\r\n     */\r\n    _btFeedBackInfo() {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        var applyForce: number = bt.btJointFeedback_getAppliedForceBodyA(this._btJointFeedBackObj);\r\n        var applyTorque: number = bt.btJointFeedback_getAppliedTorqueBodyA(this._btJointFeedBackObj);\r\n        this._currentTorque.setValue(bt.btVector3_x(applyTorque), bt.btVector3_y(applyTorque), bt.btVector3_z(applyTorque));\r\n        this._currentForce.setValue(bt.btVector3_x(applyForce), bt.btVector3_y(applyForce), bt.btVector3_z(applyForce));\r\n        this._getJointFeedBack = true;\r\n    }\r\n\r\n    setConnectedMassScale(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setConnectedInertiaScale(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setMassScale(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setInertiaScale(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setBreakForce(value: number): void {\r\n        this._breakForce = value;\r\n    }\r\n    setBreakTorque(value: number): void {\r\n        this._breakTorque = value;\r\n    }\r\n\r\n}","import { ConfigurableConstraint } from \"../../../d3/physics/constraints/ConfigurableConstraint\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ICustomJoint } from \"../../interface/Joint/ICustomJoint\";\r\nimport { D6Axis, D6Drive, D6MotionType, ID6Joint } from \"../../interface/Joint/ID6Joint\";\r\nimport { btRigidBodyCollider } from \"../Collider/btRigidBodyCollider\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { btJoint } from \"./btJoint\";\r\n\r\nexport class btCustomJoint extends btJoint implements ID6Joint {\r\n\r\n    /**@internal 最小X角度限制*/\r\n    _minAngularXLimit: number = 0;\r\n    /**@internal 最大X角度限制*/\r\n    _maxAngularXLimit: number = 0;\r\n    /**@internal 最小Y角度限制*/\r\n    _minAngularYLimit: number = 0;\r\n    /**@internal 最大Y角度限制*/\r\n    _maxAngularYLimit: number = 0;\r\n    /**@internal 最小Z角度限制*/\r\n    _minAngularZLimit: number = 0;\r\n    /**@internal 最大Z角度限制*/\r\n    _maxAngularZLimit: number = 0;\r\n    /**@internal 最小距离限制*/\r\n    _minLinearLimit: number = 0;\r\n    /**@internal 最大距离限制*/\r\n    _maxLinearLimit: number = 0;\r\n    /**@internal */\r\n    _linearXMotion: D6Axis = D6Axis.eFREE;\r\n    /**@internal */\r\n    _linearYMotion: D6Axis = D6Axis.eFREE;\r\n    /**@internal */\r\n    _linearZMotion: D6Axis = D6Axis.eFREE;\r\n    /**@internal */\r\n    _angularXMotion: D6Axis = D6Axis.eFREE;\r\n    /**@internal */\r\n    _angularYMotion: D6Axis = D6Axis.eFREE;\r\n    /**@internal */\r\n    _angularZMotion: D6Axis = D6Axis.eFREE;\r\n\r\n    /**@internal 轴限制*/\r\n    _axis: Vector3 = new Vector3(1, 0, 0);\r\n    /**@internal 副轴限制*/\r\n    _secondAxis: Vector3 = new Vector3(0, 1, 0);\r\n\r\n    /**@internal */\r\n    _btAxis: number = 0;\r\n    /**@internal */\r\n    _btsceondAxis: number = 0;\r\n\r\n\r\n    initJoint() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        super.initJoint();\r\n        this._btAxis = bt.btVector3_create(-1.0, 0.0, 0.0);\r\n        this._btsceondAxis = bt.btVector3_create(0.0, 1.0, 0.0);\r\n    }\r\n\r\n    protected _createJoint(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._manager && this._manager.removeJoint(this);\r\n        if (this._collider && this._connectCollider) {\r\n            this._btJoint = bt.btGeneric6DofSpring2Constraint_create((this._collider as btRigidBodyCollider)._btCollider, this._btTempVector30, (this._connectCollider as btRigidBodyCollider)._btCollider, this._btTempTrans1, 0);\r\n            this._btJointFeedBackObj = bt.btJointFeedback_create(this._btJoint);\r\n            bt.btTypedConstraint_setJointFeedback(this._btJoint, this._btJointFeedBackObj);\r\n            bt.btTypedConstraint_setEnabled(this._btJoint, true);\r\n            this._initAllConstraintInfo();\r\n            this._manager && this._manager.addJoint(this);\r\n        }\r\n    }\r\n\r\n    _initAllConstraintInfo(): void {\r\n        //MotionMode\r\n        this.setMotion(D6Axis.eLOCKED, D6MotionType.eX);\r\n        this.setMotion(D6Axis.eLOCKED, D6MotionType.eY);\r\n        this.setMotion(D6Axis.eLOCKED, D6MotionType.eZ);\r\n        this.setMotion(D6Axis.eLOCKED, D6MotionType.eTWIST);\r\n        this.setMotion(D6Axis.eLOCKED, D6MotionType.eSWING1);\r\n        this.setMotion(D6Axis.eLOCKED, D6MotionType.eSWING2);\r\n    }\r\n\r\n    constructor(manager: btPhysicsManager) {\r\n        super(manager);\r\n    }\r\n\r\n    /**\r\n     * TODO\r\n     * @internal\r\n     */\r\n    setEquilibriumPoint(axis: number, equilibriumPoint: number): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setEquilibriumPoint(this._btJoint, axis, equilibriumPoint);\r\n    }\r\n\r\n    setLocalPos(pos: Vector3): void {\r\n        super.setLocalPos(pos);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btJoint && bt.btGeneric6DofSpring2Constraint_setFrames(this._btJoint, this._btTempTrans0, this._btTempTrans1);\r\n    }\r\n\r\n    setConnectLocalPos(pos: Vector3): void {\r\n        super.setConnectLocalPos(pos);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btJoint && bt.btGeneric6DofSpring2Constraint_setFrames(this._btJoint, this._btTempTrans0, this._btTempTrans1);\r\n    }\r\n\r\n    setAxis(axis: Vector3, secendary: Vector3): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        this._axis.setValue(axis.x, axis.y, axis.y);\r\n        this._secondAxis.setValue(secendary.x, secendary.y, secendary.z);\r\n        this._btAxis = bt.btVector3_setValue(-axis.x, axis.y, axis.z);\r\n        this._btsceondAxis = bt.btVector3_setValue(-secendary.x, secendary.y, secendary.z);\r\n        bt.btGeneric6DofSpring2Constraint_setAxis(this._btJoint, this._btAxis, this._btsceondAxis);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置各个轴限制值\r\n     * @param axis 限制类型\r\n     * @param motionType 运动类型\r\n     */\r\n    _setLimit(axis: D6Axis, motionType: D6MotionType, low?: number, high?: number): void {\r\n        let lowLimit = 0;\r\n        let maxLimit = 0;\r\n        if (motionType == D6MotionType.eX || motionType == D6MotionType.eY || motionType == D6MotionType.eZ) {\r\n            // linear motion\r\n            lowLimit = this._minLinearLimit;\r\n            maxLimit = this._maxLinearLimit;\r\n        } else {\r\n            if (motionType == D6MotionType.eTWIST) {\r\n                // angular motion\r\n                lowLimit = this._minAngularXLimit;\r\n                maxLimit = this._maxAngularXLimit;\r\n            } else if (motionType == D6MotionType.eSWING1) {\r\n                // angular motion\r\n                lowLimit = this._minAngularYLimit;\r\n                maxLimit = this._maxAngularYLimit;\r\n            } else if (motionType == D6MotionType.eSWING2) {\r\n                // angular motion\r\n                lowLimit = this._minAngularZLimit;\r\n                maxLimit = this._maxAngularZLimit;\r\n            }\r\n        }\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (axis == D6Axis.eFREE) {\r\n            bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, motionType, 1, 0);\r\n        } else if (axis == D6Axis.eLIMITED) {\r\n            bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, motionType, lowLimit, maxLimit);\r\n        } else if (axis == D6Axis.eLOCKED) {\r\n            bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, motionType, 0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置各个轴的弹簧属性值\r\n     * @param axis \r\n     * @param motionType \r\n     * @param springValue \r\n     * @param limitIfNeeded \r\n     */\r\n    _setSpring(axis: D6Axis, motionType: D6MotionType, springValue: number, limitIfNeeded: boolean = true): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        var enableSpring: Boolean = springValue > 0 && axis == D6Axis.eLIMITED;\r\n        bt.btGeneric6DofSpring2Constraint_enableSpring(this._btJoint, motionType, enableSpring);\r\n        if (enableSpring)\r\n            bt.btGeneric6DofSpring2Constraint_setStiffness(this._btJoint, motionType, springValue, limitIfNeeded);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置各个轴的弹力值\r\n     * @param axis \r\n     * @param motionType \r\n     * @param bounce \r\n     */\r\n    _setBounce(axis: D6Axis, motionType: D6MotionType, bounce: number): void {\r\n        if (axis == D6Axis.eLIMITED) {\r\n            var bt = btPhysicsCreateUtil._bt\r\n            bounce = bounce <= 0 ? 0 : bounce;\r\n            bt.btGeneric6DofSpring2Constraint_setBounce(this._btJoint, motionType, bounce);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置各个轴的阻尼值\r\n     * @param axis \r\n     * @param motionType \r\n     * @param damp \r\n     * @param limitIfNeeded \r\n     */\r\n    _setDamp(axis: D6Axis, motionType: D6MotionType, damp: number, limitIfNeeded: boolean = true): void {\r\n        if (axis == D6Axis.eLIMITED) {\r\n            var bt = btPhysicsCreateUtil._bt;\r\n            damp = damp <= 0 ? 0 : damp;\r\n            bt.btGeneric6DofSpring2Constraint_setDamping(this._btJoint, motionType, damp, limitIfNeeded);\r\n        }\r\n    }\r\n\r\n    setMotion(axis: D6Axis, motionType: D6MotionType): void {\r\n        switch (motionType) {\r\n            case D6MotionType.eX:\r\n                this._linearXMotion = axis;\r\n                break;\r\n            case D6MotionType.eY:\r\n                this._linearYMotion = axis;\r\n                break;\r\n            case D6MotionType.eZ:\r\n                this._linearZMotion = axis;\r\n                break;\r\n            case D6MotionType.eTWIST:\r\n                this._angularXMotion = axis;\r\n                break;\r\n            case D6MotionType.eSWING1:\r\n                this._angularYMotion = axis;\r\n                break;\r\n            case D6MotionType.eSWING2:\r\n                this._angularZMotion = axis;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this._setLimit(axis, motionType);\r\n    }\r\n\r\n    setDistanceLimit(limit: number, bounceness: number, bounceThreshold: number, spring: number, damp: number): void {\r\n        this._minLinearLimit = -limit;\r\n        this._maxLinearLimit = limit;\r\n        // linear limit\r\n        this._setLimit(this._linearXMotion, D6MotionType.eX);\r\n        this._setLimit(this._linearYMotion, D6MotionType.eY);\r\n        this._setLimit(this._linearZMotion, D6MotionType.eZ);\r\n        // linear spring\r\n        this._setSpring(this._linearXMotion, D6MotionType.eX, spring);\r\n        this._setSpring(this._linearYMotion, D6MotionType.eX, spring);\r\n        this._setSpring(this._linearZMotion, D6MotionType.eX, spring);\r\n        // bounce\r\n        this._setBounce(this._linearXMotion, D6MotionType.eX, bounceness);\r\n        this._setBounce(this._linearYMotion, D6MotionType.eY, bounceness);\r\n        this._setBounce(this._linearZMotion, D6MotionType.eZ, bounceness);\r\n        // damp\r\n        this._setDamp(this._linearXMotion, D6MotionType.eX, damp);\r\n        this._setDamp(this._linearYMotion, D6MotionType.eY, damp);\r\n        this._setDamp(this._linearZMotion, D6MotionType.eZ, damp);\r\n\r\n    }\r\n\r\n    setLinearLimit(linearAxis: D6MotionType, upper: number, lower: number, bounceness: number, bounceThreshold: number, spring: number, damping: number): void {\r\n        this._minLinearLimit = lower;\r\n        this._maxLinearLimit = upper;\r\n        // linear limit\r\n        this._setLimit(this._linearXMotion, linearAxis);\r\n        this._setLimit(this._linearYMotion, linearAxis);\r\n        this._setLimit(this._linearZMotion, linearAxis);\r\n        // linear spring\r\n        this._setSpring(this._linearXMotion, linearAxis, spring);\r\n        this._setSpring(this._linearYMotion, linearAxis, spring);\r\n        this._setSpring(this._linearZMotion, linearAxis, spring);\r\n        // bounce\r\n        this._setBounce(this._linearXMotion, linearAxis, bounceness);\r\n        this._setBounce(this._linearYMotion, linearAxis, bounceness);\r\n        this._setBounce(this._linearZMotion, linearAxis, bounceness);\r\n        // damp\r\n        this._setDamp(this._linearXMotion, linearAxis, damping);\r\n        this._setDamp(this._linearYMotion, linearAxis, damping);\r\n        this._setDamp(this._linearZMotion, linearAxis, damping);\r\n    }\r\n\r\n    setTwistLimit(upper: number, lower: number, bounceness: number, bounceThreshold: number, spring: number, damping: number): void {\r\n        this._minAngularYLimit = lower / Math.PI * 180;\r\n        this._maxAngularYLimit = upper / Math.PI * 180;\r\n        // angular limit\r\n        this._setLimit(this._angularXMotion, D6MotionType.eTWIST);\r\n        this._setLimit(this._angularYMotion, D6MotionType.eSWING1);\r\n        this._setLimit(this._angularZMotion, D6MotionType.eSWING2);\r\n        // angular spring\r\n        this._setSpring(this._angularXMotion, D6MotionType.eTWIST, spring);\r\n        this._setSpring(this._angularYMotion, D6MotionType.eSWING1, spring);\r\n        this._setSpring(this._angularZMotion, D6MotionType.eSWING2, spring);\r\n        // bounce\r\n        this._setBounce(this._angularXMotion, D6MotionType.eTWIST, bounceness);\r\n        this._setBounce(this._angularYMotion, D6MotionType.eSWING1, bounceness);\r\n        this._setBounce(this._angularZMotion, D6MotionType.eSWING2, bounceness);\r\n        // damp\r\n        this._setDamp(this._angularXMotion, D6MotionType.eTWIST, damping);\r\n        this._setDamp(this._angularYMotion, D6MotionType.eSWING1, damping);\r\n        this._setDamp(this._angularZMotion, D6MotionType.eSWING2, damping);\r\n    }\r\n\r\n    setSwingLimit(yAngle: number, zAngle: number, bounceness: number, bounceThreshold: number, spring: number, damping: number): void {\r\n        // swing angualr limit\r\n        this._minAngularYLimit = -yAngle / Math.PI * 180;\r\n        this._maxAngularYLimit = yAngle / Math.PI * 180;\r\n        this._minAngularZLimit = -zAngle / Math.PI * 180;\r\n        this._maxAngularZLimit = zAngle / Math.PI * 180;\r\n        // linear limit\r\n        this._setLimit(this._angularXMotion, D6MotionType.eTWIST);\r\n        this._setLimit(this._angularYMotion, D6MotionType.eSWING1);\r\n        this._setLimit(this._angularZMotion, D6MotionType.eSWING2);\r\n        // linear spring\r\n        this._setSpring(this._angularXMotion, D6MotionType.eTWIST, spring);\r\n        this._setSpring(this._angularYMotion, D6MotionType.eSWING1, spring);\r\n        this._setSpring(this._angularZMotion, D6MotionType.eSWING2, spring);\r\n        // bounce\r\n        this._setBounce(this._angularXMotion, D6MotionType.eTWIST, bounceness);\r\n        this._setBounce(this._angularYMotion, D6MotionType.eSWING1, bounceness);\r\n        this._setBounce(this._angularZMotion, D6MotionType.eSWING2, bounceness);\r\n        // damp\r\n        this._setDamp(this._angularXMotion, D6MotionType.eTWIST, damping);\r\n        this._setDamp(this._angularYMotion, D6MotionType.eSWING1, damping);\r\n        this._setDamp(this._angularZMotion, D6MotionType.eSWING2, damping);\r\n    }\r\n\r\n    setDrive(index: D6Drive, stiffness: number, damping: number, forceLimit: number): void {\r\n        // enable motor\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_enableMotor(this._btJoint, index, true);\r\n    }\r\n\r\n    setDriveTransform(position: Vector3, rotate: Quaternion): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        let axis = D6Drive.eY;\r\n        // TODO\r\n        // bt.btGeneric6DofSpring2Constraint_setServoTarget(this._btJoint, axis, target);\r\n    }\r\n\r\n    setDriveVelocity(position: Vector3, angular: Vector3): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        let axis = D6Drive.eX;\r\n        // position\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btJoint, axis, position.x);\r\n        axis = D6Drive.eY;\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btJoint, axis, position.y);\r\n        axis = D6Drive.eZ;\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btJoint, axis, position.z);\r\n        // angular\r\n        axis = D6Drive.eX;\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btJoint, axis, angular.x);\r\n        axis = D6Drive.eY;\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btJoint, axis, angular.y);\r\n        axis = D6Drive.eZ;\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btJoint, axis, angular.z);\r\n    }\r\n\r\n    getTwistAngle(): number {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getSwingYAngle(): number {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getSwingZAngle(): number {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { IFixedJoint } from \"../../interface/Joint/IFixedJoint\";\r\nimport { btCollider } from \"../Collider/btCollider\";\r\nimport { btRigidBodyCollider } from \"../Collider/btRigidBodyCollider\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { btJoint } from \"./btJoint\";\r\n\r\nexport class btFixedJoint extends btJoint implements IFixedJoint {\r\n\r\n    constructor(manager: btPhysicsManager) {\r\n        super(manager);\r\n    }\r\n\r\n    protected _createJoint(): void {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._manager && this._manager.removeJoint(this);\r\n        if (this._collider && this._connectCollider) {\r\n            this._btJoint = bt.btFixedConstraint_create((this._collider as btRigidBodyCollider)._btCollider, this._btTempTrans0, (this._connectCollider as btRigidBodyCollider)._btCollider, this._btTempTrans1, 0);\r\n            this._btJointFeedBackObj = bt.btJointFeedback_create(this._btJoint);\r\n            bt.btTypedConstraint_setJointFeedback(this._btJoint, this._btJointFeedBackObj);\r\n            bt.btTypedConstraint_setEnabled(this._btJoint, true);\r\n            this._manager.addJoint(this);\r\n        }\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IHingeJoint } from \"../../interface/Joint/IHingeJoint\";\r\nimport { btRigidBodyCollider } from \"../Collider/btRigidBodyCollider\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { btJoint } from \"./btJoint\";\r\n\r\nexport class btHingeJoint extends btJoint implements IHingeJoint {\r\n\r\n    /**@internal */\r\n    static ANGULAR_X: number = 3;\r\n    /**@internal */\r\n    static ANGULAR_Y: number = 4;\r\n    /**@internal */\r\n    static ANGULAR_Z: number = 5;\r\n\r\n    /**@internal */\r\n    _uperLimit: number = 0;\r\n    /**@internal */\r\n    _lowerLimit: number = 1;\r\n    /**@internal */\r\n    _angularAxis: number = 0;\r\n    /**@internal */\r\n    _enableLimit: boolean = false;\r\n    /**@internal */\r\n    _enableDrive: boolean = false;\r\n\r\n    protected _createJoint(): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        // last param 0 is R0.XYZ\r\n        this._manager && this._manager.removeJoint(this);\r\n        if (this._collider && this._connectCollider) {\r\n            this._btJoint = bt.btGeneric6DofSpring2Constraint_create((this._collider as btRigidBodyCollider)._btCollider, this._btTempTrans0, (this._connectCollider as btRigidBodyCollider)._btCollider, this._btTempTrans1, 0);\r\n            this._btJointFeedBackObj = bt.btJointFeedback_create(this._btJoint);\r\n            bt.btTypedConstraint_setJointFeedback(this._btJoint, this._btJointFeedBackObj);\r\n            bt.btTypedConstraint_setEnabled(this._btJoint, true);\r\n            this._initJointConstraintInfo();\r\n            this._manager.addJoint(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    _initJointConstraintInfo() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btHingeJoint.ANGULAR_X, 0, 0);\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btHingeJoint.ANGULAR_Y, 0, 0);\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btHingeJoint.ANGULAR_Z, 0, 0);\r\n    }\r\n\r\n    constructor(manager: btPhysicsManager) {\r\n        super(manager);\r\n    }\r\n\r\n    setLocalPos(pos: Vector3): void {\r\n        super.setLocalPos(pos);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btJoint && bt.btGeneric6DofSpring2Constraint_setFrames(this._btJoint, this._btTempTrans0, this._btTempTrans1);\r\n    }\r\n\r\n    setConnectLocalPos(pos: Vector3): void {\r\n        super.setConnectLocalPos(pos);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btJoint && bt.btGeneric6DofSpring2Constraint_setFrames(this._btJoint, this._btTempTrans0, this._btTempTrans1);\r\n    }\r\n\r\n    setLowerLimit(lowerLimit: number): void {\r\n        if (!this._btJoint) return;\r\n        if (lowerLimit == this._lowerLimit) return;\r\n        this._lowerLimit = lowerLimit / Math.PI * 180;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, this._lowerLimit, this._uperLimit);\r\n    }\r\n\r\n    setUpLimit(value: number): void {\r\n        if (!this._btJoint) return;\r\n        if (value == this._uperLimit) return;\r\n        this._uperLimit = value / Math.PI * 180;\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, this._lowerLimit, this._uperLimit);\r\n    }\r\n    setBounceness(value: number): void {\r\n        if (!this._btJoint)\r\n            return;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        value = value <= 0 ? 0 : value;\r\n        bt.btGeneric6DofSpring2Constraint_setBounce(this._btJoint, this._angularAxis, value);\r\n\r\n    }\r\n    setBouncenMinVelocity(value: number): void {\r\n        // TODO bullet\r\n    }\r\n    setContactDistance(value: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    enableLimit(value: boolean): void {\r\n        this._enableLimit = value;\r\n    }\r\n    enableDrive(value: boolean): void {\r\n        this._enableDrive = value;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_enableMotor(this._btJoint, this._angularAxis, value);\r\n    }\r\n    enableFreeSpin(value: boolean): void {\r\n        //TODO bullet\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    setAxis(value: Vector3): void {\r\n        if (value.x == 1) {\r\n            this._angularAxis = btHingeJoint.ANGULAR_X;\r\n            let bt = btPhysicsCreateUtil._bt;\r\n            if (this._enableLimit) {\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, this._lowerLimit, this._uperLimit);\r\n            } else {\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, 1, 0);\r\n            }\r\n        }\r\n        if (value.y == 1) {\r\n            this._angularAxis = btHingeJoint.ANGULAR_Y;\r\n            let bt = btPhysicsCreateUtil._bt;\r\n            if (this._enableLimit) {\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, this._lowerLimit, this._uperLimit);\r\n            } else {\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, 1, 0);\r\n            }\r\n        }\r\n        if (value.z == 1) {\r\n            this._angularAxis = btHingeJoint.ANGULAR_Z;\r\n            let bt = btPhysicsCreateUtil._bt;\r\n            if (this._enableLimit) {\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, this._lowerLimit, this._uperLimit);\r\n            } else {\r\n                bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, this._angularAxis, 1, 0);\r\n            }\r\n        }\r\n    }\r\n    setSwingOffset(value: Vector3): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getAngle(): number {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getVelocity(): Readonly<Vector3> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setHardLimit(lowerLimit: number, upperLimit: number, contactDist: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setSoftLimit(lowerLimit: number, upperLimit: number, stiffness: number, damping: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setDriveVelocity(velocity: number): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setTargetVelocity(this._btJoint, this._angularAxis, velocity);\r\n    }\r\n    setDriveForceLimit(limit: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setDriveGearRatio(ratio: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setHingeJointFlag(flag: number, value: boolean): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ISpringJoint } from \"../../interface/Joint/ISpringJoint\";\r\nimport { btRigidBodyCollider } from \"../Collider/btRigidBodyCollider\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btPhysicsManager } from \"../btPhysicsManager\";\r\nimport { btJoint } from \"./btJoint\";\r\n\r\nexport class btSpringJoint extends btJoint implements ISpringJoint {\r\n\r\n    /**@internal */\r\n    static LINEARSPRING_AXIS_X: number = 0;\r\n    /**@internal */\r\n    static LINEARSPRING_AXIS_Y: number = 1;\r\n    /**@internal */\r\n    static LINEARSPRING_AXIS_Z: number = 2;\r\n    /**@internal */\r\n    static ANGULARSPRING_AXIS_X: number = 3;\r\n    /**@internal */\r\n    static ANGULARSPRING_AXIS_Y: number = 4;\r\n    /**@internal */\r\n    static ANGULARSPRING_AXIS_Z: number = 5;\r\n\r\n    /**@internal */\r\n    _minDistance: number = 0;\r\n    /**@internal */\r\n    _maxDistance: number = Number.MAX_VALUE;\r\n\r\n    protected _createJoint(): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        // last param 0 is R0.XYZ\r\n        this._manager && this._manager.removeJoint(this);\r\n        if (this._collider && this._connectCollider) {\r\n            this._btJoint = bt.btGeneric6DofSpring2Constraint_create((this._collider as btRigidBodyCollider)._btCollider, this._btTempTrans0, (this._connectCollider as btRigidBodyCollider)._btCollider, this._btTempTrans1, 0);\r\n            this._btJointFeedBackObj = bt.btJointFeedback_create(this._btJoint);\r\n            bt.btTypedConstraint_setJointFeedback(this._btJoint, this._btJointFeedBackObj);\r\n            bt.btTypedConstraint_setEnabled(this._btJoint, true);\r\n            this._initJointConstraintInfo();\r\n            this._manager.addJoint(this);\r\n        }\r\n    }\r\n    /**\r\n         * @internal\r\n         */\r\n    _initJointConstraintInfo() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.ANGULARSPRING_AXIS_X, 0, 0);\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.ANGULARSPRING_AXIS_Y, 0, 0);\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.ANGULARSPRING_AXIS_Z, 0, 0);\r\n\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_X, 0, 0);\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_Y, 0, 0);\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_Z, 0, 0);\r\n    }\r\n    constructor(manager: btPhysicsManager) {\r\n        super(manager);\r\n    }\r\n\r\n    setLocalPos(pos: Vector3): void {\r\n        super.setLocalPos(pos);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btJoint && bt.btGeneric6DofSpring2Constraint_setFrames(this._btJoint, this._btTempTrans0, this._btTempTrans1);\r\n    }\r\n\r\n    setConnectLocalPos(pos: Vector3): void {\r\n        super.setConnectLocalPos(pos);\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btJoint && bt.btGeneric6DofSpring2Constraint_setFrames(this._btJoint, this._btTempTrans0, this._btTempTrans1);\r\n    }\r\n\r\n    setSwingOffset(value: Vector3): void {\r\n        //TODO bullet\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setMinDistance(distance: number): void {\r\n        if (!this._btJoint)\r\n            return;\r\n        if (distance == this._minDistance) {\r\n            return;\r\n        }\r\n        this._minDistance = distance;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_Y, this._minDistance, this._maxDistance);\r\n    }\r\n    setMaxDistance(distance: number): void {\r\n        if (!this._btJoint)\r\n            return;\r\n        if (distance == this._maxDistance) {\r\n            return;\r\n        }\r\n        this._maxDistance = distance;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        bt.btGeneric6DofSpring2Constraint_setLimit(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_Y, this._minDistance, this._maxDistance);\r\n    }\r\n    setTolerance(tolerance: number): void {\r\n        // TODO\r\n        // is bullet has this param?\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n    setStiffness(stiffness: number): void {\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        var enableSpring: Boolean = stiffness > 0;\r\n        // in btSpringJoint only Y-Axis default\r\n        bt.btGeneric6DofSpring2Constraint_enableSpring(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_Y, enableSpring);\r\n        if (enableSpring)\r\n            bt.btGeneric6DofSpring2Constraint_setStiffness(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_Y, stiffness, true);\r\n    }\r\n    setDamping(damping: number): void {\r\n        if (!this._btJoint)\r\n            return;\r\n        var bt = btPhysicsCreateUtil._bt;\r\n        damping = damping <= 0 ? 0 : damping;\r\n        bt.btGeneric6DofSpring2Constraint_setDamping(this._btJoint, btSpringJoint.LINEARSPRING_AXIS_Y, damping, true);\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IBoxColliderShape } from \"../../interface/Shape/IBoxColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btColliderShape } from \"./btColliderShape\";\r\n\r\nexport class btBoxColliderShape extends btColliderShape implements IBoxColliderShape {\r\n    /** @internal */\r\n    private _btSize: number;\r\n    /** @interanl */\r\n    private _size: Vector3;\r\n\r\n    constructor() {\r\n        super();\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._size = new Vector3(0.5, 0.5, 0.5);\r\n        this._btSize = bt.btVector3_create(0, 0, 0);\r\n    }\r\n\r\n    private changeBoxShape() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btShape) {\r\n            bt.btCollisionShape_destroy(this._btShape);\r\n        }\r\n        this._createShape();\r\n    }\r\n\r\n    protected _createShape() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        bt.btVector3_setValue(this._btSize, this._size.x / 2, this._size.y / 2, this._size.z / 2);\r\n        this._btShape = bt.btBoxShape_create(this._btSize);\r\n    }\r\n\r\n    protected _getType(): number {\r\n        return this._type = btColliderShape.SHAPETYPES_BOX;\r\n    }\r\n\r\n    setSize(size: Vector3): void {\r\n        if (!size.equal(this._size)) {\r\n            this._size.setValue(size.x, size.y, size.z);\r\n            this.changeBoxShape();\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        //destroy _btsize\r\n        this._size = null;\r\n        this._btSize = null;\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ICapsuleColliderShape } from \"../../interface/Shape/ICapsuleColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btColliderShape } from \"./btColliderShape\";\r\n\r\nexport class btCapsuleColliderShape extends btColliderShape implements ICapsuleColliderShape {\r\n    private static _tempVector30: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _radius: number = 0.25;\r\n    /**@internal */\r\n    private _length: number = 1;\r\n    /**@internal */\r\n    private _orientation: number = btColliderShape.SHAPEORIENTATION_UPY;\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _createShape() {\r\n        //TODO MIner\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btShape) {\r\n            bt.btCollisionShape_destroy(this._btShape);\r\n        }\r\n        switch (this._orientation) {\r\n            case btColliderShape.SHAPEORIENTATION_UPX:\r\n                this._btShape = bt.btCapsuleShapeX_create(this._radius, this._length - this._radius * 2);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPY:\r\n                this._btShape = bt.btCapsuleShape_create(this._radius, this._length - this._radius * 2);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPZ:\r\n                this._btShape = bt.btCapsuleShapeZ_create(this._radius, this._length - this._radius * 2);\r\n                break;\r\n            default:\r\n                throw \"CapsuleColliderShape:unknown orientation.\";\r\n        }\r\n    }\r\n\r\n    protected _getType(): number {\r\n        return this._type = btColliderShape.SHAPETYPES_CAPSULE;\r\n    }\r\n\r\n    setRadius(radius: number): void {\r\n        if (this._radius == radius)\r\n            return;\r\n        this._radius = radius;\r\n        this._createShape();\r\n    }\r\n\r\n    setHeight(height: number): void {\r\n        if (this._length == height)\r\n            return;\r\n        this._length = height;\r\n        this._createShape();\r\n    }\r\n\r\n    setUpAxis(upAxis: number): void {\r\n        if (this._orientation == upAxis)\r\n            return;\r\n        this._orientation = upAxis;\r\n        this._createShape();\r\n    }\r\n\r\n    setWorldScale(scale: Vector3): void {\r\n        var fixScale: Vector3 = btCapsuleColliderShape._tempVector30;\r\n        switch (this._orientation) {\r\n            case btColliderShape.SHAPEORIENTATION_UPX:\r\n                fixScale.x = scale.x;\r\n                fixScale.y = fixScale.z = Math.max(scale.y, scale.z);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPY:\r\n                fixScale.y = scale.y;\r\n                fixScale.x = fixScale.z = Math.max(scale.x, scale.z);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPZ:\r\n                fixScale.z = scale.z;\r\n                fixScale.x = fixScale.y = Math.max(scale.x, scale.y);\r\n                break;\r\n            default:\r\n                throw \"CapsuleColliderShape:unknown orientation.\";\r\n        }\r\n        super.setWorldScale(fixScale);\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._radius = null;\r\n        this._length = null;\r\n        this._orientation = null;\r\n    }\r\n\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IConeColliderShape } from \"../../interface/Shape/IConeColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btColliderShape } from \"./btColliderShape\";\r\n\r\nexport class btConeColliderShape extends btColliderShape implements IConeColliderShape {\r\n    private static _tempVector30: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _radius: number = 0.25;\r\n    /**@internal */\r\n    private _length: number = 1;\r\n    /**@internal */\r\n    private _orientation: number = btColliderShape.SHAPEORIENTATION_UPY;\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _createShape() {\r\n        //TODO MIner\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btShape) {\r\n            bt.btCollisionShape_destroy(this._btShape);\r\n        }\r\n        switch (this._orientation) {\r\n            case btColliderShape.SHAPEORIENTATION_UPX:\r\n                this._btShape = bt.btConeShapeX_create(this._radius, this._length);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPY:\r\n                this._btShape = bt.btConeShape_create(this._radius, this._length);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPZ:\r\n                this._btShape = bt.btConeShapeZ_create(this._radius, this._length);\r\n                break;\r\n            default:\r\n                throw \"CapsuleColliderShape:unknown orientation.\";\r\n        }\r\n    }\r\n\r\n    protected _getType(): number {\r\n        return this._type = btColliderShape.SHAPETYPES_CONE;\r\n    }\r\n\r\n    setRadius(radius: number): void {\r\n        if (this._radius == radius)\r\n            return;\r\n        this._radius = radius;\r\n        this._createShape();\r\n    }\r\n\r\n    setHeight(height: number): void {\r\n        if (this._length == height)\r\n            return;\r\n        this._length = height;\r\n        this._createShape();\r\n    }\r\n\r\n    setUpAxis(upAxis: number): void {\r\n        if (this._orientation == upAxis)\r\n            return;\r\n        this._orientation = upAxis;\r\n        this._createShape();\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._radius = null;\r\n        this._length = null;\r\n        this._orientation = null;\r\n    }\r\n}","import { Vector3 } from \"../../../maths/Vector3\";\r\nimport { ICylinderColliderShape } from \"../../interface/Shape/ICylinderColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btColliderShape } from \"./btColliderShape\";\r\n\r\nexport class btCylinderColliderShape extends btColliderShape implements ICylinderColliderShape {\r\n    private static _tempVector30: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _radius: number = 0.25;\r\n    /**@internal */\r\n    private _length: number = 1;\r\n    /**@internal */\r\n    private _orientation: number = btColliderShape.SHAPEORIENTATION_UPY;\r\n\r\n    private _btSize: any;\r\n    constructor() {\r\n        super();\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        this._btSize = bt.btVector3_create(0, 0, 0);\r\n    }\r\n\r\n    protected _createShape() {\r\n        //TODO MIner\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btShape) {\r\n            bt.btCollisionShape_destroy(this._btShape);\r\n        }\r\n        switch (this._orientation) {\r\n            case btColliderShape.SHAPEORIENTATION_UPX:\r\n                bt.btVector3_setValue(this._btSize, this._length / 2, this._radius, this._radius);\r\n                this._btShape = bt.btCylinderShapeX_create(this._btSize);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPY:\r\n                bt.btVector3_setValue(this._btSize, this._radius, this._length / 2, this._radius);\r\n                this._btShape = bt.btCylinderShape_create(this._btSize);\r\n                break;\r\n            case btColliderShape.SHAPEORIENTATION_UPZ:\r\n                bt.btVector3_setValue(this._btSize, this._radius, this._radius, this._length / 2);\r\n                this._btShape = bt.btCylinderShapeZ_create(this._btSize);\r\n                break;\r\n            default:\r\n                throw \"CapsuleColliderShape:unknown orientation.\";\r\n        }\r\n    }\r\n\r\n    protected _getType(): number {\r\n        return this._type = btColliderShape.SHAPETYPES_CYLINDER;\r\n    }\r\n\r\n    setRadius(radius: number): void {\r\n        if (this._radius == radius)\r\n            return;\r\n        this._radius = radius;\r\n        this._createShape();\r\n    }\r\n\r\n    setHeight(height: number): void {\r\n        if (this._length == height)\r\n            return;\r\n        this._length = height;\r\n        this._createShape();\r\n    }\r\n    setUpAxis(upAxis: number): void {\r\n        if (this._orientation == upAxis)\r\n            return;\r\n        this._orientation = upAxis;\r\n        this._createShape();\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._radius = null;\r\n        this._length = null;\r\n        this._orientation = null;\r\n    }\r\n}","import { ISphereColliderShape } from \"../../interface/Shape/ISphereColliderShape\";\r\nimport { btPhysicsCreateUtil } from \"../btPhysicsCreateUtil\";\r\nimport { btColliderShape } from \"./btColliderShape\";\r\n\r\nexport class btSphereColliderShape extends btColliderShape implements ISphereColliderShape {\r\n    /**@internal */\r\n    private _radius: number = -1;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _getType(): number {\r\n        return this._type = btColliderShape.SHAPETYPES_SPHERE;\r\n    }\r\n\r\n    protected _createShape() {\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if (this._btShape) {\r\n            bt.btCollisionShape_destroy(this._btShape);\r\n        }\r\n        this._btShape = bt.btSphereShape_create(this._radius);\r\n    }\r\n\r\n    setRadius(radius: number): void {\r\n        if (this._radius == radius)\r\n            return;\r\n        this._radius = radius;\r\n        this._createShape();\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        this._radius = null;\r\n    }\r\n}","import { btCollider } from \"./Collider/btCollider\";\r\n\r\nexport interface IPhyDebugDrawer{\r\n    /**\r\n     * 设置颜色\r\n     * @param c \r\n     */\r\n    color(c:number):void;\r\n    /**\r\n     * 画线\r\n     * @param sx \r\n     * @param sy \r\n     * @param sz \r\n     * @param ex \r\n     * @param ey \r\n     * @param ez \r\n     */\r\n    line(sx:number,sy:number,sz:number, ex:number, ey:number,ez:number):void;\r\n    /**\r\n     * 清除画线结果\r\n     */\r\n    clear():void;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class BulletInteractive {\r\n    mem:WebAssembly.Memory;\r\n    dbgLine:IPhyDebugDrawer;\r\n    /**\r\n     * \r\n     * @param mem \r\n     * @param dbgline 如果要显示物理线框，要设置这个\r\n     */\r\n    constructor(mem:WebAssembly.Memory, dbgline:IPhyDebugDrawer){\r\n        this.mem=mem;\r\n        this.dbgLine=dbgline;\r\n    }\r\n    //Dynamic刚体,初始化时调用一次,Kinematic刚体,每次物理tick时调用(如果未进入睡眠状态),让物理引擎知道刚体位置。\r\n    getWorldTransform(rigidBodyID: number, worldTransPointer: number) {\r\n    }\r\n    //Dynamic刚体,物理引擎每帧调用一次,用于更新渲染矩阵。\r\n    setWorldTransform(rigidBodyID: number, worldTransPointer: number) {\r\n        var rigidBody = btCollider._physicObjectsMap[rigidBodyID];\r\n        rigidBody._physicsManager._updatedRigidbodies++;\r\n        rigidBody._updateTransformComponent(worldTransPointer);\r\n    }\r\n\r\n    drawLine=(sx: number, sy: number, sz: number, ex: number, ey: number, ez: number, color: number)=>{\r\n        if(!this.dbgLine) return;\r\n        this.dbgLine.color(color);\r\n        this.dbgLine.line(sx,sy,sz,ex,ey,ez);\r\n    }\r\n\r\n    clearLine=()=>{\r\n        if(!this.dbgLine) return;\r\n        this.dbgLine.clear();\r\n    }\r\n\r\n    jslog=(ptr: number, len: number)=>{\r\n        if(!this.mem) return;\r\n        let td = new TextDecoder();\r\n        let str = new Uint8Array(this.mem.buffer, ptr, len);\r\n        let jsstr = td.decode(str);\r\n        console.log(jsstr);\r\n    }\r\n\r\n}\r\n","import { Config3D } from \"../../../Config3D\";\r\nimport { Laya3D } from \"../../../Laya3D\";\r\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\r\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\";\r\nimport { PhysicsSettings } from \"../../d3/physics/PhysicsSettings\";\r\nimport { Mesh } from \"../../d3/resource/models/Mesh\";\r\nimport { PrimitiveMesh } from \"../../d3/resource/models/PrimitiveMesh\";\r\nimport { IPhysicsCreateUtil } from \"../interface/IPhysicsCreateUtil\";\r\nimport { ID6Joint } from \"../interface/Joint/ID6Joint\";\r\nimport { IHingeJoint } from \"../interface/Joint/IHingeJoint\";\r\nimport { IPlaneColliderShape } from \"../interface/Shape/IPlaneColliderShape\";\r\nimport { EPhysicsCapable } from \"../physicsEnum/EPhycisCapable\";\r\nimport { btCharacterCollider } from \"./Collider/btCharacterCollider\";\r\nimport { btCollider } from \"./Collider/btCollider\";\r\nimport { btRigidBodyCollider } from \"./Collider/btRigidBodyCollider\";\r\nimport { btStaticCollider } from \"./Collider/btStaticCollider\";\r\nimport { btCustomJoint } from \"./Joint/btCustomJoint\";\r\nimport { btFixedJoint } from \"./Joint/btFixedJoint\";\r\nimport { btHingeJoint } from \"./Joint/btHingeJoint\";\r\nimport { btSpringJoint } from \"./Joint/btSpringJoint\";\r\nimport { btBoxColliderShape } from \"./Shape/btBoxColliderShape\";\r\nimport { btCapsuleColliderShape } from \"./Shape/btCapsuleColliderShape\";\r\nimport { btConeColliderShape } from \"./Shape/btConeColliderShape\";\r\nimport { btCylinderColliderShape } from \"./Shape/btCylinderColliderShape\";\r\nimport { btMeshColliderShape } from \"./Shape/btMeshColliderShape\";\r\nimport { btSphereColliderShape } from \"./Shape/btSphereColliderShape\";\r\nimport { BulletInteractive } from \"./btInteractive\";\r\nimport { btPhysicsManager } from \"./btPhysicsManager\";\r\n\r\nexport class btPhysicsCreateUtil implements IPhysicsCreateUtil {\r\n    // capable map\r\n    protected _physicsEngineCapableMap: Map<any, any>;\r\n\r\n    initPhysicsCapable(): void {\r\n\r\n        this._physicsEngineCapableMap = new Map();\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_Gravity, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_StaticCollider, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_DynamicCollider, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CharacterCollider, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_BoxColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_SphereColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CapsuleColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CylinderColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_ConeColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_MeshColliderShape, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CompoundColliderShape, false);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_Joint, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_D6Joint, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_FixedJoint, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_SpringJoint, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_HingeJoint, true);\r\n        this._physicsEngineCapableMap.set(EPhysicsCapable.Physics_CreateCorveMesh, true);\r\n    }\r\n\r\n    getPhysicsCapable(value: EPhysicsCapable): boolean {\r\n        return this._physicsEngineCapableMap.get(value);\r\n    }\r\n\r\n    /**@internal */\r\n    static _bt: any;\r\n    //Bullet init\r\n    initialize(): Promise<void> {\r\n        let physics3D: Function = (window as any).Physics3D;\r\n        physics3D(Math.max(16, Config3D.defaultPhysicsMemory) * 16, new BulletInteractive(null, null)).then(() => {\r\n            btPhysicsCreateUtil._bt = (window as any).Physics3D;\r\n            this.initPhysicsCapable();\r\n            btPhysicsManager.init();\r\n            btCollider.__init__();\r\n            btRigidBodyCollider.__init__();\r\n            btStaticCollider.__init__();\r\n            btCharacterCollider.__init__();\r\n            btMeshColliderShape.__init__();\r\n            return Promise.resolve();\r\n        }\r\n        );\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n\r\n\r\n    createPhysicsManger(physicsSettings: PhysicsSettings): btPhysicsManager {\r\n        return new btPhysicsManager(physicsSettings);\r\n    }\r\n\r\n    createDynamicCollider(manager: btPhysicsManager): btRigidBodyCollider {\r\n        return new btRigidBodyCollider(manager);\r\n    }\r\n\r\n    createStaticCollider(manager: btPhysicsManager): btStaticCollider {\r\n        return new btStaticCollider(manager);\r\n    }\r\n\r\n    createCharacterController(manager: btPhysicsManager): btCharacterCollider {\r\n        return new btCharacterCollider(manager);\r\n    }\r\n\r\n    createFixedJoint(manager: btPhysicsManager): btFixedJoint {\r\n        return new btFixedJoint(manager);\r\n    }\r\n\r\n    createHingeJoint(manager: btPhysicsManager): IHingeJoint {\r\n        return new btHingeJoint(manager);\r\n    }\r\n\r\n    createSpringJoint(manager: btPhysicsManager): btSpringJoint {\r\n        return new btSpringJoint(manager);\r\n    }\r\n\r\n    createD6Joint(manager: btPhysicsManager): ID6Joint {\r\n        return new btCustomJoint(manager);\r\n    }\r\n\r\n    createBoxColliderShape(): btBoxColliderShape {\r\n        return new btBoxColliderShape();\r\n    }\r\n\r\n    createSphereColliderShape(): btSphereColliderShape {\r\n        return new btSphereColliderShape()\r\n    }\r\n\r\n    createCapsuleColliderShape(): btCapsuleColliderShape {\r\n        return new btCapsuleColliderShape();\r\n    }\r\n\r\n    createMeshColliderShape(): btMeshColliderShape {\r\n        return new btMeshColliderShape();\r\n    }\r\n\r\n    createPlaneColliderShape(): IPlaneColliderShape {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    createCylinderColliderShape(): btCylinderColliderShape {\r\n        return new btCylinderColliderShape();\r\n    }\r\n\r\n    createConeColliderShape(): btConeColliderShape {\r\n        return new btConeColliderShape();\r\n    }\r\n\r\n    createCorveMesh(mesh: Mesh): Mesh {\r\n        if (mesh._convexMesh == null) {\r\n            return null;\r\n        }\r\n        let bt = btPhysicsCreateUtil._bt;\r\n        if ((<any>mesh).__convexMesh == null) {\r\n            let convexMesh = mesh._convexMesh;\r\n            let vertexCount = bt.btShapeHull_numVertices(convexMesh);\r\n            let indexCount = bt.btShapeHull_numIndices(convexMesh);\r\n            var vertexDeclaration: VertexDeclaration = VertexMesh.getVertexDeclaration(\"POSITION\");\r\n            var vertexFloatStride: number = vertexDeclaration.vertexStride / 4;\r\n            var vertice: Float32Array = new Float32Array(vertexCount * vertexFloatStride);\r\n            let triangles: number[] = []\r\n            for (var i = 0; i < vertexCount; i++) {\r\n                let index = i * 3;\r\n                let vector3 = bt.btShapeHull_getVertexPointer(convexMesh, i);\r\n                vertice[index] = bt.btVector3_x(vector3);\r\n                vertice[index + 1] = bt.btVector3_y(vector3);\r\n                vertice[index + 2] = bt.btVector3_z(vector3);\r\n            }\r\n            for (var i = 0; i < indexCount; i++) {\r\n                triangles.push(bt.btShapeHull_getIndexPointer(convexMesh, i));\r\n            }\r\n            (<any>mesh).__convexMesh = PrimitiveMesh._createMesh(vertexDeclaration, vertice, new Uint16Array(triangles));\r\n        }\r\n        return (<any>mesh).__convexMesh;\r\n\r\n    }\r\n}\r\n\r\n\r\nLaya3D.PhysicsCreateUtil = new btPhysicsCreateUtil();","import { CompoundColliderShape } from \"../../../d3/physics/shape/CompoundColliderShape\";\r\nimport { Physics3DColliderShape } from \"../../../d3/physics/shape/Physics3DColliderShape\";\r\nimport { ICompoundColliderShape } from \"../../interface/Shape/ICompoundColliderShape\";\r\nimport { btColliderShape } from \"./btColliderShape\";\r\n\r\n/**\r\n * <code>CompoundColliderShape</code> 类用于创建组合碰撞器。\r\n */\r\nexport class btCompoundColliderShape extends btColliderShape implements ICompoundColliderShape {\r\n\t/**@internal */\r\n\tprivate static _btVector3One: number;\r\n\t/**@internal */\r\n\tprivate static _btTransform: number;\r\n\t/**@internal */\r\n\tprivate static _btOffset: number;\r\n\t/**@internal */\r\n\tprivate static _btRotation: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\t//var bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t// CompoundColliderShape._btVector3One = bt.btVector3_create(1, 1, 1);\r\n\t\t// CompoundColliderShape._btTransform = bt.btTransform_create();\r\n\t\t// CompoundColliderShape._btOffset = bt.btVector3_create(0, 0, 0);\r\n\t\t// CompoundColliderShape._btRotation = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _childColliderShapes: Physics3DColliderShape[] = [];\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CompoundColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t// this._type = Physics3DColliderShape.;\r\n\t\t// this._btShape = ILaya3D.Physics3D._bullet.btCompoundShape_create();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _clearChildShape(shape: any): void {\r\n\t\tshape._attatched = false;\r\n\t\tshape._compoundParent = null;\r\n\t\tshape._indexInCompound = -1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateChildTransform(shape: any): void {\r\n\t\t// var bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t// var offset: Vector3 = shape.localOffset;\r\n\t\t// var rotation: Quaternion = shape.localRotation;\r\n\t\t// var btOffset: number = ColliderShape._btVector30;\r\n\t\t// var btQuaternion: number = ColliderShape._btQuaternion0;\r\n\t\t// var btTransform: number = ColliderShape._btTransform0;\r\n\t\t// bt.btVector3_setValue(btOffset, offset.x, offset.y, offset.z);\r\n\t\t// bt.btQuaternion_setValue(btQuaternion, rotation.x, rotation.y, rotation.z, rotation.w);\r\n\t\t// bt.btTransform_setOrigin(btTransform, btOffset);\r\n\t\t// bt.btTransform_setRotation(btTransform, btQuaternion);\r\n\t\t// bt.btCompoundShape_updateChildTransform(this._btShape, shape._indexInCompound, btTransform, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 设置物理shape数组\r\n\t * IDE\r\n\t */\r\n\tpublic set shapes(value: any[]) {\r\n\t\tfor (var i = this._childColliderShapes.length - 1; i >= 0; i--) {\r\n\t\t\tthis.removeChildShape(this._childColliderShapes[i]);\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < value.length; i++) {\r\n\t\t\tthis.addChildShape(value[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get shapes(): any[] {\r\n\t\treturn this._childColliderShapes;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\taddChildShape(shape: any): void {\r\n\t\t// if (shape._attatched)\r\n\t\t// \tthrow \"CompoundColliderShape: this shape has attatched to other entity.\";\r\n\r\n\t\t// shape._attatched = true;\r\n\t\t// shape._compoundParent = this;\r\n\t\t// shape._indexInCompound = this._childColliderShapes.length;\r\n\t\t// this._childColliderShapes.push(shape);\r\n\t\t// var offset: Vector3 = shape.localOffset;\r\n\t\t// var rotation: Quaternion = shape.localRotation;\r\n\t\t// var bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t// bt.btVector3_setValue(CompoundColliderShape._btOffset, offset.x, offset.y, offset.z);\r\n\t\t// bt.btQuaternion_setValue(CompoundColliderShape._btRotation, rotation.x, rotation.y, rotation.z, rotation.w);\r\n\t\t// bt.btTransform_setOrigin(CompoundColliderShape._btTransform, CompoundColliderShape._btOffset);\r\n\t\t// bt.btTransform_setRotation(CompoundColliderShape._btTransform, CompoundColliderShape._btRotation);\r\n\r\n\t\t// var btScale: number = bt.btCollisionShape_getLocalScaling(this._btShape);\r\n\t\t// bt.btCollisionShape_setLocalScaling(this._btShape, CompoundColliderShape._btVector3One);\r\n\t\t// bt.btCompoundShape_addChildShape(this._btShape, CompoundColliderShape._btTransform, shape._btShape);\r\n\t\t// bt.btCollisionShape_setLocalScaling(this._btShape, btScale);\r\n\r\n\t\t// (this._attatchedCollisionObject) && (this._attatchedCollisionObject.colliderShape = this);//修改子Shape需要重新赋值父Shape以及将物理精灵重新加入物理世界等操作\r\n\t}\r\n\r\n\t/**\r\n\t * 移除子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\tremoveChildShape(shape:any): void {\r\n\t\t// if (shape._compoundParent === this) {\r\n\t\t// \tvar index: number = shape._indexInCompound;\r\n\t\t// \tthis._clearChildShape(shape);\r\n\t\t// \tvar endShape: ColliderShape = this._childColliderShapes[this._childColliderShapes.length - 1];\r\n\t\t// \tendShape._indexInCompound = index;\r\n\t\t// \tthis._childColliderShapes[index] = endShape;\r\n\t\t// \tthis._childColliderShapes.pop();\r\n\t\t// \tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, index);\r\n\t\t// }\r\n\t}\r\n\r\n\t/**\r\n\t * 清空子碰撞器形状。\r\n\t */\r\n\tclearChildShape(): void {\r\n\t\t// for (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t// \tthis._clearChildShape(this._childColliderShapes[i]);\r\n\t\t// \tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, 0);\r\n\t\t// }\r\n\t\t// this._childColliderShapes.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取子形状数量。\r\n\t * @return\r\n\t */\r\n\tgetChildShapeCount(): number {\r\n\t\treturn this._childColliderShapes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destCompoundColliderShape: CompoundColliderShape = (<CompoundColliderShape>destObject);\r\n\t\tdestCompoundColliderShape.clearChildShape();\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++)\r\n\t\t\tdestCompoundColliderShape.addChildShape(this._childColliderShapes[i].clone());\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CompoundColliderShape = new CompoundColliderShape();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\t// super.destroy();\r\n\t\t// for (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t// \tvar childShape: ColliderShape = this._childColliderShapes[i];\r\n\t\t// \tif (childShape._referenceCount === 0)\r\n\t\t// \t\tchildShape.destroy();\r\n\t\t// }\r\n\t}\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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"}