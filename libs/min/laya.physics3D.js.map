{"version":3,"names":["Physics3DColliderShape","constructor","this","_localOffset","Vector3","_createShape","localOffset","value","_shape","setOffset","cloneTo","destObject","destColliderShape","clone","destroy","SHAPEORIENTATION_UPX","SHAPEORIENTATION_UPY","SHAPEORIENTATION_UPZ","BoxColliderShape","sizeX","sizeY","sizeZ","super","_size","setSize","Laya3D","PhysicsCreateUtil","getPhysicsCapable","EPhysicsCapable","Physics_BoxColliderShape","createBoxColliderShape","console","error","size","LayaEnv","isPlaying","dest","x","y","z","SphereColliderShape","radius","_radius","setRadius","Physics_SphereColliderShape","createSphereColliderShape","CapsuleColliderShape","length","orientation","_length","setHeight","_orientation","setUpAxis","Physics_CapsuleColliderShape","createCapsuleColliderShape","MeshColliderShape","_mesh","_convex","_convexVertexMax","mesh","_changeShape","setConvexMesh","setPhysicsMeshFromMesh","convexVertexMax","Math","max","min","convex","Physics_MeshColliderShape","createMeshColliderShape","destMeshCollider","ConeColliderShape","height","_height","Physics_ConeColliderShape","createConeColliderShape","CylinderColliderShape","Physics_CylinderColliderShape","createCylinderColliderShape","PhysicsCombineMode","PhysicsForceMode","PhysicsColliderComponent","Component","_restitution","_friction","_rollingFriction","_dynamicFriction","_staticFriction","_frictionCombine","_restitutionCombine","_ccdMotionThreshold","_ccdSweptSphereRadius","_collisionGroup","_canCollideWith","_colliderShape","_transformFlag","_controlBySimulation","collider","_collider","restitution","getCapable","EColliderCapable","Collider_Restitution","setBounciness","friction","Collider_Friction","setfriction","rollingFriction","Collider_RollingFriction","setRollingFriction","dynamicFriction","Collider_DynamicFriction","setDynamicFriction","staticFriction","Collider_StaticFriction","setStaticFriction","frictionCombine","Collider_FrictionCombine","setFrictionCombine","restitutionCombine","Collider_BounceCombine","setBounceCombine","ccdMotionThreshold","ccdSweptSphereRadius","colliderShape","setColliderShape","collisionGroup","Collider_CollisionGroup","_enabled","setCollisionGroup","canCollideWith","setCanCollideWith","_parseShape","shapesData","shape","_creatShape","initCollider","_initCollider","setOwner","owner","_setEventFilter","_onAdded","scene","off","Node","EVENT_SET_ACTIVESCENE","on","Event","_Add_Script","_onEnable","transform","TRANSFORM_CHANGED","_onTransformChanged","_physicsManager","_scene","componentEnable","addCollider","_onDisable","removeCollider","_onDestroy","flag","Transform3D","TRANSFORM_WORLDPOSITION","TRANSFORM_WORLDQUATERNION","TRANSFORM_WORLDSCALE","transformChanged","_cloneTo","destPhysicsComponent","static","shapeData","type","sizeData","_parse","data","CharacterController","_stepHeight","_upAxis","_maxSlope","_gravity","_offset","_minDistance","_simGravity","_pushForce","physicsSimulation","enablePhysics","Physics_CharacterCollider","createCharacterController","onUpdate","move","ECharacterCapable","Character_Radius","Character_Height","minDistance","Character_minDistance","setminDistance","centerOffset","Character_offset","setShapelocalOffset","gravity","Charcater_Gravity","setGravity","skinWidth","_contactOffset","Character_Skin","setSkinWidth","maxSlope","Character_SlopeLimit","setSlopeLimit","stepHeight","Charcater_StepOffset","setStepOffset","upAxis","Character_UpDirection","setUpDirection","position","v","Charcater_WorldPosition","setPosition","pushForce","Character_PushForce","setPushForce","getVerticalVel","movement","Charcater_Move","jump","velocity","Charcater_Jump","destCharacterController","Character_EventFilter","_eventsArray","hasListener","COLLISION_ENTER","push","COLLISION_STAY","COLLISION_EXIT","setEventFilter","ConstraintComponent","_enableCollison","_breakForce","Number","MAX_VALUE","_breakTorque","_ownColliderLocalPos","_connectColliderLocalPos","initJoint","_initJoint","_joint","setLocalPos","setConnectLocalPos","setBreakForce","breakForce","setBreakTorque","connectedBody","_connectCollider","setConnectedCollider","ownBody","_ownCollider","setCollider","currentForce","getlinearForce","currentTorque","getAngularForce","breakTorque","anchor","connectAnchor","enableCollison","isCollision","setOverrideNumSolverIterations","overideNumIterations","setConstraintEnabled","enable","isBreakConstrained","isValid","ConfigurableConstraint","_axis","_secondaryAxis","_xMotion","D6Axis","eFREE","_yMotion","_zMotion","_angularXMotion","_angularYMotion","_angularZMotion","_distanceLimit","_distanceBounciness","_distanceBounceThreshold","_distanceSpring","_distanceDamper","_twistUper","_twistLower","_twistBounceness","_twistBounceThreshold","_twistStiffness","_twistDamping","_ySwingAngleLimit","_zSwingAngleLimit","_Swingrestitution","_SwingbounceThreshold","_SwingStiffness","_SwingDamping","_targetPosition","_targetRotation","_targetVelocity","_targetAngularVelocity","_linearDriveforceLimit","_linearDriveForce","_linearDriveDamping","_angularXDriveForceLimit","_angularXDriveForce","_angularXDriveDamp","_angularYZDriveForceLimit","_angularYZDriveForce","_angularYZDriveDamp","_angularSlerpDriveForceLimit","_angularSlerpDriveForce","_angularSlerpDriveDamp","_setDriveLinearX","setDrive","D6Drive","eX","_setDriveLinearY","eY","_setDriveLinearZ","eZ","_setAngularXDrive","eSWING","_setAngularYZDrive","eTWIST","_setAngularSlerpDrive","eSLERP","_setDistanceLimit","setDistanceLimit","_setAngularXLimit","setTwistLimit","PI","_setSwingLimit","setSwingLimit","_setTargetTransform","rotate","Quaternion","TEMP","createFromYawPitchRoll","_angleToRandin","setDriveTransform","_setAxis","setAxis","_setTargetVelocirty","setDriveVelocity","axis","secondaryAxis","XMotion","setMotion","D6MotionType","YMotion","ZMotion","angularXMotion","angularYMotion","eSWING1","angularZMotion","eSWING2","distanceLimit","distanceBounciness","distanceBounceThreshold","distanceSpring","distanceDamper","angularXMaxLimit","angularXMinLimit","AngleXLimitBounceness","AngleXLimitBounceThreshold","AngleXLimitSpring","AngleXLimitDamp","AngleYLimit","AngleZLimit","AngleYZLimitBounciness","AngleYZLimitBounceThreshold","AngleYZLimitSpring","AngleYZLimitDamping","targetPosition","targetRotation","targetPositionVelocity","targetAngularVelocity","XDriveSpring","YDriveSpring","ZDriveSpring","XDriveDamp","YDriveDamp","ZDriveDamp","XDriveForceLimit","YDriveForceLimit","ZDriveForceLimit","angularXDriveForceLimit","angularXDriveForce","angularXDriveDamp","angularYZDriveForceLimit","angularYZDriveForce","angularYZDriveDamp","angularSlerpDriveForceLimit","angularSlerpDriveForce","angularSlerpDriveDamp","_initAllConstraintInfo","isEnable","Physics_D6Joint","createD6Joint","FixedConstraint","Physics_FixedJoint","createFixedJoint","HingeConstraint","_motor","_freeSpin","_limit","_lowerLimit","_uperLimit","_bounciness","_bounceMinVelocity","_contactDistance","Physics_HingeJoint","createHingeJoint","Axis","equal","normalize","lowerLimit","lowerValue","setLowerLimit","uperLimit","uperValue","setUpLimit","bounceness","setBounceness","bouncenMinVelocity","setBouncenMinVelocity","contactDistance","setContactDistance","limit","enableLimit","motor","enableDrive","freeSpin","enableFreeSpin","targetVelocity","getAngle","getVelocity","_tempVector3","set","SpringConstraint","_damping","_maxDistance","_tolerance","_stiffness","Physics_SpringJoint","createSpringJoint","setMinDistance","maxDistance","setMaxDistance","tolerance","setTolerance","spring","setStiffness","damping","setDamping","PhysicsCollider","_isTrigger","Physics_StaticCollider","createStaticCollider","isTrigger","Collider_AllowTrigger","setTrigger","shapes","Collider_EventFilter","TRIGGER_ENTER","TRIGGER_STAY","TRIGGER_EXIT","PhysicsUpdateList","SingletonList","add","element","inPhysicUpdateListIndex","_add","remove","index","end","elements","_inPhysicUpdateListIndex","Rigidbody3D","_isKinematic","_mass","_angularDamping","_linearDamping","_linearVelocity","_angularVelocity","_linearFactor","_angularFactor","_trigger","Physics_DynamicCollider","createDynamicCollider","mass","RigidBody_Mass","setMass","isKinematic","RigidBody_AllowKinematic","setIsKinematic","linearDamping","RigidBody_LinearDamp","setLinearDamping","angularDamping","RigidBody_AngularDamp","setAngularDamping","RigidBody_Gravity","setInertiaTensor","linearFactor","RigidBody_LinearFactor","setConstraints","angularFactor","linearVelocity","RigidBody_LinearVelocity","setLinearVelocity","RigidBody_AngularFactor","angularVelocity","RigidBody_AngularVelocity","setAngularVelocity","sleepThreshold","_sleepThreshold","RigidBody_SleepThreshold","setSleepThreshold","pos","RigidBody_WorldPosition","setWorldPosition","q","RigidBody_WorldOrientation","setWorldRotation","trigger","_btLayaMotionState","destRigidbody3D","applyForce","force","RigidBody_ApplyForce","addForce","Force","applyTorque","torque","RigidBody_ApplyTorque","addTorque","applyImpulse","impulse","RigidBody_ApplyImpulse","Impulse","applyTorqueImpulse","torqueImpulse","RigidBody_ApplyTorqueImpulse","wakeUp","RigidBody_AllowSleep","sleepLinearVelocity","sleepAngularVelocity","applyForceXYZ","fx","fy","fz","Utils3D","_tempV0","linFac","fromArray","angFac","CompoundColliderShape","_childColliderShapes","_clearChildShape","_attatched","_compoundParent","_indexInCompound","_updateChildTransform","i","removeChildShape","addChildShape","clearChildShape","getChildShapeCount","destCompoundColliderShape","n","c","ClassUtils","regClass","heightFieldData","_terrainData","setHeightFieldData","numRows","numCols","heightData","scale","physics_heightFieldColliderShape","createHeightFieldShape"],"sources":["../../src/layaAir/laya/d3/physics/shape/Physics3DColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/BoxColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/SphereColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CapsuleColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/MeshColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/ConeColliderShape.ts","../../src/layaAir/laya/d3/physics/shape/CylinderColliderShape.ts","../../src/layaAir/laya/d3/physics/PhysicsColliderComponent.ts","../../src/layaAir/laya/d3/physics/CharacterController.ts","../../src/layaAir/laya/d3/physics/constraints/ConstraintComponent.ts","../../src/layaAir/laya/d3/physics/constraints/ConfigurableConstraint.ts","../../src/layaAir/laya/d3/physics/constraints/FixedConstraint.ts","../../src/layaAir/laya/d3/physics/constraints/HingeConstraint.ts","../../src/layaAir/laya/d3/physics/constraints/SpringConstraint.ts","../../src/layaAir/laya/d3/physics/PhysicsCollider.ts","../../src/layaAir/laya/d3/physics/PhysicsUpdateList.ts","../../src/layaAir/laya/d3/physics/Rigidbody3D.ts","../../src/layaAir/laya/d3/physics/shape/CompoundColliderShape.ts","../../src/layaAir/laya/d3/physics/ModuleDef.ts","../../src/layaAir/laya/d3/physics/shape/HeightFieldColliderShape.ts"],"sourcesContent":["import { IClone } from \"../../../utils/IClone\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IColliderShape } from \"../../../Physics3D/interface/Shape/IColliderShape\";\r\n\r\n/**\r\n * <code>ColliderShape</code> 类用于创建形状碰撞器的父类，该类为抽象类。\r\n */\r\nexport class Physics3DColliderShape implements IClone {\r\n\r\n\t/** 形状方向_X轴正向 */\r\n\tstatic SHAPEORIENTATION_UPX: number = 0;\r\n\t/** 形状方向_Y轴正向 */\r\n\tstatic SHAPEORIENTATION_UPY: number = 1;\r\n\t/** 形状方向_Z轴正向 */\r\n\tstatic SHAPEORIENTATION_UPZ: number = 2;\r\n\t\r\n\t\r\n\t_shape: IColliderShape;\r\n\r\n\t/**@internal */\r\n\tprotected _localOffset: Vector3 = new Vector3(0, 0, 0);\r\n\r\n\t/**\r\n\t * Shape的本地偏移。\r\n\t */\r\n\tget localOffset(): Vector3 {\r\n\t\treturn this._localOffset;\r\n\t}\r\n\r\n\tset localOffset(value: Vector3) {\r\n\t\tthis._localOffset = value;\r\n\t\tthis._shape.setOffset(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>ColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tthis._createShape();\r\n\t}\r\n\r\n\tprotected _createShape() {\r\n\t\tthrow \"override it\";\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @param\tdestObject 克隆源。\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destColliderShape: Physics3DColliderShape = (<Physics3DColliderShape>destObject);\r\n\t\tthis._localOffset.cloneTo(destColliderShape.localOffset);\r\n\t\tdestColliderShape.localOffset = destColliderShape.localOffset;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆。\r\n\t * @return 克隆副本。\r\n\t */\r\n\tclone(): any {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * 销毁。\r\n\t */\r\n\tdestroy(): void {\r\n\t\tif (this._shape) {\r\n\t\t\tthis._shape.destroy();\r\n\t\t\tthis._shape = null;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IBoxColliderShape } from \"../../../Physics3D/interface/Shape/IBoxColliderShape\";\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\n\r\n/**\r\n * <code>BoxColliderShape</code> 类用于创建盒子形状碰撞器。\r\n */\r\nexport class BoxColliderShape extends Physics3DColliderShape {\r\n\r\n\t/**@internal */\r\n\t_shape: IBoxColliderShape;\r\n\t/**@internal */\r\n\tprivate _size: Vector3;\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>BoxColliderShape</code> 实例。\r\n\t * @param sizeX 盒子X轴尺寸。\r\n\t * @param sizeY 盒子Y轴尺寸。\r\n\t * @param sizeZ 盒子Z轴尺寸。\r\n\t */\r\n\tconstructor(sizeX: number = 1.0, sizeY: number = 1.0, sizeZ: number = 1.0) {\r\n\t\tsuper();\r\n\t\tthis._size = new Vector3(sizeX, sizeY, sizeZ);\r\n\t\tthis._shape.setSize(this._size);\r\n\t}\r\n\r\n\r\n\tprotected _createShape() {\r\n\t\tif (Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_BoxColliderShape))\r\n\t\t\tthis._shape = Laya3D.PhysicsCreateUtil.createBoxColliderShape();\r\n\t\telse {\r\n\t\t\tconsole.error(\"BoxColliderShape: cant enable BoxColliderShape\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Box size\r\n\t */\r\n\tget size(): Vector3 {\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tset size(value: Vector3) {\r\n\t\tthis._size = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis._shape.setSize(this._size);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: BoxColliderShape = new BoxColliderShape(this._size.x, this._size.y, this._size.z);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\tcloneTo(destObject: any): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tdestObject.size = this.size;\r\n\t}\r\n\r\n\t//-------------------deprecated-------------------\r\n\t/**\r\n\t * @description\r\n\t * X轴尺寸。\r\n\t */\r\n\tget sizeX(): number {\r\n\t\treturn this.size.x;\r\n\t}\r\n\r\n\tset sizeX(value: number) {\r\n\t\tthis._size.x = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis._shape.setSize(this._size);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description\r\n\t * Y轴尺寸。\r\n\t */\r\n\tget sizeY(): number {\r\n\t\treturn this.size.y;\r\n\t}\r\n\r\n\tset sizeY(value: number) {\r\n\t\tthis._size.y = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis._shape.setSize(this._size);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description\r\n\t * Z轴尺寸。\r\n\t */\r\n\tget sizeZ(): number {\r\n\t\treturn this.size.z;\r\n\t}\r\n\r\n\tset sizeZ(value: number) {\r\n\t\tthis._size.z = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis._shape.setSize(this._size);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { ISphereColliderShape } from \"../../../Physics3D/interface/Shape/ISphereColliderShape\";\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\n\r\n/**\r\n * <code>SphereColliderShape</code> 类用于创建球形碰撞器。\r\n */\r\nexport class SphereColliderShape extends Physics3DColliderShape {\r\n\t/**@internal */\r\n\t_shape: ISphereColliderShape;\r\n\t/** @internal */\r\n\tprivate _radius: number;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) this._shape.setRadius(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>SphereColliderShape</code> 实例。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5) {//TODO:球形旋转无效，需要优化\r\n\t\tsuper();\r\n\t\tthis.radius = radius;\r\n\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprotected _createShape() {\r\n\t\tif (Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_SphereColliderShape))\r\n\t\t\tthis._shape = Laya3D.PhysicsCreateUtil.createSphereColliderShape()\r\n\t\telse\r\n\t\t\tconsole.error(\"SphereColliderShape: cant enable SphereColliderShape\");\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: SphereColliderShape = new SphereColliderShape(this._radius);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**@internal */\r\n\tcloneTo(destObject: SphereColliderShape): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tdestObject.radius = this.radius\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Laya3D } from \"../../../../Laya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { ICapsuleColliderShape } from \"../../../Physics3D/interface/Shape/ICapsuleColliderShape\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\n/**\r\n * <code>CapsuleColliderShape</code> 类用于创建胶囊形状碰撞器。\r\n */\r\nexport class CapsuleColliderShape extends Physics3DColliderShape {\r\n\r\n\t_shape: ICapsuleColliderShape;\r\n\r\n\t/**@internal */\r\n\tprivate _radius: number;\r\n\r\n\t/**@internal */\r\n\tprivate _length: number;\r\n\r\n\t/**@internal */\r\n\tprivate _orientation: number;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis._shape.setRadius(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 长度。\r\n\t */\r\n\tget length(): number {\r\n\t\treturn this._length;\r\n\t}\r\n\r\n\tset length(value: number) {\r\n\t\tthis._length = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis._shape.setHeight(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\tset orientation(value: number) {\r\n\t\tthis._orientation = value;\r\n\t\tif (LayaEnv.isPlaying) {\r\n\t\t\tthis._shape.setUpAxis(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CapsuleColliderShape</code> 实例。\r\n\t * @param 半径。\r\n\t * @param 高(包含半径)。\r\n\t * @param orientation 胶囊体方向。\r\n\t */\r\n\tconstructor(radius: number = 0.5, length: number = 2, orientation: number = Physics3DColliderShape.SHAPEORIENTATION_UPY) {\r\n\t\tsuper();\r\n\t\tthis.radius = radius;\r\n\t\tthis.length = length;\r\n\t\tthis.orientation = orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tprotected _createShape() {\r\n\t\tif (Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_CapsuleColliderShape))\r\n\t\t\tthis._shape = Laya3D.PhysicsCreateUtil.createCapsuleColliderShape();\r\n\t\telse {\r\n\t\t\tconsole.error(\"CapsuleColliderShape: cant enable CapsuleColliderShape\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CapsuleColliderShape = new CapsuleColliderShape(this._radius, this._length, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: CapsuleColliderShape): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tdestObject.radius = this.radius;\r\n\t\tdestObject.length = this.length;\r\n\t\tdestObject.orientation = this.orientation;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { Mesh } from \"../../resource/models/Mesh\";\r\nimport { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\nimport { IMeshColliderShape } from \"../../../Physics3D/interface/Shape/IMeshColliderShape\";\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\n\r\n/**\r\n * <code>MeshColliderShape</code> 类用于创建网格碰撞器。\r\n */\r\nexport class MeshColliderShape extends Physics3DColliderShape {\r\n\t/** @internal */\r\n\tprivate _mesh: Mesh = null;\r\n\t/** @internal */\r\n\tprivate _convex: boolean = false;\r\n\t/** @internal */\r\n\tprivate _convexVertexMax: number = 255;\r\n\r\n\t_shape: IMeshColliderShape;\r\n\r\n\t/**\r\n\t * 网格。\r\n\t */\r\n\tget mesh(): Mesh {\r\n\t\treturn this._mesh;\r\n\t}\r\n\r\n\tset mesh(value: Mesh) {\r\n\t\tif ((this._mesh == value && this._shape) || !value)\r\n\t\t\treturn;\r\n\t\tthis._mesh = value;\r\n\t\tthis._changeShape();\r\n\t}\r\n\r\n\tprivate _changeShape() {\r\n\t\tif (!this.mesh)\r\n\t\t\treturn;\r\n\t\tif (this._convex)\r\n\t\t\tthis._shape.setConvexMesh(this.mesh);\r\n\t\telse\r\n\t\t\tthis._shape.setPhysicsMeshFromMesh(this.mesh);\r\n\t}\r\n\r\n\t/**\r\n\t * 是否使用凸多边形。\r\n\t */\r\n\tget convexVertexMax(): number {\r\n\t\treturn this._convexVertexMax;\r\n\t}\r\n\r\n\tset convexVertexMax(value: number) {\r\n\t\tvalue = Math.max(Math.min(255, value), 0);\r\n\t\tthis._convexVertexMax = value;\r\n\t}\r\n\r\n\t/**\r\n\t * 是否使用凸多边形。\r\n\t */\r\n\tget convex(): boolean {\r\n\t\treturn this._convex;\r\n\t}\r\n\r\n\tset convex(value: boolean) {\r\n\t\tif (value == this._convex){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._convex = value;\r\n\t\tthis._changeShape();\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>MeshColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tprotected _createShape() {\r\n\t\tif (Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_MeshColliderShape))\r\n\t\t\tthis._shape = Laya3D.PhysicsCreateUtil.createMeshColliderShape();\r\n\t\telse {\r\n\t\t\tconsole.error(\"MeshColliderShape: cant enable MeshColliderShape\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destMeshCollider: MeshColliderShape = (<MeshColliderShape>destObject);\r\n\t\tdestMeshCollider.convex = this._convex;\r\n\t\tdestMeshCollider._convexVertexMax = this._convexVertexMax;\r\n\t\tdestMeshCollider.mesh = this._mesh;\r\n\t\tsuper.cloneTo(destObject);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: MeshColliderShape = new MeshColliderShape();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n}\r\n\r\n\r\n","\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { IConeColliderShape } from \"../../../Physics3D/interface/Shape/IConeColliderShape\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\n/**\r\n * <code>ConeColliderShape</code> 类用于创建圆锥碰撞器。\r\n */\r\nexport class ConeColliderShape extends Physics3DColliderShape {\r\n\t/**@internal */\r\n\t_shape: IConeColliderShape;\r\n\r\n\t/**@internal */\r\n\tprivate _orientation: number;\r\n\t/**@internal */\r\n\tprivate _radius: number = 1;\r\n\t/**@internal */\r\n\tprivate _height: number = 0.5;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) this._shape.setRadius(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高度。\r\n\t */\r\n\tget height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tset height(value: number) {\r\n\t\tthis._height = value;\r\n\t\tif (LayaEnv.isPlaying) this._shape.setHeight(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\tset orientation(value: number) {\r\n\t\tthis._orientation = value;\r\n\t\tif (LayaEnv.isPlaying) this._shape.setUpAxis(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>ConeColliderShape</code> 实例。\r\n\t * @param height 高。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = Physics3DColliderShape.SHAPEORIENTATION_UPY) {\r\n\t\tsuper();\r\n\t\tthis.radius = radius;\r\n\t\tthis.height = height;\r\n\t\tthis.orientation = orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _createShape() {\r\n\t\tif (Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_ConeColliderShape)) {\r\n\t\t\tthis._shape = Laya3D.PhysicsCreateUtil.createConeColliderShape();\r\n\t\t} else {\r\n\t\t\tconsole.error(\"ConeColliderShape: cant enable ConeColliderShape\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @returns 克隆的ConeColliderShape实例\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: ConeColliderShape = new ConeColliderShape(this._radius, this._height, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @returns 克隆的ConeColliderShape实例\r\n\t */\r\n\tcloneTo(destObject: ConeColliderShape): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tdestObject.radius = this.radius;\r\n\t\tdestObject.height = this.height;\r\n\t\tdestObject.orientation = this.orientation;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { LayaEnv } from \"../../../../LayaEnv\";\r\nimport { ICylinderColliderShape } from \"../../../Physics3D/interface/Shape/ICylinderColliderShape\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\n\r\n/**\r\n * <code>CylinderColliderShape</code> 类用于创建圆柱碰撞器。\r\n */\r\nexport class CylinderColliderShape extends Physics3DColliderShape {\r\n\t/**@internal */\r\n\t_shape: ICylinderColliderShape;\r\n\t/**@internal */\r\n\tprivate _orientation: number;\r\n\t/**@internal */\r\n\tprivate _radius: number = 1;\r\n\t/**@internal */\r\n\tprivate _height: number = 0.5;\r\n\r\n\t/**\r\n\t * 半径。\r\n\t */\r\n\tget radius(): number {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tset radius(value: number) {\r\n\t\tthis._radius = value;\r\n\t\tif (LayaEnv.isPlaying) this._shape.setRadius(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 高度。\r\n\t */\r\n\tget height(): number {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tset height(value: number) {\r\n\t\tthis._height = value;\r\n\t\tif (LayaEnv.isPlaying) this._shape.setHeight(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 方向。\r\n\t */\r\n\tget orientation(): number {\r\n\t\treturn this._orientation;\r\n\t}\r\n\r\n\tset orientation(value: number) {\r\n\t\tthis._orientation = value;\r\n\t\tif (LayaEnv.isPlaying) this._shape.setUpAxis(value);\r\n\t}\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CylinderColliderShape</code> 实例。\r\n\t * @param height 高。\r\n\t * @param radius 半径。\r\n\t */\r\n\tconstructor(radius: number = 0.5, height: number = 1.0, orientation: number = Physics3DColliderShape.SHAPEORIENTATION_UPY) {\r\n\t\tsuper();\r\n\t\tthis.radius = radius;\r\n\t\tthis.height = height;\r\n\t\tthis.orientation = orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t * @override\r\n\t */\r\n\tprotected _createShape() {\r\n\t\tif (Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_CylinderColliderShape)) {\r\n\t\t\tthis._shape = Laya3D.PhysicsCreateUtil.createCylinderColliderShape();\r\n\t\t} else {\r\n\t\t\tconsole.error(\"CylinderColliderShape: cant enable CylinderColliderShape\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CylinderColliderShape = new CylinderColliderShape(this._radius, this._height, this._orientation);\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * 克隆\r\n\t * @inheritDoc\r\n\t * @override\r\n\t * @returns 克隆的ConeColliderShape实例\r\n\t */\r\n\tcloneTo(destObject: CylinderColliderShape): void {\r\n\t\tsuper.cloneTo(destObject);\r\n\t\tdestObject.radius = this.radius;\r\n\t\tdestObject.height = this.height;\r\n\t\tdestObject.orientation = this.orientation;\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ICollider } from \"../../Physics3D/interface/ICollider\";\r\nimport { Component } from \"../../components/Component\";\r\nimport { Sprite3D } from \"../core/Sprite3D\";\r\nimport { Transform3D } from \"../core/Transform3D\";\r\nimport { BoxColliderShape } from \"./shape/BoxColliderShape\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { IPhysicsManager } from \"../../Physics3D/interface/IPhysicsManager\";\r\nimport { Physics3DColliderShape } from \"./shape/Physics3DColliderShape\";\r\nimport { SphereColliderShape } from \"./shape/SphereColliderShape\";\r\nimport { CapsuleColliderShape } from \"./shape/CapsuleColliderShape\";\r\nimport { EColliderCapable } from \"../../Physics3D/physicsEnum/EColliderCapable\";\r\nimport { Node } from \"../../display/Node\";\r\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\r\nimport { ConeColliderShape } from \"./shape/ConeColliderShape\";\r\nimport { CylinderColliderShape } from \"./shape/CylinderColliderShape\";\r\n\r\n/**\r\n * Describes how physics materials of the colliding objects are combined.\r\n */\r\nexport enum PhysicsCombineMode {\r\n    /** Averages the friction/bounce of the two colliding materials. */\r\n    Average,\r\n    /** Uses the smaller friction/bounce of the two colliding materials. */\r\n    Minimum,\r\n    /** Multiplies the friction/bounce of the two colliding materials. */\r\n    Multiply,\r\n    /** Uses the larger friction/bounce of the two colliding materials. */\r\n    Maximum\r\n}\r\n\r\nexport enum PhysicsForceMode {\r\n    Force,\r\n    Impulse\r\n}\r\n/**\r\n * <code>PhysicsColliderComponent</code> 类用于创建物理组件的父类。\r\n */\r\nexport class PhysicsColliderComponent extends Component {\r\n\r\n    /** @internal */\r\n    protected _restitution = 0.0;\r\n    /** @internal */\r\n    protected _friction = 0.5;\r\n    /** @internal */\r\n    protected _rollingFriction = 0.0;\r\n    /**@internal */\r\n    protected _dynamicFriction = 0.0;\r\n    /**@internal */\r\n    protected _staticFriction = 0.0;\r\n    /**@internal */\r\n    protected _frictionCombine = 0.0;\r\n    /**@internal */\r\n    protected _restitutionCombine = 0.0;\r\n    /** @internal */\r\n    protected _ccdMotionThreshold = 0.0;\r\n    /** @internal */\r\n    protected _ccdSweptSphereRadius = 0.0;\r\n    /** @internal */\r\n    protected _collisionGroup: number = 0x1;\r\n    /** @internal */\r\n    protected _canCollideWith: number = -1;\r\n    /** @internal */\r\n    protected _colliderShape: Physics3DColliderShape = null;\r\n    /** @internal */\r\n    protected _transformFlag = 2147483647 /*int.MAX_VALUE*/;\r\n    /** @internal 是否只接受物理引擎的模拟变化 Rigidbody为true*/\r\n    protected _controlBySimulation: boolean = false;\r\n    /**@internal */\r\n    protected _physicsManager: IPhysicsManager;\r\n    /**@internal */\r\n    protected _collider: ICollider;\r\n    /**@internal */\r\n    protected _eventsArray: string[];\r\n\r\n    get collider(): ICollider {\r\n        return this._collider;\r\n    }\r\n\r\n    /**\r\n     * 弹力。也叫Bounciness\r\n     */\r\n    get restitution(): number {\r\n        return this._restitution;\r\n    }\r\n\r\n    set restitution(value: number) {\r\n        this._restitution = value;\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_Restitution)) {\r\n            this._collider.setBounciness(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 摩擦力。\r\n     */\r\n    get friction(): number {\r\n        return this._friction;\r\n    }\r\n\r\n    set friction(value: number) {\r\n        this._friction = value;\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_Friction)) {\r\n            this._collider.setfriction(value);\r\n        }\r\n        //this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setFriction(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 滚动摩擦力。\r\n     */\r\n    get rollingFriction(): number {\r\n        return this._rollingFriction;\r\n    }\r\n\r\n    set rollingFriction(value: number) {\r\n        this._rollingFriction = value;\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_RollingFriction)) {\r\n            this._collider.setRollingFriction(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 动态摩擦力\r\n     */\r\n    get dynamicFriction(): number {\r\n        return this._dynamicFriction;\r\n    }\r\n\r\n    set dynamicFriction(value: number) {\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_DynamicFriction)) {\r\n            this._collider.setDynamicFriction(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 静态摩擦力\r\n     */\r\n    get staticFriction(): number {\r\n        return this._staticFriction;\r\n    }\r\n\r\n    set staticFriction(value: number) {\r\n        this._staticFriction = value\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_StaticFriction)) {\r\n            this._collider.setStaticFriction(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 摩擦力模式\r\n     */\r\n    set frictionCombine(value: PhysicsCombineMode) {\r\n        this._frictionCombine = value;\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_FrictionCombine)) {\r\n            this._collider.setFrictionCombine(value);\r\n        }\r\n    }\r\n\r\n    get frictionCombine() {\r\n        return this._frictionCombine;\r\n    }\r\n\r\n    /**\r\n     * 弹力模式\r\n     */\r\n    set restitutionCombine(value: PhysicsCombineMode) {\r\n        this._restitutionCombine = value;\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_BounceCombine)) {\r\n            this._collider.setBounceCombine(value);\r\n        }\r\n    }\r\n\r\n    get restitutionCombine() {\r\n        return this._restitutionCombine;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 用于连续碰撞检测(CCD)的速度阈值,当物体移动速度小于该值时不进行CCD检测,防止快速移动物体(例如:子弹)错误的穿过其它物体,0表示禁止。\r\n     */\r\n    get ccdMotionThreshold(): number {\r\n        return this._ccdMotionThreshold;\r\n    }\r\n\r\n    set ccdMotionThreshold(value: number) {\r\n        //TODO:\r\n        // this._ccdMotionThreshold = value;\r\n        // this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdMotionThreshold(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 获取用于进入连续碰撞检测(CCD)范围的球半径。\r\n     */\r\n    get ccdSweptSphereRadius(): number {\r\n        return this._ccdSweptSphereRadius;\r\n    }\r\n\r\n    set ccdSweptSphereRadius(value: number) {\r\n        //TODO:\r\n        // this._ccdSweptSphereRadius = value;\r\n        // this._btColliderObject && ILaya3D.Physics3D._bullet.btCollisionObject_setCcdSweptSphereRadius(this._btColliderObject, value);\r\n    }\r\n\r\n    /**\r\n     * 碰撞形状。\r\n     */\r\n    get colliderShape(): Physics3DColliderShape {\r\n        return this._colliderShape;\r\n    }\r\n\r\n    set colliderShape(value: Physics3DColliderShape) {\r\n        if (!value || value == this._colliderShape) {\r\n            return;\r\n        }\r\n        this._colliderShape && this._colliderShape.destroy();\r\n        this._colliderShape = value;\r\n        if (this._collider) {\r\n            this._collider.setColliderShape(value._shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 所属碰撞组。\r\n     */\r\n    get collisionGroup(): number {\r\n        return this._collisionGroup;\r\n    }\r\n\r\n    set collisionGroup(value: number) {\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_CollisionGroup)) {\r\n            if (this._collisionGroup !== value) {\r\n                this._collisionGroup = value;\r\n                if (this._colliderShape && this._enabled) {\r\n                    this._collider.setCollisionGroup(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 可碰撞的碰撞组,基于位运算。\r\n     */\r\n    get canCollideWith(): number {\r\n        return this._canCollideWith;\r\n    }\r\n\r\n    set canCollideWith(value: number) {\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_CollisionGroup)) {\r\n            if (this._canCollideWith !== value) {\r\n                this._canCollideWith = value;\r\n                if (this._colliderShape && this._enabled) {\r\n                    this._collider.setCanCollideWith(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _parseShape(shapesData: any[]): void {\r\n        var shapeCount = shapesData.length;\r\n        if (shapeCount === 1) {\r\n            var shape: Physics3DColliderShape = PhysicsColliderComponent._creatShape(shapesData[0]);\r\n            this.colliderShape = shape;\r\n        } else {\r\n            // var compoundShape: CompoundColliderShape = new CompoundColliderShape();\r\n            // for (var i = 0; i < shapeCount; i++) {\r\n            //     shape = PhysicsColliderComponent._creatShape(shapesData[i]);\r\n            //     compoundShape.addChildShape(shape);\r\n            // }\r\n            // this.colliderShape = compoundShape;\r\n        }\r\n    }\r\n\r\n    initCollider() {\r\n        this._initCollider();\r\n        this._collider.setOwner(this.owner);\r\n        if (this._colliderShape) this._collider.setColliderShape(this._colliderShape._shape);\r\n        // this.restitution = this._restitution;\r\n        // this.friction = this._friction;\r\n        // this.rollingFriction = this._rollingFriction;\r\n        this.ccdMotionThreshold = this._ccdMotionThreshold;\r\n        this.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\r\n        this.collisionGroup = this._collisionGroup;\r\n        this.canCollideWith = this._canCollideWith;\r\n    }\r\n\r\n    protected _initCollider() {\r\n        //createCollider\r\n        //Override it\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _setEventFilter() {\r\n        // override it\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        if (!this.owner.scene) {\r\n            this.owner.on(Node.EVENT_SET_ACTIVESCENE, this, this._onAdded);\r\n        } else {\r\n            this.initCollider();\r\n            this.owner.off(Node.EVENT_SET_ACTIVESCENE, this, this._onAdded);\r\n        }\r\n        this.owner.off(Event._Add_Script, this, this._setEventFilter);\r\n        this.owner.on(Event._Add_Script, this, this._setEventFilter);\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        (<Sprite3D>this.owner).transform.on(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n        //ILaya3D.Physics3D._bullet.btCollisionObject_setContactProcessingThreshold(this._btColliderObject, 0);\r\n        this._collider && (this._collider.componentEnable = true);\r\n        if (this._colliderShape) {\r\n            this._physicsManager.addCollider(this._collider);\r\n        }\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        (<Sprite3D>this.owner).transform.off(Event.TRANSFORM_CHANGED, this, this._onTransformChanged);\r\n        this._collider && (this._collider.componentEnable = false);\r\n        if (this._colliderShape) {\r\n            this._physicsManager.removeCollider(this._collider);\r\n        }\r\n        this._physicsManager = null;\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        this._collider.destroy();\r\n        this._colliderShape && this._colliderShape.destroy();\r\n        this._collider = null;\r\n        this._colliderShape = null;\r\n        this._physicsManager = null;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _onTransformChanged(flag: number): void {\r\n        if (!this._controlBySimulation) {//不受物理引擎控制的碰撞体\r\n            flag &= Transform3D.TRANSFORM_WORLDPOSITION | Transform3D.TRANSFORM_WORLDQUATERNION | Transform3D.TRANSFORM_WORLDSCALE;//过滤有用TRANSFORM标记\r\n            if (flag && this._colliderShape && this._enabled) {\r\n                this._transformFlag |= flag;\r\n                //         if (this._isValid() && this._inPhysicUpdateListIndex === -1)//_isValid()表示可使用\r\n                //this._simulation._physicsUpdateList.add(this);\r\n                this._collider.transformChanged(flag);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        var destPhysicsComponent: PhysicsColliderComponent = <PhysicsColliderComponent>dest;\r\n        destPhysicsComponent.restitution = this._restitution;\r\n        destPhysicsComponent.friction = this._friction;\r\n        destPhysicsComponent.rollingFriction = this._rollingFriction;\r\n        destPhysicsComponent.ccdMotionThreshold = this._ccdMotionThreshold;\r\n        destPhysicsComponent.ccdSweptSphereRadius = this._ccdSweptSphereRadius;\r\n\r\n        destPhysicsComponent.dynamicFriction = this.dynamicFriction;\r\n        destPhysicsComponent.staticFriction = this.staticFriction;\r\n        destPhysicsComponent.frictionCombine = this.frictionCombine;\r\n        destPhysicsComponent.restitutionCombine = this.restitutionCombine;\r\n\r\n        destPhysicsComponent.collisionGroup = this._collisionGroup;\r\n        destPhysicsComponent.canCollideWith = this._canCollideWith;\r\n        (this._colliderShape) && (destPhysicsComponent.colliderShape = this._colliderShape.clone());\r\n    }\r\n\r\n    //-------------------deprecated-------------------\r\n    /**\r\n     * @deprecated\r\n     * @internal\r\n     */\r\n    static _creatShape(shapeData: any): Physics3DColliderShape {\r\n        var colliderShape: Physics3DColliderShape;\r\n        switch (shapeData.type) {\r\n            case \"BoxColliderShape\":\r\n                var sizeData: any[] = shapeData.size;\r\n                colliderShape = sizeData ? new BoxColliderShape(sizeData[0], sizeData[1], sizeData[2]) : new BoxColliderShape();\r\n                break;\r\n            case \"SphereColliderShape\":\r\n                colliderShape = new SphereColliderShape(shapeData.radius);\r\n                break;\r\n            case \"CapsuleColliderShape\":\r\n                colliderShape = new CapsuleColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n                break;\r\n            case \"MeshColliderShape\":\r\n                colliderShape = new MeshColliderShape();\r\n                break;\r\n            case \"ConeColliderShape\":\r\n                colliderShape = new ConeColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n                break;\r\n            case \"CylinderColliderShape\":\r\n                colliderShape = new CylinderColliderShape(shapeData.radius, shapeData.height, shapeData.orientation);\r\n                break;\r\n            default:\r\n                console.error(\"unknown shape type.\");\r\n        }\r\n        return null;//TODO\r\n    }\r\n\r\n\r\n    /**\r\n     * @deprecated\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any): void {\r\n        (data.collisionGroup != null) && (this._collider.setCollisionGroup(data.collisionGroup));\r\n        (data.canCollideWith != null) && (this._collider.setCanCollideWith(data.canCollideWith));\r\n        (data.ccdMotionThreshold != null) && (this.ccdMotionThreshold = data.ccdMotionThreshold);\r\n        (data.ccdSweptSphereRadius != null) && (this.ccdSweptSphereRadius = data.ccdSweptSphereRadius);\r\n    }\r\n\r\n}\r\n\r\n","import { Component } from \"../../components/Component\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { PhysicsColliderComponent } from \"./PhysicsColliderComponent\";\r\nimport { Laya3D } from \"../../../Laya3D\";\r\nimport { ICharacterController } from \"../../Physics3D/interface/ICharacterController\";\r\nimport { CapsuleColliderShape } from \"./shape/CapsuleColliderShape\";\r\nimport { ECharacterCapable } from \"../../Physics3D/physicsEnum/ECharacterCapable\";\r\nimport { EPhysicsCapable } from \"../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Event } from \"../../events/Event\";\r\n\r\n/**\r\n * <code>CharacterController</code> 类用于创建角色控制器。\r\n */\r\nexport class CharacterController extends PhysicsColliderComponent {\r\n\r\n    /**@internal */\r\n    protected _collider: ICharacterController;\r\n    /** @internal */\r\n    private _stepHeight: number = 0.1;\r\n    /** @internal */\r\n    private _upAxis = new Vector3(0, 1, 0);\r\n    /**@internal */\r\n    private _maxSlope = 90.0;\t// 45度容易在地形上卡住\r\n    /** @internal */\r\n    private _gravity = new Vector3(0, -9.8, 0);\r\n    /**@internal */\r\n    private _radius: number = 0.5;\r\n    /**@internal */\r\n    private _height: number = 2;\r\n    /**@internal */\r\n    private _offset: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _contactOffset: number;\r\n    /**@internal */\r\n    private _minDistance: number = 0;\r\n    /**@internal */\r\n    private _simGravity: Vector3 = new Vector3(0, -9.8 / 60, 0);\r\n    /**@internal */\r\n    private _pushForce: number = 1;\r\n    /**\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _initCollider() {\r\n        this._physicsManager = (this.owner.scene as Scene3D).physicsSimulation;\r\n        if (Laya3D.enablePhysics && this._physicsManager && Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_CharacterCollider)) {\r\n            this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n            this._collider = Laya3D.PhysicsCreateUtil.createCharacterController(this._physicsManager);\r\n        } else {\r\n            console.error(\"CharacterController: cant enable CharacterController\");\r\n        }\r\n    }\r\n\r\n    onUpdate(): void {\r\n        // physX need to simulate character Gravity.\r\n        this.move(this._simGravity);\r\n    }\r\n\r\n    /**\r\n     * 胶囊半径。\r\n     */\r\n    get radius(): number {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(value: number) {\r\n        this._radius = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Character_Radius)) {\r\n            this._collider && this._collider.setRadius(this._radius);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 高度。\r\n     */\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value: number) {\r\n        this._height = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Character_Height)) {\r\n            this._collider && this._collider.setHeight(this._height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    get minDistance(): number {\r\n        return this._minDistance;\r\n    }\r\n\r\n    set minDistance(value: number) {\r\n        this._minDistance = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Character_minDistance)) {\r\n            this._collider && this._collider.setminDistance(this._minDistance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 碰撞偏移\r\n     */\r\n    get centerOffset(): Vector3 {\r\n        return this._offset;\r\n    }\r\n\r\n    set centerOffset(value: Vector3) {\r\n        this._offset = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Character_offset)) {\r\n            this._collider && this._collider.setShapelocalOffset(this._offset);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 重力。\r\n     */\r\n    get gravity(): Vector3 {\r\n        return this._gravity;\r\n    }\r\n\r\n    set gravity(value: Vector3) {\r\n        this._gravity = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Charcater_Gravity)) {\r\n            this._collider && this._collider.setGravity(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 碰撞偏移。\r\n    */\r\n    get skinWidth(): number {\r\n        return this._contactOffset;\r\n    }\r\n\r\n    set skinWidth(value: number) {\r\n        this._contactOffset = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Character_Skin)) {\r\n            this._collider && this._collider.setSkinWidth(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 最大坡度。\r\n     */\r\n    get maxSlope(): number {\r\n        return this._maxSlope;\r\n    }\r\n\r\n    set maxSlope(value: number) {\r\n        this._maxSlope = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Character_SlopeLimit)) {\r\n            this._collider && this._collider.setSlopeLimit(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 角色行走的脚步高度，表示可跨越的最大高度。\r\n     */\r\n    get stepHeight(): number {\r\n        return this._stepHeight;\r\n    }\r\n\r\n    set stepHeight(value: number) {\r\n        this._stepHeight = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Charcater_StepOffset)) {\r\n            this._collider && this._collider.setStepOffset(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 角色的Up轴。\r\n     */\r\n    get upAxis(): Vector3 {\r\n        return this._upAxis;\r\n    }\r\n\r\n    set upAxis(value: Vector3) {\r\n        this._upAxis = value;\r\n        if (this.collider.getCapable(ECharacterCapable.Character_UpDirection)) {\r\n            this._collider && this._collider.setUpDirection(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 角色位置\r\n     */\r\n    get position() {\r\n        return null;\r\n    }\r\n\r\n    set position(v: Vector3) {\r\n        if (this.collider.getCapable(ECharacterCapable.Charcater_WorldPosition)) {\r\n            this._collider && this._collider.setPosition(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 推动力大小\r\n     */\r\n    public get pushForce(): number {\r\n        return this._pushForce;\r\n    }\r\n    public set pushForce(value: number) {\r\n        this._pushForce = value;\r\n        if (this.collider && this.collider.getCapable(ECharacterCapable.Character_PushForce)) {\r\n            this._collider.setPushForce(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>CharacterController</code> 实例。\r\n     * @param stepheight 角色脚步高度。\r\n     * @param upAxis 角色Up轴\r\n     * @param collisionGroup 所属碰撞组。\r\n     * @param canCollideWith 可产生碰撞的碰撞组。\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 获得速度\r\n     * @returns \r\n     */\r\n    getVerticalVel() {\r\n        return this._collider ? this._collider.getVerticalVel() : 0;\r\n    }\r\n\r\n    /**\r\n     * 通过指定移动向量移动角色。\r\n     * @param\tmovement 移动向量。\r\n     */\r\n    move(movement: Vector3): void {\r\n        if (this.collider.getCapable(ECharacterCapable.Charcater_Move)) {\r\n            this._collider && this._collider.move(movement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 跳跃。\r\n     * @param velocity 跳跃速度。\r\n     */\r\n    jump(velocity: Vector3 = null): void {\r\n        if (this.collider.getCapable(ECharacterCapable.Charcater_Jump)) {\r\n            if (velocity) {\r\n                this._collider && this._collider.jump(velocity);\r\n            } else {\r\n                //                Utils3D._tempV0.set(0, this._jumpSpeed, 0)\r\n                this._collider && this._collider.jump(velocity);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        var destCharacterController: CharacterController = <CharacterController>dest;\r\n        destCharacterController.stepHeight = this._stepHeight;\r\n        destCharacterController.upAxis = this._upAxis;\r\n        destCharacterController.maxSlope = this._maxSlope;\r\n        destCharacterController.gravity = this._gravity;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _setEventFilter() {\r\n        if (this._collider && this._collider.getCapable(ECharacterCapable.Character_EventFilter)) {\r\n            this._eventsArray = [];\r\n            // event \r\n            if (this.owner.hasListener(Event.COLLISION_ENTER)) {\r\n                this._eventsArray.push(Event.COLLISION_ENTER);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_STAY)) {\r\n                this._eventsArray.push(Event.COLLISION_STAY);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_EXIT)) {\r\n                this._eventsArray.push(Event.COLLISION_EXIT);\r\n            }\r\n            this._collider.setEventFilter(this._eventsArray);\r\n        }\r\n    }\r\n}\r\n\r\n","import { Component } from \"../../../components/Component\";\r\nimport { Rigidbody3D } from \"../Rigidbody3D\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { IJoint } from \"../../../Physics3D/interface/Joint/IJoint\";\r\nimport { Node } from \"../../../display/Node\";\r\nimport { IPhysicsManager } from \"../../../Physics3D/interface/IPhysicsManager\";\r\nimport { pxJoint } from \"../../../Physics3D/PhysX/Joint/pxJoint\";\r\nimport { PhysicsColliderComponent } from \"../PhysicsColliderComponent\";\r\n/**\r\n * <code>ConstraintComponent</code> 类用于创建约束的父类。\r\n */\r\nexport class ConstraintComponent extends Component {\r\n    /**@internal */\r\n    _joint: IJoint;\r\n    /**@internal */\r\n    private _enableCollison: boolean = false;\r\n    protected _physicsManager: IPhysicsManager;\r\n    /**@internal */\r\n    protected _ownCollider: PhysicsColliderComponent;\r\n    protected _connectCollider: PhysicsColliderComponent;\r\n    protected _breakForce: number = Number.MAX_VALUE;\r\n    protected _breakTorque: number = Number.MAX_VALUE;\r\n    protected _ownColliderLocalPos: Vector3 = new Vector3();\r\n    protected _connectColliderLocalPos: Vector3 = new Vector3();\r\n    /**\r\n     * instance joint\r\n     */\r\n    initJoint() {\r\n        this._initJoint();\r\n        this._joint.setOwner(this.owner)\r\n        this._joint.setLocalPos(this._ownColliderLocalPos);\r\n        this._joint.setConnectLocalPos(this._connectColliderLocalPos);\r\n        this._joint.setBreakForce(this.breakForce);\r\n        this._joint.setBreakTorque(this._breakTorque);\r\n    }\r\n\r\n    protected _initJoint() {\r\n        //createJoint\r\n        //Override it\r\n    }\r\n\r\n    set connectedBody(value: PhysicsColliderComponent) {\r\n        if (!value || this._connectCollider == value)\r\n            return;\r\n        this._connectCollider = value;\r\n        if (this._joint) {\r\n            this._joint.setConnectedCollider(value.collider);\r\n        }\r\n    }\r\n\r\n    get connectedBody(): PhysicsColliderComponent {\r\n        return this._connectCollider;\r\n    }\r\n\r\n\r\n    get ownBody(): PhysicsColliderComponent {\r\n        return this._ownCollider;\r\n    }\r\n\r\n    set ownBody(value: PhysicsColliderComponent) {\r\n        if (!value || this._ownCollider == value)\r\n            return;\r\n        this._ownCollider = value;\r\n        if (this._joint) {\r\n            this._joint.setCollider(value.collider);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获得收到的总力\r\n     */\r\n    get currentForce(): Vector3 {\r\n        if (this._joint)\r\n            return this._joint.getlinearForce();\r\n        else {\r\n            console.error(\"joint is illegal\");\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取的总力矩\r\n     */\r\n    get currentTorque(): Vector3 {\r\n        if (this._joint)\r\n            return this._joint.getAngularForce();\r\n        else {\r\n            console.error(\"joint is illegal\");\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 设置最大承受力\r\n     * @param value 最大承受力\r\n     */\r\n    get breakForce(): number {\r\n        return this._breakForce;\r\n    }\r\n\r\n    set breakForce(value: number) {\r\n        this._breakForce = value;\r\n        this._joint && this._joint.setBreakForce(value);\r\n    }\r\n\r\n    /**\r\n     * 设置最大承受力矩\r\n     * @param value 最大承受力矩\r\n     */\r\n    get breakTorque(): number {\r\n        return this._breakTorque;\r\n    }\r\n\r\n    set breakTorque(value: number) {\r\n        this._breakTorque = value;\r\n        this._joint && this._joint.setBreakTorque(value);\r\n    }\r\n\r\n    /**\r\n     * 设置锚点\r\n     */\r\n    set anchor(value: Vector3) {\r\n        value.cloneTo(this._ownColliderLocalPos);\r\n        this._joint && this._joint.setLocalPos(value);\r\n    }\r\n\r\n    get anchor() {\r\n        return this._ownColliderLocalPos;\r\n    }\r\n\r\n    /**\r\n     * 设置链接锚点位置\r\n     */\r\n    set connectAnchor(value: Vector3) {\r\n        value.cloneTo(this._connectColliderLocalPos);\r\n        this._joint && this._joint.setConnectLocalPos(this._connectColliderLocalPos);\r\n    }\r\n\r\n    get connectAnchor(): Vector3 {\r\n        return this._connectColliderLocalPos;\r\n    }\r\n\r\n    /**\r\n     * 是否碰撞关节之间的内容\r\n     */\r\n    public get enableCollison(): boolean {\r\n        return this._enableCollison;\r\n    }\r\n    public set enableCollison(value: boolean) {\r\n        this._enableCollison = value;\r\n        this._joint.isCollision(value);\r\n    }\r\n\r\n    /**\r\n     * 创建一个 <code>ConstraintComponent</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        if (!this.owner.scene) {\r\n            this.owner.on(Node.EVENT_SET_ACTIVESCENE, this, this._onAdded);\r\n        } else {\r\n            this.initJoint();\r\n            this.owner.off(Node.EVENT_SET_ACTIVESCENE, this, this._onAdded);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置迭代的次数，次数越高，越精确\r\n     * @param overideNumIterations \r\n     */\r\n    setOverrideNumSolverIterations(overideNumIterations: number): void {\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * 设置约束是否可用\r\n     * @param enable \r\n     */\r\n    setConstraintEnabled(enable: boolean): void {\r\n        //TODO\r\n    }\r\n\r\n    protected _onDestroy() {\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    isBreakConstrained(): Boolean {\r\n        return this._joint.isValid();\r\n    }\r\n}\r\n\r\n","import { ConstraintComponent } from \"./ConstraintComponent\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { D6Axis, D6Drive, D6MotionType, ID6Joint } from \"../../../Physics3D/interface/Joint/ID6Joint\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Transform3D } from \"../../core/Transform3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\n\r\n/**\r\n * <code>ConfigurableConstraint</code>类用于可设置的约束组件\r\n */\r\nexport class ConfigurableConstraint extends ConstraintComponent {\r\n    /**@internal */\r\n    _joint: ID6Joint;\r\n    /** @internal */\r\n    private _axis = new Vector3(1, 0, 0);\r\n    /** @internal */\r\n    private _secondaryAxis = new Vector3(0, 1, 0);\r\n    /** @internal */\r\n    private _xMotion: D6Axis = D6Axis.eFREE;\r\n    /** @internal */\r\n    private _yMotion: D6Axis = D6Axis.eFREE;\r\n    /** @internal */\r\n    private _zMotion: D6Axis = D6Axis.eFREE;\r\n    /** @internal */\r\n    private _angularXMotion: D6Axis = D6Axis.eFREE;\r\n    /** @internal */\r\n    private _angularYMotion: D6Axis = D6Axis.eFREE;\r\n    /** @internal */\r\n    private _angularZMotion: D6Axis = D6Axis.eFREE;\r\n    //linear Distance Spring\r\n    /** @internal */\r\n    private _distanceLimit: number = 0;\r\n    /** @internal */\r\n    private _distanceBounciness: number = 0;\r\n    /** @internal */\r\n    private _distanceBounceThreshold: number = 0;\r\n    /** @internal */\r\n    private _distanceSpring: number = 0;\r\n    /** @internal */\r\n    private _distanceDamper: number = 0;\r\n    //linear Axis Limit\r\n    // /** @internal */\r\n    // private _minLinearLimit: Vector3 = new Vector3();\r\n    // /** @internal */\r\n    // private _maxLinearLimit: Vector3 = new Vector3();\r\n    // /**@internal */\r\n    // private _linearSpring: Vector3 = new Vector3();\r\n    // /**@internal */\r\n    // private _linearDamper: Vector3 = new Vector3();\r\n    //angular TwistLimit\r\n    /**@internal */\r\n    private _twistUper: number = 0;\r\n    /**@internal */\r\n    private _twistLower: number = 0;\r\n    /**@internal */\r\n    private _twistBounceness: number = 0;\r\n    /**@internal */\r\n    private _twistBounceThreshold: number = 0;\r\n    /**@internal */\r\n    private _twistStiffness: number = 0;\r\n    /**@internal */\r\n    private _twistDamping: number = 0;\r\n    //angular SwingLimit\r\n    /**@internal */\r\n    private _ySwingAngleLimit: number = 0;\r\n    /**@internal */\r\n    private _zSwingAngleLimit: number = 0;\r\n    /**@internal */\r\n    private _Swingrestitution: number = 0;\r\n    /**@internal */\r\n    private _SwingbounceThreshold: number = 0;\r\n    /**@internal */\r\n    private _SwingStiffness: number = 0;\r\n    /**@internal */\r\n    private _SwingDamping: number = 0;\r\n    //drive\r\n    //target\r\n    /**@internal */\r\n    private _targetPosition: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _targetRotation: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _targetVelocity: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _targetAngularVelocity: Vector3 = new Vector3();\r\n    //linearDrive\r\n    /**@internal */\r\n    private _linearDriveforceLimit: Vector3 = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    /**@internal */\r\n    private _linearDriveForce: Vector3 = new Vector3();\r\n    /**@internal */\r\n    private _linearDriveDamping: Vector3 = new Vector3();\r\n    //angurXDrive\r\n    /**@internal */\r\n    private _angularXDriveForceLimit: number = Number.MAX_VALUE;\r\n    /**@internal */\r\n    private _angularXDriveForce: number = 0;\r\n    /**@internal */\r\n    private _angularXDriveDamp: number = 0;\r\n    //angurYZDrive\r\n    /**@internal */\r\n    private _angularYZDriveForceLimit: number = Number.MAX_VALUE;\r\n    /**@internal */\r\n    private _angularYZDriveForce: number = 0;\r\n    /**@internal */\r\n    private _angularYZDriveDamp: number = 0;\r\n    //angularSlerpDrive\r\n    /**@internal */\r\n    private _angularSlerpDriveForceLimit: number = Number.MAX_VALUE;\r\n    /**@internal */\r\n    private _angularSlerpDriveForce: number = 0;\r\n    /**@internal */\r\n    private _angularSlerpDriveDamp: number = 0;\r\n    /**\r\n     * 创建一个<code>ConfigurableConstraint</code>实例\t可设置的约束组件\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    //Linear Drive X\r\n    private _setDriveLinearX() {\r\n        this._joint.setDrive(D6Drive.eX, this._linearDriveForce.x, this._linearDriveDamping.x, this._linearDriveforceLimit.x);\r\n    }\r\n\r\n    //Linear Drive Y\r\n    private _setDriveLinearY() {\r\n        this._joint.setDrive(D6Drive.eY, this._linearDriveForce.y, this._linearDriveDamping.y, this._linearDriveforceLimit.y);\r\n    }\r\n\r\n    //Linear Drive Z\r\n    private _setDriveLinearZ() {\r\n        this._joint.setDrive(D6Drive.eZ, this._linearDriveForce.z, this._linearDriveDamping.z, this._linearDriveforceLimit.z);\r\n    }\r\n\r\n    private _setAngularXDrive() {\r\n        this._joint.setDrive(D6Drive.eSWING, this._angularXDriveForce, this._angularXDriveDamp, this._angularXDriveForceLimit);\r\n    }\r\n\r\n    private _setAngularYZDrive() {\r\n        this._joint.setDrive(D6Drive.eTWIST, this._angularYZDriveForce, this._angularYZDriveDamp, this._angularYZDriveForceLimit);\r\n    }\r\n\r\n    private _setAngularSlerpDrive() {\r\n        this._joint.setDrive(D6Drive.eSLERP, this._angularSlerpDriveForce, this._angularSlerpDriveDamp, this._angularSlerpDriveForceLimit);\r\n    }\r\n\r\n    private _setDistanceLimit() {\r\n        this._joint.setDistanceLimit(this._distanceLimit, this._distanceBounciness, this._distanceBounceThreshold, this._distanceSpring, this._distanceDamper);\r\n    }\r\n\r\n    //angular TwistLimit\r\n    private _setAngularXLimit() {\r\n        this._joint.setTwistLimit(this._twistUper / 180 * Math.PI, this._twistLower / 180 * Math.PI, this._twistBounceness, this._twistBounceThreshold, this._twistStiffness, this._twistDamping);\r\n    }\r\n\r\n    private _setSwingLimit() {\r\n        this._joint.setSwingLimit(this._ySwingAngleLimit / 180 * Math.PI, this._zSwingAngleLimit / 180 * Math.PI, this._Swingrestitution, this._SwingbounceThreshold, this._SwingStiffness, this._SwingDamping);\r\n    }\r\n\r\n    private _setTargetTransform() {\r\n        let rotate = Quaternion.TEMP;\r\n        Quaternion.createFromYawPitchRoll(this._targetRotation.y / Transform3D._angleToRandin, this._targetRotation.x / Transform3D._angleToRandin, this._targetRotation.z / Transform3D._angleToRandin, rotate);\r\n        this._joint.setDriveTransform(this._targetPosition, rotate);\r\n    }\r\n    /**\r\n     * axis\r\n     */\r\n    private _setAxis() {\r\n        this._joint.setAxis(this._axis, this._secondaryAxis);\r\n    }\r\n\r\n    private _setTargetVelocirty() {\r\n        this._joint.setDriveVelocity(this._targetVelocity, this._targetAngularVelocity);\r\n    }\r\n\r\n    /**\r\n     * main Axis\r\n     */\r\n    set axis(value: Vector3) {\r\n        if (!value)\r\n            return;\r\n        value.cloneTo(this._axis);\r\n        this._setAxis();\r\n    }\r\n\r\n    get axis(): Vector3 {\r\n        return this._axis;\r\n    }\r\n\r\n    set secondaryAxis(value: Vector3) {\r\n        if (!value)\r\n            return;\r\n        value.cloneTo(this._secondaryAxis);\r\n        this._setAxis();\r\n    }\r\n\r\n    /**\r\n     * 副轴\r\n     */\r\n    get secondaryAxis(): Vector3 {\r\n        return this._secondaryAxis;\r\n    }\r\n\r\n    /**\r\n     * X Motion\r\n     */\r\n    set XMotion(value: D6Axis) {\r\n        this._xMotion = value;\r\n        this._joint.setMotion(value, D6MotionType.eX);\r\n    }\r\n\r\n    get XMotion() {\r\n        return this._xMotion;\r\n    }\r\n\r\n    /**\r\n     * Y Motion\r\n     */\r\n    set YMotion(value: D6Axis) {\r\n        this._yMotion = value;\r\n        this._joint.setMotion(value, D6MotionType.eY);\r\n    }\r\n\r\n    get YMotion() {\r\n        return this._yMotion;\r\n    }\r\n\r\n    /**\r\n     * Z Motion\r\n     */\r\n    set ZMotion(value: D6Axis) {\r\n        this._zMotion = value;\r\n        this._joint.setMotion(value, D6MotionType.eZ);\r\n    }\r\n\r\n    get ZMotion() {\r\n        return this._zMotion;\r\n    }\r\n\r\n    /**\r\n     * X 角度motion\r\n     */\r\n    set angularXMotion(value: D6Axis) {\r\n        this._angularXMotion = value;\r\n        this._joint.setMotion(value, D6MotionType.eTWIST);\r\n    }\r\n\r\n    get angularXMotion() {\r\n        return this._angularXMotion;\r\n    }\r\n\r\n    /**\r\n     * Y 角度motion\r\n     */\r\n    set angularYMotion(value: D6Axis) {\r\n        this._angularYMotion = value;\r\n        this._joint.setMotion(value, D6MotionType.eSWING1);\r\n    }\r\n\r\n    get angularYMotion() {\r\n        return this._angularYMotion;\r\n    }\r\n\r\n    /**\r\n     * Z 角度motion\r\n     */\r\n    set angularZMotion(value: D6Axis) {\r\n        this._angularZMotion = value;\r\n        this._joint.setMotion(value, D6MotionType.eSWING2);\r\n    }\r\n\r\n    get angularZMotion() {\r\n        return this._angularZMotion;\r\n    }\r\n\r\n    set distanceLimit(value: number) {\r\n        if (value < 0)\r\n            return;\r\n        this._distanceLimit = value;\r\n        this._setDistanceLimit();\r\n    }\r\n\r\n    get distanceLimit() {\r\n        return this._distanceLimit;\r\n    }\r\n\r\n    set distanceBounciness(value: number) {\r\n        if (value < 0)\r\n            return;\r\n        this._distanceBounciness = value;\r\n        this._setDistanceLimit();\r\n    }\r\n\r\n    get distanceBounciness() {\r\n        return this._distanceBounciness;\r\n    }\r\n\r\n    set distanceBounceThreshold(value: number) {\r\n        if (value < 0)\r\n            return;\r\n        this._distanceBounceThreshold = value;\r\n        this._setDistanceLimit();\r\n    }\r\n\r\n    get distanceBounceThreshold() {\r\n        return this._distanceBounceThreshold;\r\n    }\r\n\r\n    set distanceSpring(value: number) {\r\n        if (value < 0)\r\n            return;\r\n        this._distanceSpring = value;\r\n        this._setDistanceLimit();\r\n    }\r\n\r\n    get distanceSpring() {\r\n        return this._distanceSpring;\r\n    }\r\n\r\n    set distanceDamper(value: number) {\r\n        if (value < 0)\r\n            return;\r\n        this._distanceDamper = value;\r\n        this._setDistanceLimit();\r\n    }\r\n\r\n    get distanceDamper() {\r\n        return this._distanceDamper;\r\n    }\r\n\r\n    //linear Axis Limit \r\n    //TODO\r\n\r\n    /**-180 ---- 180 */\r\n    set angularXMaxLimit(value: number) {\r\n        value = Math.min(180, Math.max(value, this._twistLower));\r\n        this._twistUper = value;\r\n        this._setAngularXLimit();\r\n    }\r\n\r\n    get angularXMaxLimit() {\r\n        return this._twistUper;\r\n    }\r\n\r\n    set angularXMinLimit(value: number) {\r\n        value = Math.max(-180, Math.min(value, this._twistUper));\r\n        this._twistLower = value;\r\n        this._setAngularXLimit();\r\n    }\r\n\r\n    get angularXMinLimit() {\r\n        return this._twistLower;\r\n    }\r\n\r\n\r\n    set AngleXLimitBounceness(value: number) {\r\n        value = Math.max(0, value);\r\n        this._twistBounceness = value;\r\n        this._setAngularXLimit();\r\n    }\r\n\r\n    get AngleXLimitBounceness() {\r\n        return this._twistBounceness;\r\n    }\r\n\r\n    set AngleXLimitBounceThreshold(value: number) {\r\n        value = Math.max(0, value);\r\n        this._twistBounceThreshold = value;\r\n        this._setAngularXLimit();\r\n    }\r\n\r\n    get AngleXLimitBounceThreshold() {\r\n        return this._twistBounceThreshold;\r\n    }\r\n\r\n    set AngleXLimitSpring(value: number) {\r\n        value = Math.max(0, value);\r\n        this._twistStiffness = value;\r\n        this._setAngularXLimit();\r\n    }\r\n\r\n    get AngleXLimitSpring() {\r\n        return this._twistStiffness;\r\n    }\r\n\r\n    set AngleXLimitDamp(value: number) {\r\n        value = Math.max(0, value);\r\n        this._twistDamping = value;\r\n        this._setAngularXLimit();\r\n    }\r\n\r\n    get AngleXLimitDamp() {\r\n        return this._twistDamping;\r\n    }\r\n\r\n    //angular SwingLimit\r\n\r\n    set AngleYLimit(value: number) {\r\n        value = Math.min(180, Math.max(0, value));\r\n        this._ySwingAngleLimit = value;\r\n        this._setSwingLimit();\r\n    }\r\n\r\n    get AngleYLimit() {\r\n        return this._ySwingAngleLimit;\r\n    }\r\n\r\n    set AngleZLimit(value: number) {\r\n        value = Math.min(180, Math.max(0, value));\r\n        this._zSwingAngleLimit = value;\r\n        this._setSwingLimit();\r\n    }\r\n\r\n    get AngleZLimit() {\r\n        return this._zSwingAngleLimit;\r\n    }\r\n\r\n    set AngleYZLimitBounciness(value: number) {\r\n        value = Math.max(0, value);\r\n        this._Swingrestitution = value;\r\n        this._setSwingLimit();\r\n    }\r\n\r\n    get AngleYZLimitBounciness() {\r\n        return this._Swingrestitution;\r\n    }\r\n\r\n    set AngleYZLimitBounceThreshold(value: number) {\r\n        value = Math.max(0, value);\r\n        this._SwingbounceThreshold = value;\r\n        this._setSwingLimit();\r\n    }\r\n\r\n    get AngleYZLimitBounceThreshold() {\r\n        return this._SwingbounceThreshold;\r\n    }\r\n\r\n    set AngleYZLimitSpring(value: number) {\r\n        value = Math.max(0, value);\r\n        this._SwingStiffness = value;\r\n        this._setSwingLimit();\r\n    }\r\n\r\n    get AngleYZLimitSpring() {\r\n        return this._SwingStiffness;\r\n    }\r\n\r\n    set AngleYZLimitDamping(value: number) {\r\n        value = Math.max(0, value);\r\n        this._SwingDamping = value;\r\n        this._setSwingLimit();\r\n    }\r\n\r\n    get AngleYZLimitDamping() {\r\n        return this._SwingDamping;\r\n    }\r\n\r\n    //set target transform Velocity\r\n\r\n\r\n    set targetPosition(value: Vector3) {\r\n        value.cloneTo(this._targetPosition);\r\n        this._setTargetTransform();\r\n    }\r\n\r\n    get targetPosition() {\r\n        return this._targetPosition;\r\n    }\r\n\r\n    set targetRotation(value: Vector3) {\r\n        value.cloneTo(this._targetRotation);\r\n        this._setTargetTransform();\r\n    }\r\n\r\n    get targetRotation() {\r\n        return this._targetRotation;\r\n    }\r\n\r\n    set targetPositionVelocity(value: Vector3) {\r\n        value.cloneTo(this._targetVelocity);\r\n        this._setTargetVelocirty();\r\n    }\r\n\r\n    get targetPositionVelocity() {\r\n        return this._targetVelocity;\r\n    }\r\n\r\n    set targetAngularVelocity(value: Vector3) {\r\n        value.cloneTo(this._targetAngularVelocity);\r\n        this._setTargetVelocirty();\r\n    }\r\n\r\n    get targetAngularVelocity() {\r\n        return this._targetAngularVelocity;\r\n    }\r\n\r\n\r\n    set XDriveSpring(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveForce.x = value;\r\n        this._setDriveLinearX();\r\n    }\r\n\r\n    get XDriveSpring() {\r\n        return this._linearDriveForce.x;\r\n    }\r\n\r\n    set YDriveSpring(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveForce.y = value;\r\n        this._setDriveLinearY();\r\n    }\r\n\r\n    get YDriveSpring() {\r\n        return this._linearDriveForce.y;\r\n    }\r\n\r\n    set ZDriveSpring(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveForce.z = value;\r\n        this._setDriveLinearZ();\r\n    }\r\n\r\n    get ZDriveSpring() {\r\n        return this._linearDriveForce.z;\r\n    }\r\n\r\n    set XDriveDamp(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveDamping.x = value;\r\n        this._setDriveLinearX();\r\n    }\r\n\r\n    get XDriveDamp() {\r\n        return this._linearDriveDamping.x;\r\n    }\r\n\r\n    set YDriveDamp(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveDamping.y = value;\r\n        this._setDriveLinearY();\r\n    }\r\n\r\n    get YDriveDamp() {\r\n        return this._linearDriveDamping.y;\r\n    }\r\n\r\n    set ZDriveDamp(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveDamping.z = value;\r\n        this._setDriveLinearZ();\r\n    }\r\n\r\n    get ZDriveDamp() {\r\n        return this._linearDriveDamping.z;\r\n    }\r\n\r\n    set XDriveForceLimit(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveforceLimit.x = value;\r\n        this._setDriveLinearX();\r\n    }\r\n\r\n    get XDriveForceLimit() {\r\n        return this._linearDriveforceLimit.x;\r\n    }\r\n\r\n    set YDriveForceLimit(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveforceLimit.y = value;\r\n        this._setDriveLinearY();\r\n    }\r\n\r\n    get YDriveForceLimit() {\r\n        return this._linearDriveforceLimit.y;\r\n    }\r\n\r\n    set ZDriveForceLimit(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._linearDriveforceLimit.z = value;\r\n        this._setDriveLinearZ();\r\n    }\r\n\r\n    get ZDriveForceLimit() {\r\n        return this._linearDriveforceLimit.z;\r\n    }\r\n\r\n    public get angularXDriveForceLimit(): number {\r\n        return this._angularXDriveForceLimit;\r\n    }\r\n    public set angularXDriveForceLimit(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularXDriveForceLimit = value;\r\n        this._setAngularXDrive();\r\n    }\r\n\r\n    public get angularXDriveForce(): number {\r\n        return this._angularXDriveForce;\r\n    }\r\n    public set angularXDriveForce(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularXDriveForce = value;\r\n        this._setAngularXDrive();\r\n    }\r\n\r\n    public get angularXDriveDamp(): number {\r\n        return this._angularXDriveDamp;\r\n    }\r\n    public set angularXDriveDamp(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularXDriveDamp = value;\r\n        this._setAngularXDrive();\r\n    }\r\n\r\n    public get angularYZDriveForceLimit(): number {\r\n        return this._angularYZDriveForceLimit;\r\n    }\r\n    public set angularYZDriveForceLimit(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularYZDriveForceLimit = value;\r\n        this._setAngularYZDrive();\r\n    }\r\n\r\n    public get angularYZDriveForce(): number {\r\n        return this._angularYZDriveForce;\r\n    }\r\n    public set angularYZDriveForce(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularYZDriveForce = value;\r\n        this._setAngularYZDrive();\r\n    }\r\n\r\n    public get angularYZDriveDamp(): number {\r\n        return this._angularYZDriveDamp;\r\n    }\r\n    public set angularYZDriveDamp(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularYZDriveDamp = value;\r\n        this._setAngularYZDrive();\r\n    }\r\n\r\n    public get angularSlerpDriveForceLimit(): number {\r\n        return this._angularSlerpDriveForceLimit;\r\n    }\r\n    public set angularSlerpDriveForceLimit(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularSlerpDriveForceLimit = value;\r\n        this._setAngularSlerpDrive();\r\n    }\r\n\r\n    public get angularSlerpDriveForce(): number {\r\n        return this._angularSlerpDriveForce;\r\n    }\r\n    public set angularSlerpDriveForce(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularSlerpDriveForce = value;\r\n        this._setAngularSlerpDrive();\r\n    }\r\n\r\n    public get angularSlerpDriveDamp(): number {\r\n        return this._angularSlerpDriveDamp;\r\n    }\r\n    public set angularSlerpDriveDamp(value: number) {\r\n        value = Math.max(value, 0);\r\n        this._angularSlerpDriveDamp = value;\r\n        this._setAngularSlerpDrive();\r\n    }\r\n\r\n    _initAllConstraintInfo(): void {\r\n        this._setDriveLinearX();\r\n        this._setDriveLinearY();\r\n        this._setDriveLinearZ();\r\n        this._setAngularXDrive();\r\n        this._setAngularYZDrive();\r\n        this._setAngularSlerpDrive();\r\n        this._setDistanceLimit();\r\n        this._setAngularXLimit();\r\n        this._setSwingLimit();\r\n        this._setTargetTransform();\r\n        this._setAxis();\r\n        this._setTargetVelocirty();\r\n    }\r\n    protected _onEnable(): void {\r\n        if (this._joint)\r\n            this._joint.isEnable(true);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (this._joint)\r\n            this._joint.isEnable(false);\r\n    }\r\n\r\n    /**\r\n    * create joint\r\n    */\r\n    protected _initJoint(): void {\r\n        this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n        if (Laya3D.enablePhysics && Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_D6Joint)) {\r\n            this._joint = Laya3D.PhysicsCreateUtil.createD6Joint(this._physicsManager);\r\n        } else {\r\n            console.error(\"Rigidbody3D: cant enable Rigidbody3D\");\r\n        }\r\n    }\r\n}","import { ConstraintComponent } from \"./ConstraintComponent\";\r\nimport { Laya3D } from \"../../../../Laya3D\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\n\r\nexport class FixedConstraint extends ConstraintComponent {\r\n\r\n    /**\r\n     * 创建一个<code>FixedConstraint</code>实例\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _initJoint() {\r\n        this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n        if (Laya3D.enablePhysics && Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_FixedJoint)) {\r\n            this._joint = Laya3D.PhysicsCreateUtil.createFixedJoint(this._physicsManager);\r\n        } else {\r\n            console.error(\"Rigidbody3D: cant enable Rigidbody3D\");\r\n        }\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        if (this._joint)\r\n            this._joint.isEnable(true);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (this._joint)\r\n            this._joint.isEnable(false);\r\n    }\r\n}","import { Laya3D } from \"../../../../Laya3D\";\r\nimport { IHingeJoint } from \"../../../Physics3D/interface/Joint/IHingeJoint\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { ConstraintComponent } from \"./ConstraintComponent\";\r\n\r\nexport class HingeConstraint extends ConstraintComponent {\r\n    /**@internal */\r\n    _joint: IHingeJoint;\r\n\r\n    /**@internal */\r\n    private _axis: Vector3 = new Vector3(1, 0, 0);\r\n\r\n    /**@internal */\r\n    private _motor: boolean = false;\r\n\r\n    /**@internal */\r\n    private _targetVelocity: number = 0;\r\n\r\n    /**@internal */\r\n    private _freeSpin: boolean = false;\r\n\r\n    /**@internal */\r\n    private _limit: boolean = false;\r\n\r\n    /**@internal */\r\n    private _lowerLimit: number = -Math.PI / 2;\r\n\r\n    /**@internal */\r\n    private _uperLimit: number = Math.PI / 2;\r\n\r\n    /**@internal */\r\n    private _bounciness: number = 0;\r\n\r\n    /**@internal */\r\n    private _bounceMinVelocity: number = 0;\r\n\r\n    /**@internal */\r\n    private _contactDistance: number = 0;\r\n\r\n\r\n    /**\r\n    * 创建一个<code>HingeConstraint</code>铰链实例\r\n    */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * create joint\r\n     */\r\n    protected _initJoint(): void {\r\n        this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n        if (Laya3D.enablePhysics && Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_HingeJoint)) {\r\n            this._joint = Laya3D.PhysicsCreateUtil.createHingeJoint(this._physicsManager);\r\n        } else {\r\n            console.error(\"HingeConstraint: cant enable HingeConstraint\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * overrid it\r\n     */\r\n    protected _onEnable(): void {\r\n        if (this._joint)\r\n            this._joint.isEnable(true);\r\n    }\r\n\r\n    /**\r\n     * overrid it\r\n     */\r\n    protected _onDisable(): void {\r\n        if (this._joint)\r\n            this._joint.isEnable(false);\r\n    }\r\n\r\n    /**\r\n    * set Hinge Rotation Axis,value by local rigibody0 \r\n    */\r\n    set Axis(value: Vector3) {\r\n        if (!value || this._axis.equal(value)) {\r\n            return;\r\n        }\r\n        value = value.normalize();//归一化轴\r\n        value.cloneTo(this._axis);\r\n        this._joint && this._joint.setAxis(value);\r\n    }\r\n\r\n    get Axis(): Vector3 {\r\n        return this._axis;\r\n    }\r\n\r\n    /**\r\n     * set limitLower\r\n     * @param lowerLimit \r\n     */\r\n    set lowerLimit(value: number) {\r\n        this._lowerLimit = value;\r\n        let lowerValue = value < this._lowerLimit ? this._lowerLimit : (value < (-Math.PI / 2) ? (-Math.PI) : value);\r\n        this._joint && this._joint.setLowerLimit(lowerValue);\r\n    }\r\n\r\n    get lowerLimit() {\r\n        return this._lowerLimit;\r\n    }\r\n\r\n    /**\r\n     * set uperLimit\r\n     * @param lowerLimit \r\n     */\r\n    set uperLimit(value: number) {\r\n        this._uperLimit = value;\r\n        let uperValue = value > this._uperLimit ? this._uperLimit : (value > (Math.PI / 2) ? (Math.PI) : value);\r\n        this._joint && this._joint.setUpLimit(uperValue);\r\n    }\r\n\r\n    get uperLimit(): number {\r\n        return this._uperLimit;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param value \r\n     */\r\n    set bounceness(value: number) {\r\n        value = value < 0 ? 0 : (value > 1 ? 1 : value);\r\n        this._bounciness = value;\r\n        this._joint && this._joint.setBounceness(value);\r\n    }\r\n\r\n    get bounceness(): number {\r\n        return this._bounciness;\r\n    }\r\n\r\n    /**\r\n     * @param value \r\n     */\r\n    set bouncenMinVelocity(value: number) {\r\n        this._bounceMinVelocity = value;\r\n        this._joint && this._joint.setBouncenMinVelocity(value);\r\n    }\r\n\r\n    get bouncenMinVelocity() {\r\n        return this._bounceMinVelocity;\r\n    }\r\n\r\n    /**\r\n     * @param value \r\n     */\r\n    set contactDistance(value: number) {\r\n        this._contactDistance = value;\r\n        this._joint && this._joint.setContactDistance(value);\r\n    }\r\n\r\n    get contactDistance() {\r\n        return this._contactDistance;\r\n    }\r\n\r\n    /**\r\n     * @param value \r\n     */\r\n    set limit(value: boolean) {\r\n        this._limit = value;\r\n        this._joint && this._joint.enableLimit(value);\r\n    }\r\n\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n\r\n    /**\r\n     * @param value \r\n     */\r\n    set motor(value: boolean) {\r\n        this._motor = value;\r\n        this._motor && this._joint.enableDrive(value);\r\n    }\r\n\r\n    get motor() {\r\n        return this._motor;\r\n    }\r\n\r\n    /**\r\n     * @param value \r\n     */\r\n    set freeSpin(value: boolean) {\r\n        this._freeSpin = value;\r\n        this._joint && this._joint.enableFreeSpin(value);\r\n    }\r\n\r\n    get freeSpin() {\r\n        return this._freeSpin;\r\n    }\r\n\r\n    /**\r\n     * set the target velocity for the drive model.\r\n     * @param velocity the drive target velocity\r\n     */\r\n    set targetVelocity(velocity: number) {\r\n        this._targetVelocity = velocity;\r\n        this._joint && this._joint.setDriveVelocity(velocity)\r\n    }\r\n\r\n    get targetVelocity() {\r\n        return this._targetVelocity;\r\n    }\r\n\r\n\r\n    /**\r\n     * The current angle in degrees of the joint relative to its rest position.\r\n     */\r\n    getAngle(): number {\r\n        return this._joint ? this._joint.getAngle() : 0;\r\n    }\r\n\r\n    /**\r\n     * The angular velocity of the joint in degrees per second.\r\n     */\r\n    getVelocity(): Vector3 {\r\n        return this._joint ? this._joint.getVelocity() : Vector3._tempVector3.set(0, 0, 0);\r\n    }\r\n}","import { Laya3D } from \"../../../../Laya3D\";\r\nimport { ISpringJoint } from \"../../../Physics3D/interface/Joint/ISpringJoint\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Scene3D } from \"../../core/scene/Scene3D\";\r\nimport { ConstraintComponent } from \"./ConstraintComponent\";\r\n\r\nexport class SpringConstraint extends ConstraintComponent {\r\n    /**@internal */\r\n    _joint: ISpringJoint;\r\n    /**@internal */\r\n    private _minDistance: number = 0;\r\n    /**@internal */\r\n    private _damping: number = 0.2;\r\n    /**@internal */\r\n    private _maxDistance: number = Number.MAX_VALUE;\r\n    /**@internal */\r\n    private _tolerance: number = 0.025;\r\n    /**@internal */\r\n    private _stiffness: number = 10;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _initJoint(): void {\r\n        this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n        if (Laya3D.enablePhysics && Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_SpringJoint)) {\r\n            this._joint = Laya3D.PhysicsCreateUtil.createSpringJoint(this._physicsManager);\r\n        } else {\r\n            console.error(\"SpringConstraint: cant enable SpringConstraint\");\r\n        }\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n    }\r\n\r\n    /**\r\n     * set spring min Distance\r\n     */\r\n    set minDistance(value: number) {\r\n        this._minDistance = value;\r\n        this._joint && this._joint.setMinDistance(value);\r\n    }\r\n\r\n    get minDistance() {\r\n        return this._minDistance;\r\n    }\r\n\r\n    /**\r\n     * set spring max Distance\r\n     */\r\n    set maxDistance(value: number) {\r\n        this._maxDistance = value;\r\n        this._joint && this._joint.setMaxDistance(value);\r\n    }\r\n\r\n    get maxDistance() {\r\n        return this._maxDistance;\r\n    }\r\n\r\n    /**\r\n     * set sprint default length\r\n     * Set the error tolerance of the joint.\r\n     */\r\n    set tolerance(value: number) {\r\n        this._tolerance = value;\r\n        this._joint && this._joint.setTolerance(value);\r\n    }\r\n\r\n    get tolerance() {\r\n        return this._tolerance;\r\n    }\r\n\r\n    /**\r\n     * set spring stifness\r\n     */\r\n    set spring(value: number) {\r\n        this._stiffness = value;\r\n        this._joint && this._joint.setStiffness(value);\r\n    }\r\n\r\n    get spring() {\r\n        return this._stiffness;\r\n    }\r\n\r\n    /**\r\n     * set damping in spring\r\n     */\r\n    set damping(value: number) {\r\n        this._damping = value;\r\n        this._joint && this._joint.setDamping(value);\r\n    }\r\n\r\n    get damping() {\r\n        return this._damping;\r\n    }\r\n\r\n\r\n\r\n}","import { Laya3D } from \"../../../Laya3D\";\r\nimport { IStaticCollider } from \"../../Physics3D/interface/IStaticCollider\";\r\nimport { EColliderCapable } from \"../../Physics3D/physicsEnum/EColliderCapable\";\r\nimport { EPhysicsCapable } from \"../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { PhysicsColliderComponent } from \"./PhysicsColliderComponent\";\r\nimport { Event } from \"../../events/Event\";\r\n\r\n/**\r\n * <code>PhysicsCollider</code> 类用于创建物理碰撞器。\r\n */\r\nexport class PhysicsCollider extends PhysicsColliderComponent {\r\n    /** @internal */\r\n    private _isTrigger: boolean = false;\r\n\r\n    /**\r\n     * @override\r\n     * @interanl\r\n     */\r\n    _collider: IStaticCollider;\r\n\r\n    /**\r\n     * @override\r\n     * @interanl\r\n     */\r\n    protected _initCollider() {\r\n        this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n        if (Laya3D.enablePhysics && this._physicsManager && Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_StaticCollider)) {\r\n            this._collider = Laya3D.PhysicsCreateUtil.createStaticCollider(this._physicsManager);\r\n        }\r\n        else {\r\n            console.error(\"PhysicsCollider:cant enable PhysicsCollider\");\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 是否为触发器。\r\n     */\r\n    get isTrigger(): boolean {\r\n        return this._isTrigger;\r\n    }\r\n\r\n    set isTrigger(value: boolean) {\r\n        this._isTrigger = value;\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_AllowTrigger)) {\r\n            this._collider.setTrigger(value);\r\n            this._setEventFilter();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any): void {\r\n        (data.friction != null) && (this.friction = data.friction);\r\n        (data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\r\n        (data.restitution != null) && (this.restitution = data.restitution);\r\n        (data.isTrigger != null) && (this.isTrigger = data.isTrigger);\r\n        super._parse(data);\r\n        this._parseShape(data.shapes);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _setEventFilter() {\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_EventFilter)) {\r\n            this._eventsArray = [];\r\n            // event \r\n            if (this.isTrigger && this.owner.hasListener(Event.TRIGGER_ENTER)) {\r\n                this._eventsArray.push(Event.TRIGGER_ENTER);\r\n            }\r\n            if (this.isTrigger && this.owner.hasListener(Event.TRIGGER_STAY)) {\r\n                this._eventsArray.push(Event.TRIGGER_STAY);\r\n            }\r\n            if (this.isTrigger && this.owner.hasListener(Event.TRIGGER_EXIT)) {\r\n                this._eventsArray.push(Event.TRIGGER_EXIT);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_ENTER)) {\r\n                this._eventsArray.push(Event.COLLISION_ENTER);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_STAY)) {\r\n                this._eventsArray.push(Event.COLLISION_STAY);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_EXIT)) {\r\n                this._eventsArray.push(Event.COLLISION_EXIT);\r\n            }\r\n            this._collider.setEventFilter(this._eventsArray);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { ICollider } from \"../../Physics3D/interface/ICollider\";\r\nimport { SingletonList } from \"../../utils/SingletonList\";\r\n\r\n/**\r\n * <code>PhysicsUpdateList</code> 类用于实现物理更新队列。\r\n */\r\nexport class PhysicsUpdateList extends SingletonList<ICollider> {\r\n\r\n    /**\r\n     * 创建一个新的 <code>PhysicsUpdateList</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    add(element: ICollider): void {\r\n        var index: number = element.inPhysicUpdateListIndex;\r\n        if (index !== -1)\r\n            console.error(\"PhysicsUpdateList:element has  in  PhysicsUpdateList.\");\r\n        this._add(element);\r\n        element.inPhysicUpdateListIndex = this.length++;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    remove(element: ICollider): void {\r\n        var index: number = element.inPhysicUpdateListIndex;\r\n        this.length--;\r\n        if (index !== this.length) {\r\n            var end: any = this.elements[this.length];\r\n            this.elements[index] = end;\r\n            end._inPhysicUpdateListIndex = index;\r\n        }\r\n        element.inPhysicUpdateListIndex = -1;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Component } from \"../../components/Component\";\r\nimport { Vector3 } from \"../../maths/Vector3\";\r\nimport { PhysicsColliderComponent, PhysicsForceMode } from \"./PhysicsColliderComponent\";\r\nimport { Laya3D } from \"../../../Laya3D\";\r\nimport { IDynamicCollider } from \"../../Physics3D/interface/IDynamicCollider\";\r\nimport { Scene3D } from \"../core/scene/Scene3D\";\r\nimport { Utils3D } from \"../utils/Utils3D\";\r\nimport { Quaternion } from \"../../maths/Quaternion\";\r\nimport { EColliderCapable } from \"../../Physics3D/physicsEnum/EColliderCapable\";\r\nimport { EPhysicsCapable } from \"../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Event } from \"../../events/Event\";\r\n\r\n/**\r\n * <code>Rigidbody3D</code> 类用于创建刚体碰撞器。\r\n */\r\nexport class Rigidbody3D extends PhysicsColliderComponent {\r\n    /**@internal */\r\n    protected _collider: IDynamicCollider;\r\n    /** @internal */\r\n    private _btLayaMotionState: number;\r\n    /** @internal */\r\n    private _isKinematic = false;\r\n    /** @internal */\r\n    private _mass = 1.0;\r\n    /** @internal */\r\n    private _gravity = new Vector3(0, -10, 0);\r\n    /** @internal */\r\n    private _angularDamping = 0.0;\r\n    /** @internal */\r\n    private _linearDamping = 0.0;\r\n    /** @internal */\r\n    private _linearVelocity = new Vector3();\r\n    /** @internal */\r\n    private _angularVelocity = new Vector3();\r\n    /** @internal */\r\n    private _linearFactor = new Vector3(1, 1, 1);\r\n    /** @internal */\r\n    private _angularFactor = new Vector3(1, 1, 1);\r\n    /**@internal */\r\n    private _sleepThreshold: number;\r\n    /**@internal */\r\n    private _trigger: boolean = false;\r\n\r\n    /**\r\n     * @override\r\n     * @internal\r\n     */\r\n    protected _initCollider() {\r\n        this._physicsManager = ((<Scene3D>this.owner._scene))._physicsManager;\r\n        if (Laya3D.enablePhysics && this._physicsManager && Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.Physics_DynamicCollider)) {\r\n            this._collider = Laya3D.PhysicsCreateUtil.createDynamicCollider(this._physicsManager);\r\n        } else {\r\n            console.error(\"Rigidbody3D: cant enable Rigidbody3D\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 质量。\r\n     */\r\n    get mass(): number {\r\n        return this._mass;\r\n    }\r\n\r\n    set mass(value: number) {\r\n        this._mass = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_Mass)) {\r\n            this._collider.setMass(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否为运动物体，如果为true仅可通过transform属性移动物体,而非其他力相关属性。\r\n     */\r\n    get isKinematic(): boolean {\r\n        return this._isKinematic;\r\n    }\r\n\r\n    set isKinematic(value: boolean) {\r\n        this._isKinematic = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_AllowKinematic)) {\r\n            this._collider.setIsKinematic(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 刚体的线阻力。\r\n     */\r\n    get linearDamping(): number {\r\n        return this._linearDamping;\r\n    }\r\n\r\n    set linearDamping(value: number) {\r\n        this._linearDamping = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_LinearDamp)) {\r\n            this._collider.setLinearDamping(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 刚体的角阻力。\r\n     */\r\n    get angularDamping(): number {\r\n        return this._angularDamping;\r\n    }\r\n\r\n    set angularDamping(value: number) {\r\n        this._angularDamping = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_AngularDamp)) {\r\n            this._collider.setAngularDamping(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重力。\r\n     */\r\n    get gravity(): Vector3 {\r\n        return this._gravity;\r\n    }\r\n\r\n    set gravity(value: Vector3) {\r\n        this._gravity = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_Gravity)) {\r\n            this._collider.setInertiaTensor(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 每个轴的线性运动缩放因子,如果某一轴的值为0表示冻结在该轴的线性运动。\r\n     */\r\n    get linearFactor(): Vector3 {\r\n        return this._linearFactor;\r\n    }\r\n\r\n    set linearFactor(value: Vector3) {\r\n        this._linearFactor = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_LinearFactor)) {\r\n            this._collider.setConstraints(this._linearFactor, this.angularFactor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 线速度\r\n     */\r\n    get linearVelocity(): Vector3 {\r\n        return this._linearVelocity;\r\n    }\r\n\r\n    set linearVelocity(value: Vector3) {\r\n        this._linearVelocity = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_LinearVelocity)) {\r\n            this._collider.setLinearVelocity(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 每个轴的角度运动缩放因子,如果某一轴的值为0表示冻结在该轴的角度运动。\r\n     */\r\n    get angularFactor(): Vector3 {\r\n        return this._angularFactor;\r\n    }\r\n\r\n    set angularFactor(value: Vector3) {\r\n        this._angularFactor = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_AngularFactor)) {\r\n            this._collider.setConstraints(this._linearFactor, this.angularFactor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 角速度。\r\n     */\r\n    get angularVelocity(): Vector3 {\r\n        return this._angularVelocity;\r\n    }\r\n\r\n    set angularVelocity(value: Vector3) {\r\n        this._angularVelocity = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_AngularVelocity)) {\r\n            this._collider.setAngularVelocity(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 刚体睡眠的线速度阈值。\r\n     */\r\n    get sleepThreshold(): number {\r\n        return this._sleepThreshold;\r\n    }\r\n\r\n    set sleepThreshold(value: number) {\r\n        this._sleepThreshold = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_SleepThreshold)) {\r\n            this._collider.setSleepThreshold(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 直接设置物理位置\r\n     */\r\n    set position(pos: Vector3) {\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_WorldPosition)) {\r\n            this._collider.setWorldPosition(pos)\r\n        }\r\n    }\r\n\r\n    set orientation(q: Quaternion) {\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_WorldOrientation)) {\r\n            this._collider.setWorldRotation(q);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否触发器\r\n     */\r\n    public get trigger(): boolean {\r\n        return this._trigger;\r\n    }\r\n    public set trigger(value: boolean) {\r\n        this._trigger = value;\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.Collider_AllowTrigger)) {\r\n            this._collider.setTrigger(value);\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _onAdded(): void {\r\n        super._onAdded();\r\n        this.mass = this._mass;\r\n        this.linearFactor = this._linearFactor;\r\n        this.angularFactor = this._angularFactor;\r\n        this.linearDamping = this._linearDamping;\r\n        this.angularDamping = this._angularDamping;\r\n        this.gravity = this._gravity;\r\n        this.isKinematic = this._isKinematic;\r\n    }\r\n\r\n    protected _onDestroy() {\r\n        super._onDestroy();\r\n        this._btLayaMotionState = null;\r\n        this._gravity = null;\r\n        this._linearVelocity = null;\r\n        this._angularVelocity = null;\r\n        this._linearFactor = null;\r\n        this._angularFactor = null;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _cloneTo(dest: Component): void {\r\n        super._cloneTo(dest);\r\n        var destRigidbody3D: Rigidbody3D = (<Rigidbody3D>dest);\r\n        destRigidbody3D.isKinematic = this._isKinematic;\r\n        destRigidbody3D.mass = this._mass;\r\n        destRigidbody3D.gravity = this._gravity;\r\n        destRigidbody3D.angularDamping = this._angularDamping;\r\n        destRigidbody3D.linearDamping = this._linearDamping;\r\n        destRigidbody3D.linearVelocity = this._linearVelocity;\r\n        destRigidbody3D.angularVelocity = this._angularVelocity;\r\n        destRigidbody3D.linearFactor = this._linearFactor;\r\n        destRigidbody3D.angularFactor = this._angularFactor;\r\n    }\r\n\r\n    /**\r\n     * 应用作用力。\r\n     * @param\tforce 作用力。\r\n     * @param\tlocalOffset 偏移,如果为null则为中心点\r\n     */\r\n    applyForce(force: Vector3, localOffset: Vector3 = null): void {\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_ApplyForce)) {\r\n            this._collider.addForce(force, PhysicsForceMode.Force, localOffset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用扭转力。\r\n     * @param\ttorque 扭转力。\r\n     */\r\n    applyTorque(torque: Vector3): void {\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_ApplyTorque)) {\r\n            this._collider.addTorque(torque, PhysicsForceMode.Force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用冲量。\r\n     * @param\timpulse 冲量。\r\n     * @param   localOffset 偏移,如果为null则为中心点。\r\n     */\r\n    applyImpulse(impulse: Vector3, localOffset: Vector3 = null): void {\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_ApplyImpulse)) {\r\n            this._collider.addForce(impulse, PhysicsForceMode.Impulse, localOffset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用扭转冲量。\r\n     * @param\ttorqueImpulse\r\n     */\r\n    applyTorqueImpulse(torqueImpulse: Vector3): void {\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_ApplyTorqueImpulse)) {\r\n            this._collider.addTorque(torqueImpulse, PhysicsForceMode.Impulse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 唤醒刚体。\r\n     */\r\n    wakeUp(): void {\r\n        if (this._collider && this.collider.getCapable(EColliderCapable.RigidBody_AllowSleep)) {\r\n            this._collider.wakeUp();\r\n        }\r\n    }\r\n\r\n\r\n    //-------------------deprecated-------------------\r\n\r\n    /**\r\n     * @deprecated\r\n     * 刚体睡眠的线速度阈值。\r\n     */\r\n    get sleepLinearVelocity(): number {\r\n        return this.sleepThreshold;\r\n    }\r\n\r\n    set sleepLinearVelocity(value: number) {\r\n        this.sleepThreshold = value;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 刚体睡眠的角速度阈值。\r\n     */\r\n    get sleepAngularVelocity(): number {\r\n        return this.sleepThreshold;\r\n    }\r\n\r\n    set sleepAngularVelocity(value: number) {\r\n        this.sleepThreshold = value;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 应用作用力\r\n     * @param fx \r\n     * @param fy \r\n     * @param fz \r\n     * @param localOffset \r\n     */\r\n    applyForceXYZ(fx: number, fy: number, fz: number, localOffset: Vector3 = null): void {\r\n        Utils3D._tempV0.set(fx, fy, fz);\r\n        this.applyForce(Utils3D._tempV0, localOffset);\r\n    }\r\n\r\n\r\n    /**\r\n     * @deprecated\r\n     * @inheritDoc\r\n     * @override\r\n     * @internal\r\n     */\r\n    _parse(data: any): void {\r\n        (data.friction != null) && (this.friction = data.friction);\r\n        (data.rollingFriction != null) && (this.rollingFriction = data.rollingFriction);\r\n        (data.restitution != null) && (this.restitution = data.restitution);\r\n        (data.mass != null) && (this.mass = data.mass);\r\n        (data.linearDamping != null) && (this.linearDamping = data.linearDamping);\r\n        (data.angularDamping != null) && (this.angularDamping = data.angularDamping);\r\n\r\n        if (data.linearFactor != null) {\r\n            var linFac = this.linearFactor;\r\n            linFac.fromArray(data.linearFactor);\r\n            this.linearFactor = linFac;\r\n        }\r\n        if (data.angularFactor != null) {\r\n            var angFac = this.angularFactor;\r\n            angFac.fromArray(data.angularFactor);\r\n            this.angularFactor = angFac;\r\n        }\r\n\r\n        if (data.gravity) {\r\n            this.gravity.fromArray(data.gravity);\r\n            this.gravity = this.gravity;\r\n        }\r\n        super._parse(data);\r\n        this._parseShape(data.shapes);\r\n        (data.isKinematic != null) && (this.isKinematic = data.isKinematic);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _setEventFilter() {\r\n        if (this._collider && this._collider.getCapable(EColliderCapable.Collider_EventFilter)) {\r\n            this._eventsArray = [];\r\n            // event \r\n            if (this.trigger && this.owner.hasListener(Event.TRIGGER_ENTER)) {\r\n                this._eventsArray.push(Event.TRIGGER_ENTER);\r\n            }\r\n            if (this.trigger && this.owner.hasListener(Event.TRIGGER_EXIT)) {\r\n                this._eventsArray.push(Event.TRIGGER_EXIT);\r\n            }\r\n            if (this.trigger && this.owner.hasListener(Event.TRIGGER_STAY)) {\r\n                this._eventsArray.push(Event.TRIGGER_STAY);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_ENTER)) {\r\n                this._eventsArray.push(Event.COLLISION_ENTER);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_STAY)) {\r\n                this._eventsArray.push(Event.COLLISION_STAY);\r\n            }\r\n            if (this.owner.hasListener(Event.COLLISION_EXIT)) {\r\n                this._eventsArray.push(Event.COLLISION_EXIT);\r\n            }\r\n            this._collider.setEventFilter(this._eventsArray);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\nimport { ILaya3D } from \"../../../../ILaya3D\";\r\nimport { Quaternion } from \"../../../maths/Quaternion\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\n\r\n/**\r\n * <code>CompoundColliderShape</code> 类用于创建组合碰撞器。\r\n */\r\nexport class CompoundColliderShape extends Physics3DColliderShape {\r\n\t/**@internal */\r\n\tprivate static _btVector3One: number;\r\n\t/**@internal */\r\n\tprivate static _btTransform: number;\r\n\t/**@internal */\r\n\tprivate static _btOffset: number;\r\n\t/**@internal */\r\n\tprivate static _btRotation: number;\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tstatic __init__(): void {\r\n\t\t//var bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t// CompoundColliderShape._btVector3One = bt.btVector3_create(1, 1, 1);\r\n\t\t// CompoundColliderShape._btTransform = bt.btTransform_create();\r\n\t\t// CompoundColliderShape._btOffset = bt.btVector3_create(0, 0, 0);\r\n\t\t// CompoundColliderShape._btRotation = bt.btQuaternion_create(0, 0, 0, 1);\r\n\t}\r\n\r\n\t/**@internal */\r\n\tprivate _childColliderShapes: Physics3DColliderShape[] = [];\r\n\r\n\t/**\r\n\t * 创建一个新的 <code>CompoundColliderShape</code> 实例。\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t// this._type = Physics3DColliderShape.;\r\n\t\t// this._btShape = ILaya3D.Physics3D._bullet.btCompoundShape_create();\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\tprivate _clearChildShape(shape: any): void {\r\n\t\tshape._attatched = false;\r\n\t\tshape._compoundParent = null;\r\n\t\tshape._indexInCompound = -1;\r\n\t}\r\n\r\n\t/**\r\n\t * @internal\r\n\t */\r\n\t_updateChildTransform(shape: any): void {\r\n\t\t// var bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t// var offset: Vector3 = shape.localOffset;\r\n\t\t// var rotation: Quaternion = shape.localRotation;\r\n\t\t// var btOffset: number = ColliderShape._btVector30;\r\n\t\t// var btQuaternion: number = ColliderShape._btQuaternion0;\r\n\t\t// var btTransform: number = ColliderShape._btTransform0;\r\n\t\t// bt.btVector3_setValue(btOffset, offset.x, offset.y, offset.z);\r\n\t\t// bt.btQuaternion_setValue(btQuaternion, rotation.x, rotation.y, rotation.z, rotation.w);\r\n\t\t// bt.btTransform_setOrigin(btTransform, btOffset);\r\n\t\t// bt.btTransform_setRotation(btTransform, btQuaternion);\r\n\t\t// bt.btCompoundShape_updateChildTransform(this._btShape, shape._indexInCompound, btTransform, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 设置物理shape数组\r\n\t * IDE\r\n\t */\r\n\tpublic set shapes(value: any[]) {\r\n\t\tfor (var i = this._childColliderShapes.length - 1; i >= 0; i--) {\r\n\t\t\tthis.removeChildShape(this._childColliderShapes[i]);\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < value.length; i++) {\r\n\t\t\tthis.addChildShape(value[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get shapes(): any[] {\r\n\t\treturn this._childColliderShapes;\r\n\t}\r\n\r\n\t/**\r\n\t * 添加子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\taddChildShape(shape: any): void {\r\n\t\t// if (shape._attatched)\r\n\t\t// \tthrow \"CompoundColliderShape: this shape has attatched to other entity.\";\r\n\r\n\t\t// shape._attatched = true;\r\n\t\t// shape._compoundParent = this;\r\n\t\t// shape._indexInCompound = this._childColliderShapes.length;\r\n\t\t// this._childColliderShapes.push(shape);\r\n\t\t// var offset: Vector3 = shape.localOffset;\r\n\t\t// var rotation: Quaternion = shape.localRotation;\r\n\t\t// var bt: any = ILaya3D.Physics3D._bullet;\r\n\t\t// bt.btVector3_setValue(CompoundColliderShape._btOffset, offset.x, offset.y, offset.z);\r\n\t\t// bt.btQuaternion_setValue(CompoundColliderShape._btRotation, rotation.x, rotation.y, rotation.z, rotation.w);\r\n\t\t// bt.btTransform_setOrigin(CompoundColliderShape._btTransform, CompoundColliderShape._btOffset);\r\n\t\t// bt.btTransform_setRotation(CompoundColliderShape._btTransform, CompoundColliderShape._btRotation);\r\n\r\n\t\t// var btScale: number = bt.btCollisionShape_getLocalScaling(this._btShape);\r\n\t\t// bt.btCollisionShape_setLocalScaling(this._btShape, CompoundColliderShape._btVector3One);\r\n\t\t// bt.btCompoundShape_addChildShape(this._btShape, CompoundColliderShape._btTransform, shape._btShape);\r\n\t\t// bt.btCollisionShape_setLocalScaling(this._btShape, btScale);\r\n\r\n\t\t// (this._attatchedCollisionObject) && (this._attatchedCollisionObject.colliderShape = this);//修改子Shape需要重新赋值父Shape以及将物理精灵重新加入物理世界等操作\r\n\t}\r\n\r\n\t/**\r\n\t * 移除子碰撞器形状。\r\n\t * @param\tshape 子碰撞器形状。\r\n\t */\r\n\tremoveChildShape(shape:any): void {\r\n\t\t// if (shape._compoundParent === this) {\r\n\t\t// \tvar index: number = shape._indexInCompound;\r\n\t\t// \tthis._clearChildShape(shape);\r\n\t\t// \tvar endShape: ColliderShape = this._childColliderShapes[this._childColliderShapes.length - 1];\r\n\t\t// \tendShape._indexInCompound = index;\r\n\t\t// \tthis._childColliderShapes[index] = endShape;\r\n\t\t// \tthis._childColliderShapes.pop();\r\n\t\t// \tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, index);\r\n\t\t// }\r\n\t}\r\n\r\n\t/**\r\n\t * 清空子碰撞器形状。\r\n\t */\r\n\tclearChildShape(): void {\r\n\t\t// for (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t// \tthis._clearChildShape(this._childColliderShapes[i]);\r\n\t\t// \tILaya3D.Physics3D._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, 0);\r\n\t\t// }\r\n\t\t// this._childColliderShapes.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取子形状数量。\r\n\t * @return\r\n\t */\r\n\tgetChildShapeCount(): number {\r\n\t\treturn this._childColliderShapes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tcloneTo(destObject: any): void {\r\n\t\tvar destCompoundColliderShape: CompoundColliderShape = (<CompoundColliderShape>destObject);\r\n\t\tdestCompoundColliderShape.clearChildShape();\r\n\t\tfor (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++)\r\n\t\t\tdestCompoundColliderShape.addChildShape(this._childColliderShapes[i].clone());\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tclone(): any {\r\n\t\tvar dest: CompoundColliderShape = new CompoundColliderShape();\r\n\t\tthis.cloneTo(dest);\r\n\t\treturn dest;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t * @override\r\n\t */\r\n\tdestroy(): void {\r\n\t\t// super.destroy();\r\n\t\t// for (var i: number = 0, n: number = this._childColliderShapes.length; i < n; i++) {\r\n\t\t// \tvar childShape: ColliderShape = this._childColliderShapes[i];\r\n\t\t// \tif (childShape._referenceCount === 0)\r\n\t\t// \t\tchildShape.destroy();\r\n\t\t// }\r\n\t}\r\n\r\n}\r\n\r\n\r\n","import { ClassUtils } from \"../../utils/ClassUtils\";\r\nimport { CharacterController } from \"./CharacterController\";\r\nimport { ConfigurableConstraint } from \"./constraints/ConfigurableConstraint\";\r\nimport { ConstraintComponent } from \"./constraints/ConstraintComponent\";\r\nimport { FixedConstraint } from \"./constraints/FixedConstraint\";\r\nimport { HingeConstraint } from \"./constraints/HingeConstraint\";\r\nimport { SpringConstraint } from \"./constraints/SpringConstraint\";\r\nimport { PhysicsCollider } from \"./PhysicsCollider\";\r\nimport { PhysicsColliderComponent } from \"./PhysicsColliderComponent\";\r\nimport { PhysicsUpdateList } from \"./PhysicsUpdateList\";\r\nimport { Rigidbody3D } from \"./Rigidbody3D\";\r\nimport { BoxColliderShape } from \"./shape/BoxColliderShape\";\r\nimport { CapsuleColliderShape } from \"./shape/CapsuleColliderShape\";\r\nimport { CompoundColliderShape } from \"./shape/CompoundColliderShape\";\r\nimport { ConeColliderShape } from \"./shape/ConeColliderShape\";\r\nimport { CylinderColliderShape } from \"./shape/CylinderColliderShape\";\r\nimport { MeshColliderShape } from \"./shape/MeshColliderShape\";\r\nimport { Physics3DColliderShape } from \"./shape/Physics3DColliderShape\";\r\nimport { SphereColliderShape } from \"./shape/SphereColliderShape\";\r\n\r\nlet c = ClassUtils.regClass;\r\n\r\nc(\"ConfigurableConstraint\", ConfigurableConstraint);\r\nc(\"FixedConstraint\", FixedConstraint);\r\nc(\"ConstraintComponent\", ConstraintComponent);\r\nc(\"HingeConstraint\", HingeConstraint);\r\nc(\"SpringConstraint\", SpringConstraint);\r\n\r\nc(\"Physics3DColliderShape\", Physics3DColliderShape);\r\nc(\"BoxColliderShape\", BoxColliderShape);\r\nc(\"CapsuleColliderShape\", CapsuleColliderShape);\r\nc(\"CompoundColliderShape\", CompoundColliderShape);\r\nc(\"ConeColliderShape\", ConeColliderShape);\r\nc(\"CylinderColliderShape\", CylinderColliderShape);\r\nc(\"MeshColliderShape\", MeshColliderShape);\r\nc(\"SphereColliderShape\", SphereColliderShape);\r\n\r\n\r\nc(\"CharacterController\", CharacterController);\r\nc(\"Rigidbody3D\", Rigidbody3D);\r\nc(\"PhysicsColliderComponent\", PhysicsColliderComponent);\r\nc(\"PhysicsCollider\", PhysicsCollider);\r\nc(\"PhysicsUpdateList\", PhysicsUpdateList);","import { Laya3D } from \"../../../../Laya3D\";\r\nimport { IHeightFieldShape } from \"../../../Physics3D/interface/Shape/IHeightFieldShape\";\r\nimport { EPhysicsCapable } from \"../../../Physics3D/physicsEnum/EPhycisCapable\";\r\nimport { Vector3 } from \"../../../maths/Vector3\";\r\nimport { Physics3DColliderShape } from \"./Physics3DColliderShape\";\r\n\r\n\r\n/**\r\n * 高度场数据\r\n */\r\nexport interface heightFieldData {\r\n    /** 排*/\r\n    numRows: number;\r\n    /** 列*/\r\n    numCols: number;\r\n    /** 高度数据*/\r\n    heightData: Float32Array;\r\n    /** 镶嵌标志 0和1 分别表示地形三角形朝向左还是朝右*/\r\n    flag: Uint8Array;\r\n    /** 高度Scale*/\r\n    scale: Vector3;\r\n}\r\n/**\r\n * 此类描述高度场物理碰撞\r\n */\r\nexport class HeightFieldColliderShape extends Physics3DColliderShape {\r\n    /**@internal */\r\n    _shape: IHeightFieldShape;\r\n    /**@internal */\r\n    _terrainData: heightFieldData;\r\n\r\n    /**\r\n     * 实例化一个高度场碰撞体\r\n     * @param heightFieldData \r\n     */\r\n    constructor(heightFieldData: heightFieldData) {\r\n        super();\r\n        this._terrainData = heightFieldData;\r\n        this._shape.setHeightFieldData(this._terrainData.numRows, this._terrainData.numCols, this._terrainData.heightData, this._terrainData.flag, this._terrainData.scale);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _createShape() {\r\n        if (Laya3D.PhysicsCreateUtil.getPhysicsCapable(EPhysicsCapable.physics_heightFieldColliderShape))\r\n            this._shape = Laya3D.PhysicsCreateUtil.createHeightFieldShape();\r\n        else {\r\n            console.error(\"HeightFieldColliderShape: cant enable HeightFieldColliderShape\");\r\n        }\r\n    }\r\n}"],"mappings":"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"}