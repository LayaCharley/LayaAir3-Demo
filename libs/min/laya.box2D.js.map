{"version":3,"names":["physics2DJSFactory","constructor","this","_velocityIterations","_positionIterations","drawFlags_none","_box2d","b2DrawFlags","drawFlags_shapeBit","drawFlags_jointBit","drawFlags_aabbBit","drawFlags_pairBit","drawFlags_centerOfMassBit","drawFlags_all","box2d","world","_world","debugDraw","_debugDraw","PIXEL_RATIO","_PIXEL_RATIO","velocityIterations","positionIterations","gravity","GetGravity","value","createPhyVec2","x","y","SetGravity","allowSleeping","GetAllowSleeping","SetAllowSleeping","bodyCount","GetBodyCount","contactCount","GetContactCount","jointCount","GetJointCount","layaToPhyValue","_Re_PIXEL_RATIO","phyToLayaValue","b2Vec2","createPhyFromLayaVec2","initialize","window","_tempVec2","Promise","resolve","start","Physics2DOption","pixelRatio","b2World","SetDestructionListener","DestructionListener","SetContactListener","ContactListener","destroyWorld","_jsDraw","removeSelf","update","delta","Step","sendEvent","type","contact","colliderA","GetFixtureA","collider","colliderB","GetFixtureB","ownerA","owner","ownerB","__this","getHitInfo","manifold","b2WorldManifold","GetWorldManifold","p","points","args","event","createDebugDraw","flags","Physics2DDebugDraw","zOrder","ILaya","stage","addChild","jsDraw","b2Draw","SetFlags","PushTransform","bind","PopTransform","DrawSegment","DrawPolygon","DrawSolidPolygon","DrawCircle","DrawSolidCircle","DrawTransform","DrawPoint","SetDebugDraw","removeDebugDraw","destroy","setDebugFlag","appendFlags","AppendFlags","clearFlags","ClearFlags","shiftOrigin","ShiftOrigin","createBody","def","b2BodyDef","userData","pointer","CreateBody","console","error","removeBody","body","DestroyBody","createJoint","joint","CreateJoint","m_userData","isDestroy","removeJoint","DestroyJoint","getJoint_userData","getJoint_userData_destroy","set_Joint_EnableMotor","enableMotor","EnableMotor","set_Joint_SetMotorSpeed","motorSpeed","SetMotorSpeed","set_Joint_SetMaxMotorTorque","maxTorque","SetMaxMotorTorque","set_Joint_EnableLimit","enableLimit","EnableLimit","set_Joint_SetLimits","lowerAngle","upperAngle","SetLimits","set_Joint_frequencyAndDampingRatio","Joint","frequency","dampingRatio","isdamping","out","b2AngularStiffness","GetBodyA","GetBodyB","SetStiffness","stiffness","SetDamping","damping","createDistanceJoint","defStruct","_tempDistanceJointDef","b2DistanceJointDef","bodyA","bodyB","localAnchorA","Set","localAnchorB","b2LinearStiffness","collideConnected","length","p1","GetWorldPoint","p2","SubVV","Length","maxLength","b2_maxFloat","minLength","set_DistanceJoint_length","SetLength","set_DistanceJoint_MaxLength","SetMaxLength","set_DistanceJoint_MinLength","SetMinLength","set_DistanceJointStiffnessDamping","steffness","create_GearJoint","_tempGearJoinDef","b2GearJointDef","joint1","joint2","ratio","set_GearJoint_SetRatio","radio","SetRatio","create_PulleyJoint","_tempPulleyJointDef","b2PulleyJointDef","groundVecA","groundAnchorA","groundVecB","groundAnchorB","anchorVecA","anchorVecB","Initialize","create_WheelJoint","_tempWheelJointDef","b2WheelJointDef","anchorVec","anchor","axis","maxMotorTorque","lowerTranslation","upperTranslation","create_WeldJoint","_tempWeldJointDef","b2WeldJointDef","create_MouseJoint","_tempMouseJointDef","b2MouseJointDef","target","maxForce","GetMass","set_MouseJoint_target","SetTarget","set_MouseJoint_frequencyAndDampingRatio","Physics2D","I","_factory","create_RevoluteJoint","_tempRevoluteJointDef","b2RevoluteJointDef","create_MotorJoint","_tempMotorJointDef","b2MotorJointDef","linearOffset","angularOffset","correctionFactor","set_MotorJoint_linearOffset","SetLinearOffset","set_MotorJoint_SetAngularOffset","angular","SetAngularOffset","set_MotorJoint_SetMaxForce","SetMaxForce","set_MotorJoint_SetMaxTorque","SetMaxTorque","set_MotorJoint_SetCorrectionFactor","SetCorrectionFactor","create_PrismaticJoint","_tempPrismaticJointDef","b2PrismaticJointDef","tdef","maxMotorForce","create_boxColliderShape","b2PolygonShape","set_collider_SetAsBox","shape","width","height","pos","scaleX","scaleY","SetAsBox","create_ChainShape","b2ChainShape","set_ChainShape_data","arr","loop","len","ps","i","n","push","CreateLoop","CreateChain","create_CircleShape","b2CircleShape","set_CircleShape_radius","radius","scale","m_radius","set_CircleShape_pos","m_p","create_EdgeShape","b2EdgeShape","set_EdgeShape_data","SetTwoSided","create_PolygonShape","set_PolygonShape_data","createFixtureDef","fixtureDef","b2FixtureDef","density","friction","isSensor","restitution","PhysicsShape","BoxShape","PolygonShape","ChainShape","CircleShape","EdgeShape","_shape","set_fixtureDef_GroupIndex","groupIndex","filter","set_fixtureDef_CategoryBits","categoryBits","set_fixtureDef_maskBits","maskbits","maskBits","createfixture","data","CreateFixture","GetShape","GetFilterData","resetFixtureData","fixture","SetDensity","SetFriction","SetSensor","SetRestitution","set_fixture_collider","instance","get_fixture_body","GetBody","rigidBody_DestroyFixture","DestroyFixture","rigidBodyDef_Create","rigidbodyDef","position","angle","allowSleep","angularDamping","angularVelocity","bullet","fixedRotation","gravityScale","linearDamping","linearVelocity","getbodyType","get_RigidBody_Position","v2","GetPosition","setValue","get_RigidBody_Angle","GetAngle","set_RigibBody_Transform","SetTransform","get_rigidBody_WorldPoint","point","get_rigidBody_LocalPoint","GetLocalPoint","rigidBody_applyForce","force","ApplyForce","rigidBody_applyForceToCenter","ApplyForceToCenter","rigidbody_ApplyLinearImpulse","impulse","ApplyLinearImpulse","rigidbody_ApplyLinearImpulseToCenter","ApplyLinearImpulseToCenter","rigidbody_applyTorque","torque","ApplyTorque","set_rigidbody_Velocity","velocity","SetLinearVelocity","set_rigidbody_Awake","awake","SetAwake","get_rigidbody_Mass","get_rigidBody_Center","GetLocalCenter","get_rigidBody_IsAwake","IsAwake","get_rigidBody_WorldCenter","GetWorldCenter","set_rigidBody_type","SetType","set_rigidBody_gravityScale","SetGravityScale","set_rigidBody_allowRotation","SetFixedRotation","set_rigidBody_allowSleep","SetSleepingAllowed","set_rigidBody_angularDamping","SetAngularDamping","get_rigidBody_angularVelocity","GetAngularVelocity","set_rigidBody_angularVelocity","SetAngularVelocity","set_rigidBody_linearDamping","SetLinearDamping","get_rigidBody_linearVelocity","GetLinearVelocity","set_rigidBody_linearVelocity","set_rigidBody_bullet","SetBullet","retSet_rigidBody_MassData","ResetMassData","b2BodyType","xf","q","vertices","vertexCount","color","mG","drawPoly","MakeStyleString","lineWidth","center","drawCircle","cx","cy","drawLine","DrawParticles","centers","colors","count","Red","Green","size","camera","m_zoom","hsize","m_extent","drawRect","DrawString","message","textG","fillText","DrawString_color","DrawStringWorld","DrawAABB","aabb","lowerBound","w","upperBound","h","BeginContact","_eventList","EndContact","PreSolve","oldManifold","PostSolve","SayGoodbyeJoint","params","SayGoodbyeFixture","SayGoodbyeParticleGroup","SayGoodbyeParticle"],"sources":["../../src/layaAir/laya/physics/factory/physics2DJSFactory.ts"],"sourcesContent":["import { IV2, Vector2 } from \"../../maths/Vector2\";\r\nimport { ColliderBase } from \"../Collider2D/ColliderBase\";\r\nimport { FixtureBox2DDef, PhysicsShape } from \"../Collider2D/ColliderStructInfo\";\r\nimport { IPhysiscs2DFactory } from \"../IPhysiscs2DFactory\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { Physics2DOption } from \"../Physics2DOption\";\r\nimport { RigidBody2DInfo } from \"../RigidBody2DInfo\";\r\nimport { physics2D_DistancJointDef, physics2D_GearJointDef, physics2D_MotorJointDef, physics2D_MouseJointJointDef, physics2D_PrismaticJointDef, physics2D_PulleyJointDef, physics2D_RevoluteJointDef, physics2D_WeldJointDef, physics2D_WheelJointDef } from \"../joint/JointDefStructInfo\"\r\nimport { Physics2DDebugDraw } from \"../Physics2DDebugDraw\";\r\nimport { ILaya } from \"../../../ILaya\";\r\n\r\n/**\r\n * 实现Box2D js 2.4.1 版本\r\n */\r\n\r\nexport class physics2DJSFactory implements IPhysiscs2DFactory {\r\n\r\n    /**@internal box2D Engine */\r\n    _box2d: any;\r\n\r\n    /**@internal box2D world */\r\n    _world: any;\r\n\r\n    /**@internal  */\r\n    _debugDraw: Physics2DDebugDraw;\r\n\r\n    /**@internal  */\r\n    private _jsDraw: any;\r\n\r\n\r\n    /**@internal 旋转迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    _velocityIterations: number = 8;\r\n\r\n    /**@internal 位置迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    _positionIterations: number = 3;\r\n\r\n    /**@internal 像素转换米的转换比率*/\r\n    _PIXEL_RATIO: number;\r\n\r\n    /**@internal 米转换像素的转换比率*/\r\n    _Re_PIXEL_RATIO: number;\r\n\r\n    /**@internal  */\r\n    _tempVec2: any;\r\n\r\n    /**@internal  */\r\n    protected _tempDistanceJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempGearJoinDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempPulleyJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempWheelJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempWeldJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempMouseJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempRevoluteJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempMotorJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempPrismaticJointDef: any;\r\n\r\n    /** \r\n    * @internal\r\n    */\r\n    get drawFlags_none(): number {\r\n        return this._box2d.b2DrawFlags[\"e_none\"];\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_shapeBit(): number {\r\n        return this._box2d.b2DrawFlags[\"e_shapeBit\"];\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_jointBit(): number {\r\n        return this._box2d.b2DrawFlags[\"e_jointBit\"];\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_aabbBit(): number {\r\n        return this._box2d.b2DrawFlags[\"e_aabbBit\"];\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_pairBit(): number {\r\n        return this._box2d.b2DrawFlags[\"e_pairBit\"];\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_centerOfMassBit(): number {\r\n        return this._box2d.b2DrawFlags[\"e_centerOfMassBit\"];\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_all(): number {\r\n        return this._box2d.b2DrawFlags[\"e_all\"];\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get box2d(): any {\r\n        return this._box2d;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get world(): any {\r\n        return this._world;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get debugDraw(): Physics2DDebugDraw {\r\n        return this._debugDraw;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get PIXEL_RATIO(): number {\r\n        return this._PIXEL_RATIO;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get velocityIterations(): number {\r\n        return this._velocityIterations;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get positionIterations(): number {\r\n        return this._positionIterations;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 物理世界重力环境，默认值为{x:0,y:1}\r\n     * 如果修改y方向重力方向向上，可以直接设置gravity.y=-1;\r\n     */\r\n    get gravity(): any {\r\n        return this.world.GetGravity();\r\n    }\r\n\r\n    set gravity(value: Vector2) {\r\n        var gravity: any = this.createPhyVec2(value.x, value.y);//TODO 全局设置，不必New\r\n        this.world.SetGravity(gravity);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性\r\n     */\r\n    get allowSleeping(): boolean {\r\n        return this.world.GetAllowSleeping();\r\n    }\r\n\r\n    set allowSleeping(value: boolean) {\r\n        this.world.SetAllowSleeping(value);\r\n    }\r\n\r\n\r\n    /**@internal 获得刚体总数量*/\r\n    get bodyCount(): number {\r\n        return this.world.GetBodyCount();\r\n    }\r\n\r\n    /**@internal 获得碰撞总数量*/\r\n    get contactCount(): number {\r\n        return this.world.GetContactCount();\r\n    }\r\n\r\n    /**@internal 获得关节总数量*/\r\n    get jointCount(): number {\r\n        return this.world.GetJointCount();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 渲染系统数据转换为物理系统数据 \r\n     */\r\n    layaToPhyValue(value: number): number {\r\n        return value * this._Re_PIXEL_RATIO;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 物理系统数据转换为渲染系统数据 \r\n     */\r\n    phyToLayaValue(value: number): number {\r\n        return value * this.PIXEL_RATIO;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 创建物理系统的Vec2\r\n     * @param x (单位： 米)\r\n     * @param y (单位： 米)\r\n     */\r\n    createPhyVec2(x: number, y: number): any {\r\n        return new this.box2d.b2Vec2(x, y);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 创建物理系统的Vec2\r\n     * @param x (单位： 像素)\r\n     * @param y (单位： 像素)\r\n     */\r\n    createPhyFromLayaVec2(x: number, y: number): any {\r\n        return new this.box2d.b2Vec2(this.layaToPhyValue(x), this.layaToPhyValue(y));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * initial box2D physics Engine\r\n     * @returns \r\n     */\r\n    initialize(): Promise<void> {\r\n        this._box2d = (<any>window).box2d;\r\n        this._tempVec2 = new this.box2d.b2Vec2();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * create Box2D world\r\n     */\r\n    start() {\r\n        this._PIXEL_RATIO = Physics2DOption.pixelRatio;\r\n        this._Re_PIXEL_RATIO = 1 / Physics2DOption.pixelRatio;\r\n        var gravity: any = this.createPhyFromLayaVec2(Physics2DOption.gravity.x, Physics2DOption.gravity.y);\r\n        this._world = new this.box2d.b2World(gravity);\r\n        this.world.SetDestructionListener(new DestructionListener());\r\n        this.world.SetContactListener(new ContactListener());\r\n        this.allowSleeping = Physics2DOption.allowSleeping == null ? true : Physics2DOption.allowSleeping;\r\n        this._velocityIterations = Physics2DOption.velocityIterations;\r\n        this._positionIterations = Physics2DOption.positionIterations;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * destroy Box2D world\r\n     * @param options \r\n     */\r\n    destroyWorld() {\r\n        this._world = null;\r\n        this._world = null;\r\n        this._jsDraw = null;\r\n        if (this._debugDraw) this._debugDraw.removeSelf()\r\n        this._debugDraw = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * update Frame\r\n     * @param delta \r\n     */\r\n    update(delta: number): void {\r\n\r\n        //set Physics Position from Engine TODO\r\n        if (!this.world) return;\r\n        this.world.Step(delta, this.velocityIterations, this.positionIterations, 3);\r\n\r\n        //set engine Position from Phyiscs TODO\r\n    }\r\n\r\n    /**\r\n     * set Event CallBack\r\n     * @param type \r\n     * @param contact \r\n     */\r\n    sendEvent(type: number, contact: any): void {\r\n        var colliderA: any = contact.GetFixtureA().collider;\r\n        var colliderB: any = contact.GetFixtureB().collider;\r\n        var ownerA: any = colliderA.owner;\r\n        var ownerB: any = colliderB.owner;\r\n        let __this = this;\r\n        contact.getHitInfo = function (): any {\r\n            var manifold: any = new this.box2d.b2WorldManifold();\r\n            this.GetWorldManifold(manifold);\r\n            //第一点？\r\n            var p: any = manifold.points[0];\r\n            p.x = __this.phyToLayaValue(p.x);\r\n            p.y = __this.phyToLayaValue(p.y);\r\n            return manifold;\r\n        }\r\n        if (ownerA) {\r\n            var args: any[] = [colliderB, colliderA, contact];\r\n            if (type === 0) {\r\n                ownerA.event(\"triggerenter\", args);\r\n                if (!ownerA[\"_triggered\"]) {\r\n                    ownerA[\"_triggered\"] = true;\r\n                } else {\r\n                    ownerA.event(\"triggerstay\", args);\r\n                }\r\n            } else {\r\n                ownerA[\"_triggered\"] = false;\r\n                ownerA.event(\"triggerexit\", args);\r\n            }\r\n        }\r\n        if (ownerB) {\r\n            args = [colliderA, colliderB, contact];\r\n            if (type === 0) {\r\n                ownerB.event(\"triggerenter\", args);\r\n                if (!ownerB[\"_triggered\"]) {\r\n                    ownerB[\"_triggered\"] = true;\r\n                } else {\r\n                    ownerB.event(\"triggerstay\", args);\r\n                }\r\n            } else {\r\n                ownerB[\"_triggered\"] = false;\r\n                ownerB.event(\"triggerexit\", args);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 创建物理绘制\r\n     */\r\n    createDebugDraw(flags: number) {\r\n        if (this._debugDraw) return;\r\n        let debug = this._debugDraw = new Physics2DDebugDraw(this);\r\n        debug.zOrder = 1000;\r\n        ILaya.stage.addChild(this._debugDraw);\r\n        this._debugDraw.zOrder = 1000;\r\n\r\n        if (this._jsDraw == null) {\r\n            var jsDraw = this._jsDraw = new this.box2d.b2Draw();\r\n            jsDraw.SetFlags(flags);\r\n            jsDraw.PushTransform = this.PushTransform.bind(this);\r\n            jsDraw.PopTransform = this.PopTransform.bind(this);\r\n            jsDraw.DrawSegment = this.DrawSegment.bind(this);\r\n            jsDraw.DrawPolygon = this.DrawPolygon.bind(this);\r\n            jsDraw.DrawSolidPolygon = this.DrawSolidPolygon.bind(this);\r\n            jsDraw.DrawCircle = this.DrawCircle.bind(this);\r\n            jsDraw.DrawSolidCircle = this.DrawSolidCircle.bind(this);\r\n            jsDraw.DrawTransform = this.DrawTransform.bind(this);\r\n            jsDraw.DrawPoint = this.DrawPoint.bind(this);\r\n        }\r\n\r\n        this.world.SetDebugDraw(this._jsDraw);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 删除物理绘制\r\n     */\r\n    removeDebugDraw() {\r\n        if (!this._debugDraw) return;\r\n        this.world.SetDebugDraw(null);\r\n        this._debugDraw.removeSelf()\r\n        this._debugDraw.destroy()\r\n        this._debugDraw = null;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 更新显示数据\r\n     */\r\n    setDebugFlag(flags: number): void {\r\n        if (this._jsDraw) this._jsDraw.SetFlags(flags);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 显示标记\r\n     */\r\n    appendFlags(flags: number): void {\r\n        if (this._jsDraw) this._jsDraw.AppendFlags(flags);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 清除标记\r\n     */\r\n    clearFlags(flags: number): void {\r\n        if (this._jsDraw) this._jsDraw.ClearFlags(flags);\r\n    }\r\n\r\n    /**\r\n     * move center of world\r\n     * @param x \r\n     * @param y \r\n     */\r\n    shiftOrigin(x: number, y: number) {\r\n        this.world.ShiftOrigin({ x: this.layaToPhyValue(x), y: this.layaToPhyValue(y) });\r\n    }\r\n\r\n    /**\r\n     * create Box2D Body\r\n     * @param def \r\n     * @returns \r\n     */\r\n    createBody(def: any) {\r\n        if (!def) {\r\n            def = new this.box2d.b2BodyDef()\r\n        }\r\n        def.userData = { pointer: 0 };\r\n        if (this.world) {\r\n            return this.world.CreateBody(def);\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove Box2D Body\r\n     * @param body \r\n     */\r\n    removeBody(body: any): void {\r\n        if (this.world) this.world.DestroyBody(body);\r\n    }\r\n\r\n\r\n    /**\r\n     * create Box2D Joint\r\n     * @param def \r\n     * @returns \r\n     */\r\n    createJoint(def: any): any {\r\n        if (this.world) {\r\n            let joint = this.world.CreateJoint(def);\r\n            joint.m_userData = {};\r\n            joint.m_userData.isDestroy = false;\r\n            return joint;\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove Box2D Joint\r\n     * @param joint \r\n     */\r\n    removeJoint(joint: any): void {\r\n        if (this.world) this.world.DestroyJoint(joint);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     */\r\n    getJoint_userData(joint: any) {\r\n        return joint.m_userData;\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     */\r\n    getJoint_userData_destroy(joint: any): boolean {\r\n        return joint.m_userData.isDestroy;\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param enableMotor \r\n     */\r\n    set_Joint_EnableMotor(joint: any, enableMotor: boolean): void {\r\n        joint.EnableMotor(enableMotor);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param motorSpeed \r\n     */\r\n    set_Joint_SetMotorSpeed(joint: any, motorSpeed: number): void {\r\n        joint.SetMotorSpeed(motorSpeed);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param maxTorque\r\n     */\r\n    set_Joint_SetMaxMotorTorque(joint: any, maxTorque: number): void {\r\n        joint.SetMaxMotorTorque(maxTorque);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param enableLimit\r\n     */\r\n    set_Joint_EnableLimit(joint: any, enableLimit: boolean): void {\r\n        joint.EnableLimit(enableLimit);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param lowerAngle\r\n     * @param upperAngle \r\n     */\r\n    set_Joint_SetLimits(joint: any, lowerAngle: number, upperAngle: number): void {\r\n        joint.SetLimits(lowerAngle, upperAngle);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param frequency\r\n     * @param dampingRatio\r\n     * @param isdamping\r\n     */\r\n    set_Joint_frequencyAndDampingRatio(Joint: any, frequency: number, dampingRatio: number, isdamping: boolean): void {\r\n        let out: any = {}\r\n        this.box2d.b2AngularStiffness(out, frequency, dampingRatio, Joint.GetBodyA(), Joint.GetBodyB());\r\n        if (!isdamping) {\r\n            Joint.SetStiffness(out.stiffness);\r\n        }\r\n        Joint.SetDamping(out.damping);\r\n    }\r\n\r\n    /**\r\n     * create Distance Joint\r\n     * @param defStruct \r\n     */\r\n    createDistanceJoint(defStruct: physics2D_DistancJointDef) {\r\n        this._tempDistanceJointDef || (this._tempDistanceJointDef = new this.box2d.b2DistanceJointDef());\r\n        var def = this._tempDistanceJointDef;\r\n        def.bodyA = defStruct.bodyA;\r\n        def.bodyB = defStruct.bodyB;\r\n        def.localAnchorA.Set(this.layaToPhyValue(defStruct.localAnchorA.x), this.layaToPhyValue(defStruct.localAnchorA.y));\r\n        def.localAnchorB.Set(this.layaToPhyValue(defStruct.localAnchorB.x), this.layaToPhyValue(defStruct.localAnchorB.y));\r\n        this.box2d.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, def.bodyA, def.bodyB);\r\n        def.collideConnected = defStruct.collideConnected;\r\n\r\n        if (defStruct.length > 0) {\r\n            def.length = this.layaToPhyValue(defStruct.length);\r\n        } else {\r\n            var p1: any = def.bodyA.GetWorldPoint(def.localAnchorA, new this.box2d.b2Vec2());\r\n            var p2: any = def.bodyB.GetWorldPoint(def.localAnchorB, new this.box2d.b2Vec2());\r\n            def.length = this.box2d.b2Vec2.SubVV(p2, p1, new this.box2d.b2Vec2()).Length();\r\n        }\r\n\r\n        if (defStruct.maxLength > 0)\r\n            def.maxLength = this.layaToPhyValue(defStruct.maxLength);\r\n        else\r\n            def.maxLength = this.box2d.b2_maxFloat;\r\n        if (defStruct.minLength > 0)\r\n            def.minLength = this.layaToPhyValue(defStruct.minLength);\r\n        else\r\n            def.minLength = 0;\r\n\r\n        return this.createJoint(def);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param length \r\n     */\r\n    set_DistanceJoint_length(joint: any, length: number) {\r\n        joint.SetLength(this.layaToPhyValue(length));\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param length \r\n     */\r\n    set_DistanceJoint_MaxLength(joint: any, length: number) {\r\n        joint.SetMaxLength(this.layaToPhyValue(length));\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param length \r\n     */\r\n    set_DistanceJoint_MinLength(joint: any, length: number) {\r\n        joint.SetMinLength(this.layaToPhyValue(length));\r\n    }\r\n\r\n    /** \r\n    * @param joint \r\n    * @param steffness\r\n    * @param damping \r\n    */\r\n    set_DistanceJointStiffnessDamping(joint: any, steffness: number, damping: number) {\r\n        let out: any = {};\r\n        let bodyA = joint.bodyA;\r\n        let bodyB = joint.bodyB;\r\n        this.box2d.b2LinearStiffness(out, steffness, damping, bodyA, bodyB);\r\n        joint.SetStiffness(out.stiffness);\r\n        joint.SetDamping(out.damping);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_GearJoint(defStruct: physics2D_GearJointDef): any {\r\n        this._tempGearJoinDef || (this._tempGearJoinDef = new this.box2d.b2GearJointDef());\r\n        let def = this._tempGearJoinDef;\r\n        def.bodyA = defStruct.bodyA;\r\n        def.bodyB = defStruct.bodyB;\r\n        def.joint1 = defStruct.joint1;\r\n        def.joint2 = defStruct.joint2;\r\n        def.ratio = defStruct.ratio;\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param radio \r\n     */\r\n    set_GearJoint_SetRatio(joint: any, radio: number): void {\r\n        joint.SetRatio(radio);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_PulleyJoint(defStruct: physics2D_PulleyJointDef): void {\r\n        this._tempPulleyJointDef || (this._tempPulleyJointDef = new this.box2d.b2PulleyJointDef());\r\n        let def = this._tempPulleyJointDef;\r\n        let groundVecA = this.createPhyFromLayaVec2(defStruct.groundAnchorA.x, defStruct.groundAnchorA.y);\r\n        let groundVecB = this.createPhyFromLayaVec2(defStruct.groundAnchorB.x, defStruct.groundAnchorB.y);\r\n        let anchorVecA = this.createPhyFromLayaVec2(defStruct.localAnchorA.x, defStruct.localAnchorA.y);\r\n        let anchorVecB = this.createPhyFromLayaVec2(defStruct.localAnchorB.x, defStruct.localAnchorB.y);\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, groundVecA, groundVecB, anchorVecA, anchorVecB, defStruct.ratio);\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_WheelJoint(defStruct: physics2D_WheelJointDef) {\r\n        this._tempWheelJointDef || (this._tempWheelJointDef = new this.box2d.b2WheelJointDef());\r\n        let def = this._tempWheelJointDef;\r\n        let anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\r\n        let axis = this.createPhyVec2(defStruct.axis.x, defStruct.axis.y);\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec, axis);\r\n        def.enableMotor = defStruct.enableMotor;\r\n        def.motorSpeed = defStruct.motorSpeed;\r\n        def.maxMotorTorque = defStruct.maxMotorTorque;\r\n        this.box2d.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, def.bodyA, def.bodyB);\r\n        def.collideConnected = defStruct.collideConnected;\r\n        def.enableLimit = defStruct.enableLimit;\r\n        def.lowerTranslation = this.layaToPhyValue(defStruct.lowerTranslation);\r\n        def.upperTranslation = this.layaToPhyValue(defStruct.upperTranslation);\r\n        return this.createJoint(def);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_WeldJoint(defStruct: physics2D_WeldJointDef) {\r\n        this._tempWeldJointDef || (this._tempWeldJointDef = new this.box2d.b2WeldJointDef());\r\n        let def = this._tempWeldJointDef;\r\n        let anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec);\r\n        this.box2d.b2AngularStiffness(def, defStruct.frequency, defStruct.dampingRatio, defStruct.bodyA, defStruct.bodyB);\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def);\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @returns\r\n     */\r\n    create_MouseJoint(def: physics2D_MouseJointJointDef): any {\r\n        this._tempMouseJointDef || (this._tempMouseJointDef = new this.box2d.b2MouseJointDef());\r\n        this._tempMouseJointDef.bodyA = def.bodyA;\r\n        this._tempMouseJointDef.bodyB = def.bodyB;\r\n        this._tempMouseJointDef.target = this.createPhyFromLayaVec2(def.target.x, def.target.y);\r\n        this._tempMouseJointDef.maxForce = def.maxForce * def.bodyB.GetMass();\r\n        this._tempMouseJointDef.collideConnected = true;\r\n        this.box2d.b2LinearStiffness(this._tempMouseJointDef, def.frequency, def.dampingRatio, def.bodyA, def.bodyB)\r\n        return this.createJoint(this._tempMouseJointDef);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param x \r\n     * @param y \r\n     */\r\n    set_MouseJoint_target(joint: any, x: number, y: number) {\r\n        joint.SetTarget(this.createPhyFromLayaVec2(x, y))\r\n    }\r\n\r\n    /** \r\n     * @param Joint \r\n     * @param dampingRatio \r\n     * @param frequency \r\n     */\r\n    set_MouseJoint_frequencyAndDampingRatio(Joint: any, frequency: number, dampingRatio: number) {\r\n        Physics2D.I._factory.set_DistanceJointStiffnessDamping(Joint, frequency, dampingRatio);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    create_RevoluteJoint(def: physics2D_RevoluteJointDef): any {\r\n        this._tempRevoluteJointDef || (this._tempRevoluteJointDef = new this.box2d.b2RevoluteJointDef());\r\n        var anchorVec = this.createPhyFromLayaVec2(def.anchor.x, def.anchor.y);\r\n        this._tempRevoluteJointDef.Initialize(def.bodyA, def.bodyB, anchorVec);\r\n        this._tempRevoluteJointDef.enableMotor = def.enableMotor;\r\n        this._tempRevoluteJointDef.motorSpeed = def.motorSpeed;\r\n        this._tempRevoluteJointDef.maxMotorTorque = def.maxMotorTorque;\r\n        this._tempRevoluteJointDef.enableLimit = def.enableLimit;\r\n        this._tempRevoluteJointDef.lowerAngle = def.lowerAngle;\r\n        this._tempRevoluteJointDef.upperAngle = def.upperAngle;\r\n        this._tempRevoluteJointDef.collideConnected = def.collideConnected;\r\n        return this.createJoint(this._tempRevoluteJointDef);\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     */\r\n    create_MotorJoint(def: physics2D_MotorJointDef): any {\r\n        this._tempMotorJointDef || (this._tempMotorJointDef = new this.box2d.b2MotorJointDef());\r\n        this._tempMotorJointDef.Initialize(def.bodyA, def.bodyB);\r\n        this._tempMotorJointDef.linearOffset = this.createPhyFromLayaVec2(def.linearOffset.x, def.linearOffset.y);\r\n        this._tempMotorJointDef.angularOffset = def.angularOffset;\r\n        this._tempMotorJointDef.maxForce = def.maxForce;\r\n        this._tempMotorJointDef.maxTorque = def.maxTorque;\r\n        this._tempMotorJointDef.correctionFactor = def.correctionFactor;\r\n        this._tempMotorJointDef.collideConnected = def.collideConnected;\r\n        return this.createJoint(this._tempMotorJointDef);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param x \r\n     * @param y \r\n     */\r\n    set_MotorJoint_linearOffset(joint: any, x: number, y: number): void {\r\n        joint.SetLinearOffset(this.createPhyFromLayaVec2(x, y));\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param angular \r\n     */\r\n    set_MotorJoint_SetAngularOffset(joint: any, angular: number): void {\r\n        joint.SetAngularOffset(angular);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param maxForce \r\n     */\r\n    set_MotorJoint_SetMaxForce(joint: any, maxForce: number): void {\r\n        joint.SetMaxForce(maxForce);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param maxTorque \r\n     */\r\n    set_MotorJoint_SetMaxTorque(joint: any, maxTorque: number): void {\r\n        joint.SetMaxTorque(maxTorque);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param correctionFactor \r\n     */\r\n    set_MotorJoint_SetCorrectionFactor(joint: any, correctionFactor: number): void {\r\n        joint.SetCorrectionFactor(correctionFactor);\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @returns\r\n     */\r\n    create_PrismaticJoint(def: physics2D_PrismaticJointDef): any {\r\n        this._tempPrismaticJointDef || (this._tempPrismaticJointDef = new this.box2d.b2PrismaticJointDef());\r\n        let tdef = this._tempPrismaticJointDef;\r\n        let anchorVec = this.createPhyFromLayaVec2(def.anchor.x, def.anchor.y);\r\n        let axis = this.createPhyVec2(def.axis.x, def.axis.y);\r\n        tdef.Initialize(def.bodyA, def.bodyB, anchorVec, axis);\r\n        tdef.enableMotor = def.enableMotor;\r\n        tdef.motorSpeed = def.motorSpeed;\r\n        tdef.maxMotorForce = def.maxMotorForce;\r\n        tdef.enableLimit = def.enableLimit;\r\n        tdef.lowerTranslation = this.layaToPhyValue(def.lowerTranslation);\r\n        tdef.upperTranslation = this.layaToPhyValue(def.upperTranslation);\r\n        tdef.collideConnected = def.collideConnected;\r\n        return this.createJoint(tdef);\r\n    }\r\n\r\n    //----------------Collider-------------------\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_boxColliderShape() {\r\n        return new this.box2d.b2PolygonShape();\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    set_collider_SetAsBox(shape: any, width: number, height: number, pos: IV2, scaleX: number, scaleY: number) {\r\n        width = this.layaToPhyValue(width * scaleX);\r\n        height = this.layaToPhyValue(height * scaleY);\r\n        shape.SetAsBox(width, height, this.createPhyFromLayaVec2(pos.x * scaleX, pos.y * scaleY), 0);\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_ChainShape() {\r\n        return new this.box2d.b2ChainShape();\r\n    }\r\n\r\n    /** \r\n     * @param shape\r\n     * @param x\r\n     * @param y \r\n     * @param arr \r\n     * @param loop \r\n     */\r\n    set_ChainShape_data(shape: any, x: number, y: number, arr: number[], loop: boolean, scaleX: number, scaleY: number) {\r\n        let len = arr.length;\r\n        var ps: any[] = [];\r\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\r\n            ps.push(this.createPhyFromLayaVec2((x + arr[i]) * scaleX, (y + arr[i + 1]) * scaleY));\r\n        }\r\n        loop ? shape.CreateLoop(ps, len / 2) : shape.CreateChain(ps, len / 2, new (<any>window).box2d.b2Vec2(0, 0), new (<any>window).box2d.b2Vec2(0, 0));\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    create_CircleShape() {\r\n        return new this.box2d.b2CircleShape();\r\n    }\r\n\r\n\r\n    /** \r\n     * @param shape\r\n     * @param radius \r\n     */\r\n    set_CircleShape_radius(shape: any, radius: number, scale: number) {\r\n        shape.m_radius = this.layaToPhyValue(radius * scale);\r\n    }\r\n\r\n    /** \r\n     * @param shape \r\n     * @param x \r\n     * @param y \r\n     */\r\n    set_CircleShape_pos(shape: any, x: number, y: number, scale: number) {\r\n        shape.m_p.Set(this.layaToPhyValue(x * scale), this.layaToPhyValue(y * scale));\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_EdgeShape() {\r\n        return new this.box2d.b2EdgeShape();\r\n    }\r\n\r\n    /** \r\n     * @param shape \r\n     * @param x \r\n     * @param y \r\n     * @param arr \r\n     */\r\n    set_EdgeShape_data(shape: any, x: number, y: number, arr: number[], scaleX: number, scaleY: number) {\r\n        let len = arr.length;\r\n        var ps: any[] = [];\r\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\r\n            ps.push(this.createPhyFromLayaVec2((x + arr[i]) * scaleX, (y + arr[i + 1]) * scaleY));\r\n        }\r\n        shape.SetTwoSided(ps[0], ps[1])\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_PolygonShape() {\r\n        return new this.box2d.b2PolygonShape();\r\n    }\r\n\r\n    /** \r\n     * @param shape \r\n     * @param x \r\n     * @param y \r\n     * @param arr \r\n     */\r\n    set_PolygonShape_data(shape: any, x: number, y: number, arr: number[], scaleX: number, scaleY: number) {\r\n        let len = arr.length;\r\n        var ps: any[] = [];\r\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\r\n            ps.push(this.createPhyFromLayaVec2((x + arr[i]) * scaleX, (y + arr[i + 1]) * scaleY));\r\n        }\r\n        shape.Set(ps, len / 2);\r\n    }\r\n\r\n    /**\r\n     * create fixture descript\r\n     * @param fixtureDef \r\n     * @returns \r\n     */\r\n    createFixtureDef(fixtureDef: FixtureBox2DDef) {\r\n        var def: any = new this.box2d.b2FixtureDef();\r\n        def.density = fixtureDef.density;\r\n        def.friction = fixtureDef.friction;\r\n        def.isSensor = fixtureDef.isSensor;\r\n        def.restitution = fixtureDef.restitution;\r\n        switch (fixtureDef.shape) {\r\n            case PhysicsShape.BoxShape:\r\n                def.shape = this.create_boxColliderShape();\r\n                break;\r\n            case PhysicsShape.PolygonShape:\r\n                def.shape = this.create_PolygonShape();\r\n                break;\r\n            case PhysicsShape.ChainShape:\r\n                def.shape = this.create_ChainShape();\r\n                break;\r\n            case PhysicsShape.CircleShape:\r\n                def.shape = this.create_CircleShape();\r\n                break;\r\n            case PhysicsShape.EdgeShape:\r\n                def.shape = this.create_EdgeShape();\r\n                break;\r\n        }\r\n        def._shape = def.shape;\r\n        return def;\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @param groupIndex \r\n     */\r\n    set_fixtureDef_GroupIndex(def: any, groupIndex: number) {\r\n        def.filter.groupIndex = groupIndex;\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @param categoryBits \r\n     */\r\n    set_fixtureDef_CategoryBits(def: any, categoryBits: number) {\r\n        def.filter.categoryBits = categoryBits;\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @param maskbits \r\n     */\r\n    set_fixtureDef_maskBits(def: any, maskbits: number) {\r\n        def.filter.maskBits = maskbits;\r\n    }\r\n\r\n    /**\r\n     * create fixture by body and def\r\n     * @param body \r\n     * @param def \r\n     * @returns\r\n     */\r\n    createfixture(body: any, def: any) {\r\n        let data = body.CreateFixture(def);\r\n        data.world = this._world;\r\n        data.shape = data.GetShape();\r\n        data.filter = data.GetFilterData();\r\n        return data;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    resetFixtureData(fixture: any, fixtureDef: FixtureBox2DDef): void {\r\n        fixture.SetDensity(fixtureDef.density);\r\n        fixture.SetFriction(fixtureDef.friction);\r\n        fixture.SetSensor(fixtureDef.isSensor);\r\n        fixture.SetRestitution(fixtureDef.restitution);\r\n    }\r\n\r\n    /** \r\n     * @param fixture \r\n     * @param instance \r\n     */\r\n    set_fixture_collider(fixture: any, instance: ColliderBase) {\r\n        fixture.collider = instance;\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    get_fixture_body(fixture: any): any {\r\n        return fixture.GetBody()\r\n    }\r\n\r\n    //----------------RigidBody-------------------   \r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    rigidBody_DestroyFixture(body: any, fixture: any) {\r\n        body.DestroyFixture(fixture);\r\n    }\r\n\r\n    /** \r\n     * @param rigidbodyDef \r\n     * @returns\r\n     */\r\n    rigidBodyDef_Create(rigidbodyDef: RigidBody2DInfo): any {\r\n        var def: any = new this.box2d.b2BodyDef();\r\n        def.position.Set(this.layaToPhyValue(rigidbodyDef.position.x), this.layaToPhyValue(rigidbodyDef.position.y));\r\n        def.angle = rigidbodyDef.angle;\r\n        def.allowSleep = rigidbodyDef.allowSleep;\r\n        def.angularDamping = rigidbodyDef.angularDamping;\r\n        def.angularVelocity = rigidbodyDef.angularVelocity;\r\n        def.bullet = rigidbodyDef.bullet;\r\n        def.fixedRotation = rigidbodyDef.fixedRotation;\r\n        def.gravityScale = rigidbodyDef.gravityScale;\r\n        def.linearDamping = rigidbodyDef.linearDamping;\r\n        def.linearVelocity = new this.box2d.b2Vec2(this.layaToPhyValue(rigidbodyDef.linearVelocity.x), this.layaToPhyValue(rigidbodyDef.linearVelocity.y));\r\n        def.type = this.getbodyType(rigidbodyDef.type);\r\n        return this.createBody(def);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param v2 \r\n     */\r\n    get_RigidBody_Position(body: any, v2: Vector2) {\r\n        var pos: any = body.GetPosition();\r\n        v2.setValue(this.phyToLayaValue(pos.x), this.phyToLayaValue(pos.y));\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_RigidBody_Angle(body: any): number {\r\n        return body.GetAngle();\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param x \r\n     * @param y \r\n     * @param angle \r\n     */\r\n    set_RigibBody_Transform(body: any, x: number, y: number, angle: any) {\r\n        body.SetTransform(this.createPhyFromLayaVec2(x, y), angle);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param x \r\n     * @param y \r\n     */\r\n    get_rigidBody_WorldPoint(body: any, x: number, y: number): IV2 {\r\n        body.GetWorldPoint(this.createPhyFromLayaVec2(x, y), this._tempVec2)\r\n        let point: IV2 = { x: 0, y: 0 }\r\n        point.x = this.phyToLayaValue(this._tempVec2.x);\r\n        point.y = this.phyToLayaValue(this._tempVec2.y);\r\n        return point;\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param x \r\n     * @param y \r\n     * \r\n     * @returns\r\n     */\r\n    get_rigidBody_LocalPoint(body: any, x: number, y: number): IV2 {\r\n        body.GetLocalPoint(this.createPhyFromLayaVec2(x, y), this._tempVec2)\r\n        let point: IV2 = { x: 0, y: 0 }\r\n        point.x = this.phyToLayaValue(this._tempVec2.x);\r\n        point.y = this.phyToLayaValue(this._tempVec2.y);\r\n        return point;\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param force \r\n     * @param position \r\n     */\r\n    rigidBody_applyForce(body: any, force: IV2, position: IV2) {\r\n        position.x = this.layaToPhyValue(position.x);\r\n        position.y = this.layaToPhyValue(position.y);\r\n        body.ApplyForce(force, position);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param force \r\n     */\r\n    rigidBody_applyForceToCenter(body: any, force: IV2) {\r\n        body.ApplyForceToCenter(force);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param impulse \r\n     * @param position \r\n     */\r\n    rigidbody_ApplyLinearImpulse(body: any, impulse: IV2, position: IV2) {\r\n        body.ApplyLinearImpulse(impulse, position);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param impulse \r\n     */\r\n    rigidbody_ApplyLinearImpulseToCenter(body: any, impulse: IV2) {\r\n        body.ApplyLinearImpulseToCenter(impulse);\r\n    }\r\n\r\n    /**\r\n    * 对刚体施加扭矩，使其旋转\r\n    * @param\ttorque\t施加的扭矩\r\n    */\r\n    rigidbody_applyTorque(body: any, torque: number): void {\r\n        body.ApplyTorque(torque);\r\n    }\r\n\r\n    /**\r\n     * 设置速度，比如{x:10,y:10}\r\n     * @param\tvelocity\r\n     */\r\n    set_rigidbody_Velocity(body: any, velocity: IV2): void {\r\n        body.SetLinearVelocity(velocity);\r\n    }\r\n\r\n    /**\r\n     * 设置角度\r\n     * @param\tvalue 单位为弧度\r\n     */\r\n    set_rigidbody_Awake(body: any, awake: boolean): void {\r\n        body.SetAwake(awake);\r\n    }\r\n\r\n    /**\r\n     * 获得刚体质量\r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidbody_Mass(body: any): number {\r\n        return body.GetMass();\r\n    }\r\n\r\n    /**\r\n     * 获得质心的相对节点0,0点的位置偏移\r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_Center(body: any): IV2 {\r\n        let value = body.GetLocalCenter();\r\n        let point: IV2 = { x: 0, y: 0 }\r\n        point.x = this.phyToLayaValue(value.x);\r\n        point.y = this.phyToLayaValue(value.y);\r\n        return point;\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_IsAwake(body: any) {\r\n        return body.IsAwake();\r\n    }\r\n\r\n    /**\r\n     * 获得质心的世界坐标，相对于Physics.I.worldRoot节点\r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_WorldCenter(body: any): IV2 {\r\n        let value = body.GetWorldCenter();\r\n        let point: IV2 = { x: 0, y: 0 }\r\n        point.x = this.phyToLayaValue(value.x);\r\n        point.y = this.phyToLayaValue(value.y);\r\n        return point;\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_type(body: any, value: string) {\r\n        body.SetType(this.getbodyType(value));\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_gravityScale(body: any, value: number) {\r\n        body.SetGravityScale(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_allowRotation(body: any, value: boolean) {\r\n        body.SetFixedRotation(!value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_allowSleep(body: any, value: boolean) {\r\n        body.SetSleepingAllowed(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_angularDamping(body: any, value: number) {\r\n        body.SetAngularDamping(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     */\r\n    get_rigidBody_angularVelocity(body: any): number {\r\n        return body.GetAngularVelocity();\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_angularVelocity(body: any, value: number) {\r\n        body.SetAngularVelocity(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_linearDamping(body: any, value: number) {\r\n        body.SetLinearDamping(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_linearVelocity(body: any): IV2 {\r\n        return body.GetLinearVelocity();\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_linearVelocity(body: any, value: IV2) {\r\n        body.SetLinearVelocity(new this.box2d.b2Vec2(value.x, value.y));\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_bullet(body: any, value: boolean) {\r\n        body.SetBullet(value);\r\n    }\r\n\r\n    /**\r\n    * @param body \r\n    */\r\n    retSet_rigidBody_MassData(body: any) {\r\n        body.ResetMassData()\r\n    }\r\n\r\n    /**@internal */\r\n    getbodyType(type: string): any {\r\n        return this.box2d.b2BodyType[\"b2_\" + type + \"Body\"]\r\n    }\r\n\r\n\r\n\r\n\r\n    /**@internal */\r\n    PushTransform(xf: any): void {\r\n        this._debugDraw.PushTransform(xf.p.x, xf.p.y, xf.q.GetAngle());\r\n    }\r\n\r\n    /**@internal */\r\n    PopTransform(xf: any): void {\r\n        this._debugDraw.PopTransform()\r\n    }\r\n\r\n    /**@internal */\r\n    DrawPolygon(vertices: any, vertexCount: any, color: any): void {\r\n        var i: number, len: number;\r\n        len = vertices.length;\r\n        var points: any[];\r\n        points = [];\r\n        for (i = 0; i < vertexCount; i++) {\r\n            points.push(vertices[i].x, vertices[i].y);\r\n        }\r\n        this._debugDraw.mG.drawPoly(0, 0, points, null, color.MakeStyleString(1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawSolidPolygon(vertices: any, vertexCount: any, color: any): void {\r\n        var i: number, len: number;\r\n        len = vertices.length;\r\n        var points: any[];\r\n        points = [];\r\n        for (i = 0; i < vertexCount; i++) {\r\n            points.push(vertices[i].x, vertices[i].y);\r\n        }\r\n        this._debugDraw.mG.drawPoly(0, 0, points, color.MakeStyleString(0.5), color.MakeStyleString(1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawCircle(center: any, radius: any, color: any): void {\r\n        this._debugDraw.mG.drawCircle(center.x, center.y, radius, null, color.MakeStyleString(1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawSolidCircle(center: any, radius: any, axis: any, color: any): void {\r\n        var cx: any = center.x;\r\n        var cy: any = center.y;\r\n        this._debugDraw.mG.drawCircle(cx, cy, radius, color.MakeStyleString(0.5), color.MakeStyleString(1), this._debugDraw.lineWidth);\r\n        this._debugDraw.mG.drawLine(cx, cy, (cx + axis.x * radius), (cy + axis.y * radius), color.MakeStyleString(1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawParticles(centers: any, radius: any, colors: any, count: any): void {\r\n        if (colors !== null) {\r\n            for (var i: number = 0; i < count; ++i) {\r\n                var center: any = centers[i];\r\n                var color: any = colors[i];\r\n                this._debugDraw.mG.drawCircle(center.x, center.y, radius, color.MakeStyleString(), null, this._debugDraw.lineWidth);\r\n            }\r\n        } else {\r\n\r\n            for (i = 0; i < count; ++i) {\r\n                center = centers[i];\r\n                this._debugDraw.mG.drawCircle(center.x, center.y, radius, \"#ffff00\", null, this._debugDraw.lineWidth);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    DrawSegment(p1: any, p2: any, color: any): void {\r\n        this._debugDraw.mG.drawLine(p1.x, p1.y, p2.x, p2.y, color.MakeStyleString(1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawTransform(xf: any): void {\r\n        this._debugDraw.PushTransform(xf.p.x, xf.p.y, xf.q.GetAngle());\r\n        this._debugDraw.mG.drawLine(0, 0, 1, 0, this._debugDraw.Red, this._debugDraw.lineWidth);\r\n        this._debugDraw.mG.drawLine(0, 0, 0, 1, this._debugDraw.Green, this._debugDraw.lineWidth);\r\n        this._debugDraw.PopTransform();\r\n    }\r\n\r\n    /**@internal */\r\n    DrawPoint(p: any, size: any, color: any): void {\r\n        size *= this._debugDraw.camera.m_zoom;\r\n        size /= this._debugDraw.camera.m_extent;\r\n        var hsize: any = size / 2;\r\n\r\n        this._debugDraw.mG.drawRect(p.x - hsize, p.y - hsize, size, size, color.MakeStyleString(), null);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawString(x: any, y: any, message: any): void {\r\n        this._debugDraw.textG.fillText(message, x, y, \"15px DroidSans\", this._debugDraw.DrawString_color, \"left\");\r\n    }\r\n\r\n    /**@internal */\r\n    DrawStringWorld(x: any, y: any, message: any): void {\r\n        this.DrawString(x, y, message);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawAABB(aabb: any, color: any): void {\r\n        var x: number = aabb.lowerBound.x;\r\n        var y: number = aabb.lowerBound.y;\r\n        var w: number = aabb.upperBound.x - aabb.lowerBound.x;\r\n        var h: number = aabb.upperBound.y - aabb.lowerBound.y;\r\n        this._debugDraw.mG.drawRect(x, y, w, h, null, color.MakeStyleString(), this._debugDraw.lineWidth);\r\n    }\r\n}\r\n\r\n/**@internal */\r\nclass ContactListener {\r\n    BeginContact(contact: any): void {\r\n        Physics2D.I._eventList.push(0, contact);\r\n        //console.log(\"BeginContact\", contact);\t\r\n    }\r\n\r\n    EndContact(contact: any): void {\r\n        Physics2D.I._eventList.push(1, contact);\r\n        //console.log(\"EndContact\", contact);\r\n    }\r\n\r\n    PreSolve(contact: any, oldManifold: any): void {\r\n        //console.log(\"PreSolve\", contact);\r\n    }\r\n\r\n    PostSolve(contact: any, impulse: any): void {\r\n        //console.log(\"PostSolve\", contact);\r\n    }\r\n}\r\n\r\n\r\n/** \r\n * @internal \r\n * JS实现Box2D SayGoodbyeParticle\r\n * 相关类型对象被隐性移除时触发对应的SayGoodBye方法\r\n */\r\nclass DestructionListener {\r\n    /**\r\n     * Joint被隐性移除时触发\r\n     * @param params box2d的Joint相关对象\r\n     */\r\n    public SayGoodbyeJoint(params: any): void {\r\n        params.m_userData && (params.m_userData.isDestroy = true);\r\n    }\r\n    /**\r\n     * Fixtures被隐性移除时触发\r\n     * @param params box2d的Fixtures相关对象\r\n     */\r\n    public SayGoodbyeFixture(params: any): void {\r\n\r\n    }\r\n    /**\r\n     * ParticleGroup被隐性移除时触发\r\n     * @param params box2d的ParticleGroup相关对象\r\n     */\r\n    public SayGoodbyeParticleGroup(params: any): void {\r\n\r\n    }\r\n    /**\r\n     * Particle被隐性移除时触发\r\n     * @param params box2d的Particle相关对象\r\n     */\r\n    public SayGoodbyeParticle(params: any): void {\r\n\r\n    }\r\n}\r\n\r\nPhysics2D.I._factory = new physics2DJSFactory();"],"mappings":"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"}