import { Bone } from "./Bone";
import { AnimationTemplet } from "../AnimationTemplet";
import { SkinSlotDisplayData } from "./SkinSlotDisplayData";
import { Texture } from "../../resource/Texture";
import { Matrix } from "../../maths/Matrix";
import { Graphics } from "../../display/Graphics";
import { Skeleton } from "./Skeleton";
export declare class Templet extends AnimationTemplet {
    rate: number;
    srcBoneMatrixArr: any[];
    ikArr: any[];
    tfArr: any[];
    pathArr: any[];
    boneSlotDic: any;
    bindBoneBoneSlotDic: any;
    boneSlotArray: any[];
    skinDataArray: any[];
    skinDic: any;
    subTextureDic: Record<string, Texture>;
    isParseFail: boolean;
    yReverseMatrix: Matrix;
    drawOrderAniArr: any[];
    eventAniArr: any[];
    attachmentNames: any[];
    deformAniArr: any[];
    skinSlotDisplayDataArr: SkinSlotDisplayData[];
    aniSectionDic: any;
    tMatrixDataLen: number;
    mRootBone: Bone;
    mBoneArr: Bone[];
    buildArmature(aniMode?: number): Skeleton;
    _parse(texture: Texture, createURL: string, skeletonData: ArrayBuffer): void;
    getTexture(name: string): Texture;
    showSkinByIndex(boneSlotDic: any, skinIndex: number, freshDisplayIndex?: boolean): boolean;
    getSkinIndexByName(skinName: string): number;
    getGrahicsDataWithCache(aniIndex: number, frameIndex: number): Graphics;
    setGrahicsDataWithCache(aniIndex: number, frameIndex: number, graphics: Graphics): void;
    deleteAniData(aniIndex: number): void;
    protected _disposeResource(): void;
    getAniNameByIndex(index: number): string;
}
