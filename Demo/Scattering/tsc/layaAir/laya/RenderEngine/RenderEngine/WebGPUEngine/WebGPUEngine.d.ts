import { WGPUShaderData } from "../../../d3/RenderObjs/WebGPUOBJ/WGPUShaderData";
import { CommandEncoder } from "../../../layagl/CommandEncoder";
import { Color } from "../../../maths/Color";
import { BaseTexture } from "../../../resource/BaseTexture";
import { BufferTargetType, BufferUsage } from "../../RenderEnum/BufferTargetType";
import { RenderCapable } from "../../RenderEnum/RenderCapable";
import { RenderParams } from "../../RenderEnum/RenderParams";
import { RenderStatisticsInfo } from "../../RenderEnum/RenderStatInfo";
import { IRender2DContext } from "../../RenderInterface/IRender2DContext";
import { IRenderDrawContext } from "../../RenderInterface/IRenderDrawContext";
import { IRenderEngine } from "../../RenderInterface/IRenderEngine";
import { IRenderOBJCreate } from "../../RenderInterface/IRenderOBJCreate";
import { IRenderShaderInstance } from "../../RenderInterface/IRenderShaderInstance";
import { IRenderVertexState } from "../../RenderInterface/IRenderVertexState";
import { ShaderDataType } from "../../RenderShader/ShaderData";
import { RenderStateCommand } from "../../RenderStateCommand";
import { WebGPUBuffer } from "./WebGPUBuffer";
import { WebGPUConfig } from "./WebGPUConfig";
import { WebGPURenderPassDescriptor } from "./WebGPURenderPassDescriptor";
import { WebGPUInternalRT } from "./WebGPUInternalRT";
import { WebGPUInternalTex } from "./WebGPUInternalTex";
import { WebGPUSamplerContext } from "./WebGPUSamplerContext";
import { WebGPUTextureContext } from "./WebGPUTextureContext";
export declare class WebGPUEngine implements IRenderEngine {
    _canvas: HTMLCanvasElement;
    _context: GPUCanvasContext;
    _isShaderDebugMode: boolean;
    _renderOBJCreateContext: IRenderOBJCreate;
    private _lastViewport;
    private _lastScissor;
    private _enableScissor;
    private _GLStatisticsInfo;
    private _adapter;
    private _adapterSupportedExtensions;
    _device: GPUDevice;
    private _deviceEnabledExtensions;
    _config: WebGPUConfig;
    _deferredDestroyBuffers: WebGPUBuffer[];
    _deferredDestroyTextures: WebGPUInternalTex[];
    _samplerContext: WebGPUSamplerContext;
    _webGPUTextureContext: WebGPUTextureContext;
    _cavansRT: WebGPUInternalRT;
    constructor(config: WebGPUConfig, canvas: any);
    private _getAdapter;
    _initAdapter(adapter: GPUAdapter): void;
    private _getGPUdevice;
    private _initGPUDevice;
    private _uncapturederrorCall;
    private _deviceLostCall;
    _initAsync(): Promise<void>;
    private _initContext;
    initRenderEngine(): Promise<void>;
    applyRenderStateCMD(cmd: RenderStateCommand): void;
    viewport(x: number, y: number, width: number, height: number): void;
    scissor(x: number, y: number, width: number, height: number): void;
    scissorTest(value: boolean): void;
    clearRenderTexture(clearFlag: number, clearcolor: Color, clearDepth: number): void;
    colorMask(r: boolean, g: boolean, b: boolean, a: boolean): void;
    copySubFrameBuffertoTex(texture: BaseTexture, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;
    bindTexture(texture: BaseTexture): void;
    propertyNameToID(name: string): number;
    propertyIDToName(id: number): string;
    getParams(params: RenderParams): number;
    getCapable(capatableType: RenderCapable): boolean;
    getTextureContext(): WebGPUTextureContext;
    getDrawContext(): IRenderDrawContext;
    get2DRenderContext(): IRender2DContext;
    getCreateRenderOBJContext(): IRenderOBJCreate;
    uploadUniforms(shader: IRenderShaderInstance, commandEncoder: CommandEncoder, shaderData: WGPUShaderData, uploadUnTexture: boolean): number;
    uploadCustomUniforms(shader: IRenderShaderInstance, custom: any[], index: number, data: any): number;
    createRenderStateComand(): RenderStateCommand;
    createShaderInstance(vs: string, ps: string, attributeMap: {
        [name: string]: [number, ShaderDataType];
    }): IRenderShaderInstance;
    createBuffer(targetType: BufferTargetType, bufferUsageType: BufferUsage): WebGPUBuffer;
    createVertexState(): IRenderVertexState;
    getUBOPointer(name: string): number;
    clearStatisticsInfo(info: RenderStatisticsInfo): void;
    getStatisticsInfo(info: RenderStatisticsInfo): number;
    unbindVertexState(): void;
    getCurCommandEncoder(): GPUCommandEncoder;
    private _destroyDeferredBuffer;
    private _destroyDefferedTexture;
    resizeCavansRT(): void;
    setRenderPassDescriptor(rt: WebGPUInternalRT, renderPassDec: WebGPURenderPassDescriptor): void;
    createUniformBuffer(bufferSize: number): WebGPUBuffer;
    endframe(): void;
}
