import { FilterMode } from "../../RenderEnum/FilterMode";
import { TextureCompareMode } from "../../RenderEnum/TextureCompareMode";
import { TextureDimension } from "../../RenderEnum/TextureDimension";
import { WrapMode } from "../../RenderEnum/WrapMode";
import { InternalTexture } from "../../RenderInterface/InternalTexture";
import { WebGPUEngine } from "./WebGPUEngine";
import { WebGPUObject } from "./WebGPUObject";
import { WebGPUSamplerParams } from "./WebGPUSamplerContext";
import { GPUTextureFormat } from "./WebGPUTextureContext";
export declare class WebGPUInternalTex extends WebGPUObject implements InternalTexture {
    resource: GPUTexture;
    target: number;
    width: number;
    height: number;
    mipmap: boolean;
    mipmapCount: number;
    webGPUFormat: GPUTextureFormat;
    view: GPUTextureView;
    descriptor: GPUTextureDescriptor;
    webgpuSampler: GPUSampler;
    webGPUSamplerParams: WebGPUSamplerParams;
    isPotSize: boolean;
    baseMipmapLevel: number;
    maxMipmapLevel: number;
    gpuMemory: number;
    useSRGBLoad: boolean;
    gammaCorrection: number;
    _cacheBindGroup: GPUBindGroup;
    _cacheSampler: GPUSampler;
    constructor(engine: WebGPUEngine, width: number, height: number, dimension: TextureDimension, mipmap: boolean);
    get textureView(): GPUTextureView;
    releaseTexture(texture: InternalTexture | GPUTexture): void;
    private _filterMode;
    get filterMode(): FilterMode;
    set filterMode(value: FilterMode);
    private _warpU;
    get wrapU(): WrapMode;
    set wrapU(value: WrapMode);
    private _warpV;
    get wrapV(): WrapMode;
    set wrapV(value: WrapMode);
    private _warpW;
    get wrapW(): WrapMode;
    set wrapW(value: WrapMode);
    private _anisoLevel;
    get anisoLevel(): number;
    set anisoLevel(value: number);
    private _compareMode;
    get compareMode(): TextureCompareMode;
    set compareMode(value: TextureCompareMode);
    dispose(): void;
    disposDerredDispose(): void;
}
