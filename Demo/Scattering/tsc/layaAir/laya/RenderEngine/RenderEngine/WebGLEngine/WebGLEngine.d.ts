import { Color } from "../../../maths/Color";
import { BaseTexture } from "../../../resource/BaseTexture";
import { BufferTargetType, BufferUsage } from "../../RenderEnum/BufferTargetType";
import { RenderCapable } from "../../RenderEnum/RenderCapable";
import { RenderClearFlag } from "../../RenderEnum/RenderClearFlag";
import { RenderParams } from "../../RenderEnum/RenderParams";
import { IRender2DContext } from "../../RenderInterface/IRender2DContext";
import { IRenderBuffer } from "../../RenderInterface/IRenderBuffer";
import { IRenderDrawContext } from "../../RenderInterface/IRenderDrawContext";
import { IRenderEngine } from "../../RenderInterface/IRenderEngine";
import { IRenderOBJCreate } from "../../RenderInterface/IRenderOBJCreate";
import { IRenderShaderInstance } from "../../RenderInterface/IRenderShaderInstance";
import { IRenderVertexState } from "../../RenderInterface/IRenderVertexState";
import { ITextureContext } from "../../RenderInterface/ITextureContext";
import { ShaderDataType } from "../../RenderShader/ShaderData";
import { RenderStateCommand } from "../../RenderStateCommand";
import { GLBuffer } from "./GLBuffer";
import { WebGLMode } from "./GLEnum/WebGLMode";
import { GLRenderState } from "./GLRenderState";
import { WebGlConfig } from "./WebGLConfig";
export declare class WebGLEngine implements IRenderEngine {
    _context: WebGLRenderingContext | WebGL2RenderingContext;
    private _config;
    private _isWebGL2;
    private _webglMode;
    private _GLBufferBindMap;
    private _curUBOPointer;
    private _GLUBOPointerMap;
    private _GLBindPointerUBOMap;
    private _lastViewport;
    private _lastScissor;
    private _lastClearColor;
    private _lastClearDepth;
    private _GLParams;
    private _GLTextureContext;
    private _GLRenderDrawContext;
    private _GL2DRenderContext;
    _GLRenderState: GLRenderState;
    private _GLStatisticsInfo;
    constructor(config: WebGlConfig, webglMode?: WebGLMode);
    get gl(): WebGLRenderingContext | WebGL2RenderingContext;
    get isWebGL2(): boolean;
    get webglConfig(): WebGlConfig;
    private _initStatisticsInfo;
    initRenderEngine(canvas: any): void;
    private _initBindBufferMap;
    _getbindBuffer(target: BufferTargetType): GLBuffer;
    _setbindBuffer(target: BufferTargetType, buffer: GLBuffer | null): void;
    bindTexture(texture: BaseTexture): void;
    applyRenderStateCMD(cmd: RenderStateCommand): void;
    getCapable(capatableType: RenderCapable): boolean;
    viewport(x: number, y: number, width: number, height: number): void;
    scissor(x: number, y: number, width: number, height: number): void;
    scissorTest(value: boolean): void;
    clearRenderTexture(clearFlag: RenderClearFlag, clearcolor?: Color, clearDepth?: number): void;
    copySubFrameBuffertoTex(texture: BaseTexture, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;
    colorMask(r: boolean, g: boolean, b: boolean, a: boolean): void;
    getParams(params: RenderParams): number;
    createBuffer(targetType: BufferTargetType, bufferUsageType: BufferUsage): IRenderBuffer;
    createShaderInstance(vs: string, ps: string, attributeMap: {
        [name: string]: [number, ShaderDataType];
    }): IRenderShaderInstance;
    createVertexState(): IRenderVertexState;
    getUBOPointer(name: string): number;
    getTextureContext(): ITextureContext;
    getDrawContext(): IRenderDrawContext;
    get2DRenderContext(): IRender2DContext;
    getCreateRenderOBJContext(): IRenderOBJCreate;
    propertyNameToID(name: string): number;
    propertyIDToName(id: number): string;
    createRenderStateComand(): RenderStateCommand;
    unbindVertexState(): void;
}
