import { FilterMode } from "../../RenderEnum/FilterMode";
import { TextureCompareMode } from "../../RenderEnum/TextureCompareMode";
import { TextureDimension } from "../../RenderEnum/TextureDimension";
import { WrapMode } from "../../RenderEnum/WrapMode";
import { InternalTexture } from "../../RenderInterface/InternalTexture";
import { GLObject } from "./GLObject";
import { WebGLEngine } from "./WebGLEngine";
export declare class WebGLInternalTex extends GLObject implements InternalTexture {
    _gl: WebGLRenderingContext | WebGL2RenderingContext;
    readonly resource: WebGLTexture;
    _resourceTarget: number;
    readonly width: number;
    readonly height: number;
    readonly isPotSize: boolean;
    private _mipmap;
    get mipmap(): boolean;
    private _mipmapCount;
    get mipmapCount(): number;
    readonly useSRGBLoad: boolean;
    readonly gammaCorrection: number;
    readonly target: number;
    internalFormat: number;
    format: number;
    type: number;
    _gpuMemory: number;
    get gpuMemory(): number;
    set gpuMemory(value: number);
    constructor(engine: WebGLEngine, target: number, width: number, height: number, dimension: TextureDimension, mipmap: boolean, useSRGBLoader: boolean, gammaCorrection: number);
    private _filterMode;
    get filterMode(): FilterMode;
    set filterMode(value: FilterMode);
    private _warpU;
    get wrapU(): WrapMode;
    set wrapU(value: WrapMode);
    private _warpV;
    get wrapV(): WrapMode;
    set wrapV(value: WrapMode);
    private _warpW;
    get wrapW(): WrapMode;
    set wrapW(value: WrapMode);
    private _anisoLevel;
    get anisoLevel(): number;
    set anisoLevel(value: number);
    private _baseMipmapLevel;
    set baseMipmapLevel(value: number);
    get baseMipmapLevel(): number;
    private _maxMipmapLevel;
    set maxMipmapLevel(value: number);
    get maxMipmapLevel(): number;
    private _compareMode;
    get compareMode(): TextureCompareMode;
    set compareMode(value: TextureCompareMode);
    _setTexParameteri(pname: number, param: number): void;
    _setTexParametexf(pname: number, param: number): void;
    protected getFilteMinrParam(filterMode: FilterMode, mipmap: boolean): number;
    protected getFilterMagParam(filterMode: FilterMode): number;
    protected getWrapParam(wrapMode: WrapMode): number;
    protected _setWrapMode(pname: number, param: number): void;
    dispose(): void;
}
