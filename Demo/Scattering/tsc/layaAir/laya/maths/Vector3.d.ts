import { Vector4 } from "./Vector4";
import { Matrix4x4 } from "./Matrix4x4";
import { IClone } from "../utils/IClone";
import { Quaternion } from "./Quaternion";
export declare class Vector3 implements IClone {
    static readonly ZERO: Readonly<Vector3>;
    static readonly ONE: Readonly<Vector3>;
    static readonly NegativeUnitX: Readonly<Vector3>;
    static readonly UnitX: Readonly<Vector3>;
    static readonly UnitY: Readonly<Vector3>;
    static readonly UnitZ: Readonly<Vector3>;
    static readonly ForwardRH: Readonly<Vector3>;
    static readonly ForwardLH: Readonly<Vector3>;
    static readonly Up: Readonly<Vector3>;
    static distanceSquared(value1: Vector3, value2: Vector3): number;
    static distance(value1: Vector3, value2: Vector3): number;
    static min(a: Vector3, b: Vector3, out: Vector3): void;
    static max(a: Vector3, b: Vector3, out: Vector3): void;
    static transformQuat(source: Vector3, rotation: Quaternion, out: Vector3): void;
    static scalarLength(a: Vector3): number;
    static scalarLengthSquared(a: Vector3): number;
    static normalize(s: Vector3, out: Vector3): void;
    static multiply(a: Vector3, b: Vector3, out: Vector3): void;
    static scale(a: Vector3, b: number, out: Vector3): void;
    static lerp(a: Vector3, b: Vector3, t: number, out: Vector3): void;
    static transformV3ToV3(vector: Vector3, transform: Matrix4x4, result: Vector3): void;
    static transformV3ToV4(vector: Vector3, transform: Matrix4x4, result: Vector4): void;
    static TransformNormal(normal: Vector3, transform: Matrix4x4, result: Vector3): void;
    static transformCoordinate(coordinate: Vector3, transform: Matrix4x4, result: Vector3): void;
    static Clamp(value: Vector3, min: Vector3, max: Vector3, out: Vector3): void;
    static add(a: Vector3, b: Vector3, out: Vector3): void;
    static subtract(a: Vector3, b: Vector3, o: Vector3): void;
    static cross(a: Vector3, b: Vector3, o: Vector3): void;
    static dot(a: Vector3, b: Vector3): number;
    static equals(a: Vector3, b: Vector3): boolean;
    x: number;
    y: number;
    z: number;
    constructor(x?: number, y?: number, z?: number);
    equal(value: Vector3): boolean;
    setValue(x: number, y: number, z: number): Vector3;
    set(x: number, y: number, z: number): this;
    fromArray(arr: ArrayLike<number>, offset?: number): void;
    toArray(): Array<number>;
    writeTo(arr: Float32Array, offset?: number): void;
    length(): number;
    lengthSquared(): number;
    vsub(b: Vector3, out: Vector3): Vector3;
    vadd(b: Vector3, out: Vector3): Vector3;
    scale(s: number, out: Vector3): Vector3;
    normalize(): this;
    dot(b: Vector3): number;
    cross(b: Vector3, o: Vector3): Vector3;
    cloneTo(destObject: any): void;
    clone(): any;
    toDefault(): void;
}
