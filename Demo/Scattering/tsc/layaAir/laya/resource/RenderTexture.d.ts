import { RenderTargetFormat } from "../RenderEngine/RenderEnum/RenderTargetFormat";
import { InternalRenderTarget } from "../RenderEngine/RenderInterface/InternalRenderTarget";
import { IRenderTarget } from "../RenderEngine/RenderInterface/IRenderTarget";
import { BaseTexture } from "./BaseTexture";
export declare class RenderTexture extends BaseTexture implements IRenderTarget {
    protected static _currentActive: RenderTexture;
    static get currentActive(): RenderTexture;
    protected static _configInstance: any;
    static configRenderContextInstance(value: any): void;
    private static _pool;
    private static _poolMemory;
    static createFromPool(width: number, height: number, colorFormat: RenderTargetFormat, depthFormat: RenderTargetFormat, mipmap?: boolean, multiSamples?: number, depthTexture?: boolean, sRGB?: boolean): RenderTexture;
    static recoverToPool(rt: RenderTexture): void;
    static clearPool(): void;
    static get bindCanvasRender(): RenderTexture;
    static set bindCanvasRender(value: RenderTexture);
    _inPool: boolean;
    _isCameraTarget: boolean;
    _renderTarget: InternalRenderTarget;
    private _generateDepthTexture;
    get generateDepthTexture(): boolean;
    set generateDepthTexture(value: boolean);
    private _depthStencilTexture;
    get depthStencilTexture(): BaseTexture;
    _generateMipmap: boolean;
    get colorFormat(): RenderTargetFormat;
    protected _depthStencilFormat: RenderTargetFormat;
    get depthStencilFormat(): RenderTargetFormat;
    protected _multiSamples: number;
    get multiSamples(): number;
    get isCube(): boolean;
    get samples(): number;
    get generateMipmap(): boolean;
    constructor(width: number, height: number, colorFormat: RenderTargetFormat, depthFormat: RenderTargetFormat, generateMipmap?: boolean, multiSamples?: number, generateDepthTexture?: boolean, sRGB?: boolean);
    _createRenderTarget(): void;
    _start(): void;
    _end(): void;
    getData(xOffset: number, yOffset: number, width: number, height: number, out: Uint8Array | Float32Array): Uint8Array | Float32Array;
    protected _disposeResource(): void;
}
