import { Sprite } from "./Sprite";
import { Node } from "./Node";
import { Matrix } from "../maths/Matrix";
import { Point } from "../maths/Point";
import { Context } from "../resource/Context";
export declare class Stage extends Sprite {
    static SCALE_NOSCALE: string;
    static SCALE_EXACTFIT: string;
    static SCALE_SHOWALL: string;
    static SCALE_NOBORDER: string;
    static SCALE_FULL: string;
    static SCALE_FIXED_WIDTH: string;
    static SCALE_FIXED_HEIGHT: string;
    static SCALE_FIXED_AUTO: string;
    static SCALE_FIXED_AUTO_LAYAME: string;
    static SCALE_FIXED_AUTO_LAYAVERSE: string;
    static ALIGN_LEFT: string;
    static ALIGN_RIGHT: string;
    static ALIGN_CENTER: string;
    static ALIGN_TOP: string;
    static ALIGN_MIDDLE: string;
    static ALIGN_BOTTOM: string;
    static SCREEN_NONE: string;
    static SCREEN_HORIZONTAL: string;
    static SCREEN_VERTICAL: string;
    static FRAME_FAST: string;
    static FRAME_SLOW: string;
    static FRAME_MOUSE: string;
    static FRAME_SLEEP: string;
    focus: Node;
    offset: Point;
    private _frameRate;
    designWidth: number;
    designHeight: number;
    canvasRotation: boolean;
    canvasDegree: number;
    renderingEnabled: boolean;
    screenAdaptationEnabled: boolean;
    private _screenMode;
    private _scaleMode;
    private _alignV;
    private _alignH;
    private _bgColor;
    private _renderCount;
    private _safariOffsetY;
    private _frameStartTime;
    private _previousOrientation;
    private _isFocused;
    private _isVisibility;
    private _globalRepaintSet;
    private _globalRepaintGet;
    useRetinalCanvas: boolean;
    constructor();
    private _isInputting;
    set_width(value: number): void;
    get_width(): number;
    set_height(value: number): void;
    get_height(): number;
    set transform(value: Matrix);
    get transform(): Matrix;
    get isFocused(): boolean;
    get isVisibility(): boolean;
    private _needUpdateCanvasSize;
    updateCanvasSize(delay?: boolean): void;
    needUpdateCanvasSize(): void;
    setScreenSize(screenWidth: number, screenHeight: number): void;
    setScreenSizeForScene(screenWidth: number, screenHeight: number, _screenMode: string): {
        stageWidth: number;
        stageHeight: number;
        canvasWidth: number;
        canvasHeight: number;
        scaleX: number;
        scaleY: number;
    };
    private _formatData;
    get scaleMode(): string;
    set scaleMode(value: string);
    get alignH(): string;
    set alignH(value: string);
    get alignV(): string;
    set alignV(value: string);
    get bgColor(): string;
    set bgColor(value: string);
    get mouseX(): number;
    get mouseY(): number;
    getMousePoint(): Point;
    get clientScaleX(): number;
    get clientScaleY(): number;
    get screenMode(): string;
    set screenMode(value: string);
    repaint(type?: number): void;
    parentRepaint(type?: number): void;
    getFrameTm(): number;
    getTimeFromFrameStart(): number;
    set visible(value: boolean);
    get visible(): boolean;
    static clear: Function;
    render(context: Context, x: number, y: number): void;
    renderToNative(context: Context, x: number, y: number): void;
    private _runComponents;
    private _updateTimers;
    set fullScreenEnabled(value: boolean);
    get frameRate(): string;
    set frameRate(value: string);
    private _requestFullscreen;
    private _fullScreenChanged;
    exitFullscreen(): void;
    isGlobalRepaint(): boolean;
    setGlobalRepaint(): void;
}
