import { Component } from "../components/Component";
import { EventDispatcher } from "../events/EventDispatcher";
import { Timer } from "../utils/Timer";
export declare class Node extends EventDispatcher {
    private _bits;
    private _hideFlags;
    _url?: string;
    _extra?: INodeExtra;
    name: string;
    tag?: string;
    get url(): string;
    set url(path: string);
    get hideFlags(): number;
    set hideFlags(value: number);
    get is3D(): boolean;
    get destroyed(): boolean;
    constructor();
    protected onStartListeningToType(type: string): void;
    bubbleEvent(type: string, data?: any): void;
    hasHideFlag(flag: number): boolean;
    destroy(destroyChild?: boolean): void;
    onDestroy(): void;
    destroyChildren(): void;
    addChild<T extends Node>(node: T): T;
    addChildren(...args: any[]): void;
    addChildAt(node: Node, index: number): Node;
    getChildIndex(node: Node): number;
    getChildByName(name: string): Node;
    getChildAt(index: number): Node;
    setChildIndex(node: Node, index: number): Node;
    protected _childChanged(child?: Node): void;
    removeChild(node: Node): Node;
    removeSelf(): Node;
    removeChildByName(name: string): Node;
    removeChildAt(index: number): Node;
    removeChildren(beginIndex?: number, endIndex?: number): Node;
    replaceChild(newNode: Node, oldNode: Node): Node;
    get numChildren(): number;
    get parent(): Node;
    isAncestorOf(node: Node): boolean;
    protected _setParent(value: Node): void;
    get displayedInStage(): boolean;
    private _updateDisplayedInstage;
    private _displayChild;
    contains(node: Node): boolean;
    timerLoop(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean, jumpFrame?: boolean): void;
    timerOnce(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;
    frameLoop(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;
    frameOnce(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;
    clearTimer(caller: any, method: Function): void;
    callLater(method: Function, args?: any[]): void;
    runCallLater(method: Function): void;
    protected _components: Component[];
    private _activeChangeScripts;
    _scene: Node;
    get scene(): any;
    get active(): boolean;
    set active(value: boolean);
    get activeInHierarchy(): boolean;
    protected _onActive(): void;
    protected _onInActive(): void;
    protected _onActiveInScene(): void;
    protected _onInActiveInScene(): void;
    onAwake(): void;
    onEnable(): void;
    onDisable(): void;
    _processActive(active: boolean, fromSetter?: boolean): void;
    protected _onAdded(): void;
    protected _onRemoved(): void;
    protected _componentsChanged?(comp: Component, action: 0 | 1 | 2): void;
    addComponentInstance(component: Component): Component;
    addComponent<T extends Component>(componentType: new () => T): T;
    getComponent<T extends Component>(componentType: new () => T): T;
    get components(): ReadonlyArray<Component>;
    getComponents(componentType: typeof Component): Component[];
    get timer(): Timer;
    onAfterDeserialize(): void;
}
export interface INodeExtra {
}
