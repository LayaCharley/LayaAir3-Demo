import { Sprite } from "./Sprite";
import { BitmapFont } from "./BitmapFont";
import { TextStyle } from "./css/TextStyle";
import { Point } from "../maths/Point";
import { Rectangle } from "../maths/Rectangle";
import { WordText } from "../utils/WordText";
import { DrawRectCmd } from "./cmd/DrawRectCmd";
import { HtmlElement } from "../html/HtmlElement";
import { IHtmlObject } from "../html/IHtmlObject";
import { HtmlParseOptions } from "../html/HtmlParseOptions";
export declare class Text extends Sprite {
    static VISIBLE: string;
    static SCROLL: string;
    static HIDDEN: string;
    static SHRINK: string;
    static ELLIPSIS: string;
    static langPacks: Record<string, string>;
    static RightToLeft: boolean;
    static _passwordChar: string;
    private static _bitmapFonts;
    ignoreLang: boolean;
    protected _text: string;
    protected _overflow: string;
    protected _singleCharRender: boolean;
    protected _textStyle: TextStyle;
    protected _prompt: string;
    protected _promptColor: string;
    protected _bgColor: string;
    protected _borderColor: string;
    protected _padding: number[];
    protected _wordWrap: boolean;
    protected _asPassword: boolean;
    protected _htmlParseOptions: HtmlParseOptions;
    protected _templateVars: Record<string, string>;
    protected _isChanged: boolean;
    protected _textWidth: number;
    protected _textHeight: number;
    protected _realFont: string;
    protected _bitmapFont: BitmapFont;
    protected _scrollPos: Point | null;
    protected _bgDrawCmd: DrawRectCmd;
    protected _html: boolean;
    protected _ubb: boolean;
    protected _lines: Array<ITextLine>;
    protected _elements: Array<HtmlElement>;
    protected _objContainer: Sprite;
    protected _maxWidth: number;
    protected _hideText: boolean;
    private _updatingLayout;
    private _fontSizeScale;
    _parseEscapeChars: boolean;
    _onPostLayout: () => void;
    constructor();
    static registerBitmapFont(name: string, bitmapFont: BitmapFont): void;
    static unregisterBitmapFont(name: string, destroy?: boolean): void;
    destroy(destroyChild?: boolean): void;
    getGraphicBounds(realSize?: boolean): Rectangle;
    get_width(): number;
    _setWidth(value: number): void;
    get_height(): number;
    _setHeight(value: number): void;
    get textWidth(): number;
    get textHeight(): number;
    get text(): string;
    set text(value: string);
    changeText(text: string): void;
    get font(): string;
    set font(value: string);
    get fontSize(): number;
    set fontSize(value: number);
    get color(): string;
    set color(value: string);
    set_color(value: string): void;
    get bold(): boolean;
    set bold(value: boolean);
    get italic(): boolean;
    set italic(value: boolean);
    get align(): string;
    set align(value: string);
    get valign(): string;
    set valign(value: string);
    get wordWrap(): boolean;
    set wordWrap(value: boolean);
    get leading(): number;
    set leading(value: number);
    get padding(): number[];
    set padding(value: number[] | string);
    get bgColor(): string;
    set bgColor(value: string);
    get borderColor(): string;
    set borderColor(value: string);
    get stroke(): number;
    set stroke(value: number);
    get strokeColor(): string;
    set strokeColor(value: string);
    get overflow(): string;
    set overflow(value: string);
    get underline(): boolean;
    set underline(value: boolean);
    get underlineColor(): string;
    set underlineColor(value: string);
    get singleCharRender(): boolean;
    set singleCharRender(value: boolean);
    get html(): boolean;
    set html(value: boolean);
    get ubb(): boolean;
    set ubb(value: boolean);
    get maxWidth(): number;
    set maxWidth(value: number);
    get htmlParseOptions(): HtmlParseOptions;
    set htmlParseOptions(value: HtmlParseOptions);
    protected parseTemplate(template: string): string;
    get templateVars(): Record<string, any>;
    set templateVars(value: Record<string, any> | boolean);
    setVar(name: string, value: any): Text;
    set scrollX(value: number);
    get scrollX(): number;
    set scrollY(value: number);
    get scrollY(): number;
    get maxScrollX(): number;
    get maxScrollY(): number;
    get lines(): ReadonlyArray<ITextLine>;
    protected markChanged(): void;
    typeset(): void;
    refreshLayout(): void;
    get objContainer(): Sprite;
    protected _typeset(): void;
    protected doLayout(): void;
    protected renderText(): void;
    protected drawBg(): void;
}
export interface ITextCmd {
    x: number;
    y: number;
    width: number;
    height: number;
    style: TextStyle;
    wt: WordText;
    obj: IHtmlObject;
    linkEnd: boolean;
    next: ITextCmd;
}
export interface ITextLine {
    x: number;
    y: number;
    height: number;
    width: number;
    cmd: ITextCmd;
}
