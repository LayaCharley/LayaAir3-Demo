import { Matrix } from "../maths/Matrix";
import { Point } from "../maths/Point";
import { Rectangle } from "../maths/Rectangle";
import { Context } from "../resource/Context";
import { HTMLCanvas } from "../resource/HTMLCanvas";
import { Texture } from "../resource/Texture";
import { Texture2D } from "../resource/Texture2D";
import { Handler } from "../utils/Handler";
import { SpriteStyle } from "./css/SpriteStyle";
import { Graphics } from "./Graphics";
import { Node } from "./Node";
import { Stage } from "./Stage";
import { RenderTexture2D } from "../resource/RenderTexture2D";
import { Scene } from "./Scene";
import { IHitArea } from "../utils/IHitArea";
export declare class Sprite extends Node {
    _ownGraphics: boolean;
    mouseThrough: boolean;
    autoSize: boolean;
    hitTestPrior: boolean;
    _skinBaseUrl: string;
    destroy(destroyChild?: boolean): void;
    constructor();
    get scene(): Scene;
    updateZOrder(): void;
    set customRenderEnable(b: boolean);
    get cacheAs(): string;
    set cacheAs(value: string);
    private _checkCanvasEnable;
    get staticCache(): boolean;
    set staticCache(value: boolean);
    reCache(): void;
    getRepaint(): number;
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get width(): number;
    set width(value: number);
    set_width(value: number): void;
    get_width(): number;
    get height(): number;
    set height(value: number);
    set_height(value: number): void;
    get_height(): number;
    get _isWidthSet(): boolean;
    get _isHeightSet(): boolean;
    protected _shouldRefreshLayout(): void;
    get displayWidth(): number;
    get displayHeight(): number;
    setSelfBounds(bound: Rectangle): void;
    getBounds(): Rectangle;
    getSelfBounds(): Rectangle;
    getGraphicBounds(realSize?: boolean): Rectangle;
    getStyle(): SpriteStyle;
    setStyle(value: SpriteStyle): void;
    get scaleX(): number;
    set scaleX(value: number);
    get scaleY(): number;
    set scaleY(value: number);
    set_scaleX(value: number): void;
    get_scaleX(): number;
    set_scaleY(value: number): void;
    get_scaleY(): number;
    get rotation(): number;
    set rotation(value: number);
    get skewX(): number;
    set skewX(value: number);
    get skewY(): number;
    set skewY(value: number);
    protected _adjustTransform(): Matrix;
    get transform(): Matrix;
    set transform(value: Matrix);
    get_transform(): Matrix;
    set_transform(value: Matrix): void;
    get pivotX(): number;
    set pivotX(value: number);
    get pivotY(): number;
    set pivotY(value: number);
    get anchorX(): number;
    get_anchorX(): number;
    set anchorX(value: number);
    set_anchorX(value: number): void;
    get anchorY(): number;
    get_anchorY(): number;
    set anchorY(value: number);
    set_anchorY(value: number): void;
    get alpha(): number;
    set alpha(value: number);
    get visible(): boolean;
    set visible(value: boolean);
    get_visible(): boolean;
    set_visible(value: boolean): void;
    get blendMode(): string;
    set blendMode(value: string);
    get graphics(): Graphics;
    set graphics(value: Graphics);
    get scrollRect(): Rectangle;
    set scrollRect(value: Rectangle);
    pos(x: number, y: number, speedMode?: boolean): Sprite;
    pivot(x: number, y: number): Sprite;
    size(width: number, height: number): Sprite;
    scale(scaleX: number, scaleY: number, speedMode?: boolean): Sprite;
    skew(skewX: number, skewY: number): Sprite;
    render(ctx: Context, x: number, y: number): void;
    drawToCanvas(canvasWidth: number, canvasHeight: number, offsetX: number, offsetY: number): HTMLCanvas;
    drawToTexture(canvasWidth: number, canvasHeight: number, offsetX: number, offsetY: number, rt?: RenderTexture2D | null): Texture | RenderTexture2D;
    drawToTexture3D(offx: number, offy: number, tex: Texture2D): void;
    static drawToCanvas(sprite: Sprite, _renderType: number, canvasWidth: number, canvasHeight: number, offsetX: number, offsetY: number): HTMLCanvas;
    static drawtocanvCtx: Context;
    static drawToTexture(sprite: Sprite, _renderType: number, canvasWidth: number, canvasHeight: number, offsetX: number, offsetY: number, rt?: RenderTexture2D | null): Texture | RenderTexture2D;
    customRender(context: Context, x: number, y: number): void;
    get filters(): any[];
    set filters(value: any[]);
    localToGlobal(point: Point, createNewPoint?: boolean, globalNode?: Sprite | null): Point;
    globalToLocal(point: Point, createNewPoint?: boolean, globalNode?: Sprite | null): Point;
    toParentPoint(point: Point): Point;
    fromParentPoint(point: Point): Point;
    protected onStartListeningToType(type: string): void;
    protected _onDisplay(v?: boolean): void;
    protected _setParent(value: Node): void;
    loadImage(url: string, complete?: Handler): Sprite;
    static fromImage(url: string): Sprite;
    repaint(type?: number): void;
    protected _childChanged(child?: Node): void;
    parentRepaint(type?: number): void;
    get stage(): Stage;
    get hitArea(): IHitArea;
    set hitArea(value: IHitArea);
    get mask(): Sprite;
    set mask(value: Sprite);
    get mouseEnabled(): boolean;
    set mouseEnabled(value: boolean);
    startDrag(area?: Rectangle, hasInertia?: boolean, elasticDistance?: number, elasticBackTime?: number, data?: any, ratio?: number): void;
    stopDrag(): void;
    hitTestPoint(x: number, y: number): boolean;
    getMousePoint(): Point;
    get globalScaleX(): number;
    get globalRotation(): number;
    get globalScaleY(): number;
    get mouseX(): number;
    get mouseY(): number;
    get zOrder(): number;
    set zOrder(value: number);
    get texture(): Texture;
    set texture(value: Texture);
    get viewport(): Rectangle;
    set viewport(value: Rectangle);
    set drawCallOptimize(value: boolean);
    get drawCallOptimize(): boolean;
    onAfterDeserialize(): void;
}
