import { ParticleSetting } from "./ParticleSetting";
import { ISubmit } from "../webgl/submit/ISubmit";
import { ParticleShaderValue } from "./shader/value/ParticleShaderValue";
import { MeshParticle2D } from "../webgl/utils/MeshParticle2D";
import { Texture } from "../resource/Texture";
import { Resource } from "../resource/Resource";
export declare class ParticleTemplate2D extends Resource implements ISubmit {
    readonly settings: ParticleSetting;
    readonly texture: Texture;
    protected _vertices: Float32Array;
    protected _mesh: MeshParticle2D;
    protected _conchMesh: any;
    protected _floatCountPerVertex: number;
    protected _firstActiveElement: number;
    protected _firstNewElement: number;
    protected _firstFreeElement: number;
    protected _firstRetiredElement: number;
    protected _drawCounter: number;
    static activeBlendType: number;
    x: number;
    y: number;
    protected _blendFn: Function;
    sv: ParticleShaderValue;
    constructor(settings: ParticleSetting, texture: Texture);
    getRenderType(): number;
    releaseRender(): void;
    protected initialize(): void;
    addParticleArray(position: Float32Array, velocity: Float32Array): void;
    addNewParticlesToVertexBuffer(): void;
    renderSubmit(): number;
    updateParticleForNative(): void;
    update(elapsedTime: number): void;
    private retireActiveParticles;
    private freeRetiredParticles;
    getMesh(): MeshParticle2D;
    getConchMesh(): any;
    getFirstNewElement(): number;
    getFirstFreeElement(): number;
    getFirstActiveElement(): number;
    getFirstRetiredElement(): number;
    setFirstFreeElement(_value: number): void;
    setFirstNewElement(_value: number): void;
    addDrawCounter(): void;
    blend(): void;
    protected _disposeResource(): void;
}
