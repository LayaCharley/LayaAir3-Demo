import { Box } from "./Box";
import { ScrollBar } from "./ScrollBar";
import { Event } from "../events/Event";
import { Point } from "../maths/Point";
import { Handler } from "../utils/Handler";
import { UIComponent } from "./UIComponent";
import { ScrollType } from "./Styles";
export declare class List extends Box {
    selectHandler: Handler | null;
    renderHandler: Handler | null;
    mouseHandler: Handler | null;
    selectEnable: boolean;
    totalPage: number;
    disableStopScroll: boolean;
    protected _content: Box;
    protected _scrollBar: ScrollBar | null;
    protected _itemRender: any;
    protected _repeatX: number;
    protected _repeatY: number;
    protected _repeatX2: number;
    protected _repeatY2: number;
    protected _spaceX: number;
    protected _spaceY: number;
    protected _cells: UIComponent[];
    protected _array: any[] | null;
    protected _startIndex: number;
    protected _selectedIndex: number;
    protected _page: number;
    protected _isVertical: boolean;
    protected _cellSize: number;
    protected _cellOffset: number;
    protected _isMoved: boolean;
    cacheContent: boolean;
    protected _createdLine: number;
    protected _cellChanged: boolean;
    protected _offset: Point;
    protected _usedCache: string | null;
    protected _elasticEnabled: boolean;
    protected _scrollType: ScrollType;
    protected _vScrollBarSkin: string;
    protected _hScrollBarSkin: string;
    destroy(destroyChild?: boolean): void;
    protected createChildren(): void;
    set cacheAs(value: string);
    get cacheAs(): string;
    private onScrollStart;
    private onScrollEnd;
    get content(): Box;
    get scrollType(): ScrollType;
    set scrollType(value: ScrollType);
    get vScrollBarSkin(): string;
    set vScrollBarSkin(value: string);
    get hScrollBarSkin(): string;
    set hScrollBarSkin(value: string);
    get scrollBar(): ScrollBar | null;
    set scrollBar(value: ScrollBar | null);
    get itemRender(): any;
    set itemRender(value: any);
    _setWidth(value: number): void;
    _setHeight(value: number): void;
    get repeatX(): number;
    set repeatX(value: number);
    get repeatY(): number;
    set repeatY(value: number);
    get spaceX(): number;
    set spaceX(value: number);
    get spaceY(): number;
    set spaceY(value: number);
    protected changeCells(): void;
    private _getOneCell;
    private _createItems;
    protected createItem(): UIComponent;
    protected addCell(cell: UIComponent): void;
    onAfterDeserialize(): void;
    initItems(): void;
    setContentSize(width: number, height: number): void;
    protected onCellMouse(e: Event): void;
    protected changeCellState(cell: UIComponent, visible: boolean, index: number): void;
    protected _sizeChanged(): void;
    protected onScrollBarChange(e?: Event | null): void;
    private posCell;
    get selectedIndex(): number;
    set selectedIndex(value: number);
    protected changeSelectStatus(): void;
    get selectedItem(): any;
    set selectedItem(value: any);
    get selection(): UIComponent;
    set selection(value: UIComponent);
    get startIndex(): number;
    set startIndex(value: number);
    protected renderItems(from?: number, to?: number): void;
    protected renderItem(cell: UIComponent, index: number): void;
    private _bindData;
    get array(): any[];
    private _preLen;
    set array(value: any[]);
    updateArray(array: any[]): void;
    get page(): number;
    set page(value: number);
    get length(): number;
    set_dataSource(value: any): void;
    get cells(): UIComponent[];
    get elasticEnabled(): boolean;
    set elasticEnabled(value: boolean);
    refresh(): void;
    getItem(index: number): any;
    changeItem(index: number, source: any): void;
    setItem(index: number, source: any): void;
    addItem(source: any): void;
    addItemAt(souce: any, index: number): void;
    deleteItem(index: number): void;
    getCell(index: number): UIComponent | null;
    scrollTo(index: number): void;
    tweenTo(index: number, time?: number, complete?: Handler | null): void;
    protected _setCellChanged(): void;
    protected commitMeasure(): void;
}
