import { Box } from "./Box";
import { List } from "./List";
import { ScrollBar } from "./ScrollBar";
import { Event } from "../events/Event";
import { Handler } from "../utils/Handler";
import { XML } from "../html/XML";
export declare class Tree extends Box {
    protected _list: List;
    protected _source: any[];
    protected _renderHandler: Handler;
    protected _spaceLeft: number;
    protected _spaceBottom: number;
    protected _keepStatus: boolean;
    constructor();
    destroy(destroyChild?: boolean): void;
    protected createChildren(): void;
    protected onListChange(e?: Event): void;
    get keepStatus(): boolean;
    set keepStatus(value: boolean);
    get array(): any[];
    set array(value: any[]);
    get source(): any[];
    get list(): List;
    get itemRender(): any;
    set itemRender(value: any);
    get scrollBarSkin(): string;
    set scrollBarSkin(value: string);
    get scrollBar(): ScrollBar;
    get mouseHandler(): Handler;
    set mouseHandler(value: Handler);
    get renderHandler(): Handler;
    set renderHandler(value: Handler);
    get spaceLeft(): number;
    set spaceLeft(value: number);
    get spaceBottom(): number;
    set spaceBottom(value: number);
    get selectedIndex(): number;
    set selectedIndex(value: number);
    get selectedItem(): any;
    set selectedItem(value: any);
    protected getArray(): any[];
    protected getDepth(item: any, num?: number): number;
    protected getParentOpenStatus(item: any): boolean;
    protected renderItem(cell: Box, index: number): void;
    private onArrowClick;
    setItemState(index: number, isOpen: boolean): void;
    fresh(): void;
    set_dataSource(value: any): void;
    set xml(value: XML);
    protected parseXml(xml: XML, source: any[], nodeParent: any, isRoot: boolean): void;
    protected parseOpenStatus(oldSource: any[], newSource: any[]): void;
    protected isSameParent(item1: any, item2: any): boolean;
    get selectedPath(): string;
    filter(key: string): void;
    private getFilterSource;
}
