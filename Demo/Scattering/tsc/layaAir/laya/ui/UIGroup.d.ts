import { Box } from "./Box";
import { ISelect } from "./ISelect";
import { Sprite } from "../display/Sprite";
import { Handler } from "../utils/Handler";
export declare class UIGroup extends Box {
    selectHandler: Handler;
    protected _items: ISelect[];
    protected _selectedIndex: number;
    protected _skin: string;
    protected _direction: string;
    protected _space: number;
    protected _labels: string;
    protected _labelColors: string;
    private _labelFont;
    protected _labelStrokeColor: string;
    protected _strokeColors: string;
    protected _labelStroke: number;
    protected _labelSize: number;
    protected _labelBold: boolean;
    protected _labelPadding: string;
    protected _labelAlign: string;
    protected _stateNum: number;
    protected _labelChanged: boolean;
    constructor(labels?: string, skin?: string);
    protected preinitialize(): void;
    destroy(destroyChild?: boolean): void;
    addItem(item: ISelect, autoLayout?: boolean): number;
    delItem(item: ISelect, autoLayout?: boolean): void;
    onAfterDeserialize(): void;
    initItems(): void;
    protected itemClick(index: number): void;
    get selectedIndex(): number;
    set selectedIndex(value: number);
    protected setSelect(index: number, selected: boolean): void;
    get skin(): string;
    set skin(value: string);
    _setSkin(url: string): Promise<void>;
    protected _skinLoaded(): void;
    get labels(): string;
    set labels(value: string);
    protected createItem(skin: string, label: string): Sprite;
    get labelColors(): string;
    set labelColors(value: string);
    get labelStroke(): number;
    set labelStroke(value: number);
    get labelStrokeColor(): string;
    set labelStrokeColor(value: string);
    get strokeColors(): string;
    set strokeColors(value: string);
    get labelSize(): number;
    set labelSize(value: number);
    get stateNum(): number;
    set stateNum(value: number);
    get labelBold(): boolean;
    set labelBold(value: boolean);
    get labelFont(): string;
    set labelFont(value: string);
    get labelPadding(): string;
    set labelPadding(value: string);
    get direction(): string;
    set direction(value: string);
    get space(): number;
    set space(value: number);
    protected changeLabels(): void;
    protected commitMeasure(): void;
    get items(): ISelect[];
    get selection(): ISelect;
    set selection(value: ISelect);
    set_dataSource(value: any): void;
    protected _setLabelChanged(): void;
}
