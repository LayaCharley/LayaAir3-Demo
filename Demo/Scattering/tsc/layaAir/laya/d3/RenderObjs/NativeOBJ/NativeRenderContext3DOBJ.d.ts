import { Vector4 } from "../../../maths/Vector4";
import { IRenderTarget } from "../../../RenderEngine/RenderInterface/IRenderTarget";
import { IRenderContext3D, PipelineMode } from "../../../RenderEngine/RenderInterface/RenderPipelineInterface/IRenderContext3D";
import { ShaderData } from "../../../RenderEngine/RenderShader/ShaderData";
import { Viewport } from "../../math/Viewport";
import { NativeRenderElementOBJ } from "./NativeRenderElementOBJ";
export declare class NativeRenderContext3DOBJ implements IRenderContext3D {
    private _destTarget;
    private _viewPort;
    private _scissor;
    private _cameraShaderData;
    private _sceneShaderData;
    private _globalShaderData;
    private _nativeObj;
    constructor();
    end(): void;
    drawRenderElement(renderelemt: NativeRenderElementOBJ): void;
    applyContext(cameraUpdateMark: number): void;
    set destTarget(destTarget: IRenderTarget);
    get destTarget(): IRenderTarget;
    set viewPort(viewPort: Viewport);
    get viewPort(): Viewport;
    set scissor(scissor: Vector4);
    get scissor(): Vector4;
    set invertY(invertY: boolean);
    get invertY(): boolean;
    set pipelineMode(pipelineMode: PipelineMode);
    get pipelineMode(): PipelineMode;
    set globalShaderData(globalShaderData: ShaderData);
    get globalShaderData(): ShaderData;
    set sceneShaderData(sceneShaderData: ShaderData);
    get sceneShaderData(): ShaderData;
    set cameraShaderData(cameraShaderData: ShaderData);
    get cameraShaderData(): ShaderData;
    set sceneID(sceneID: number);
    get sceneID(): number;
    set cameraUpdateMark(cameraUpdateMark: number);
    get cameraUpdateMark(): number;
}
