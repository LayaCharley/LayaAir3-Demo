import { PhysicsComponent } from "./PhysicsComponent";
import { ColliderShape } from "./shape/ColliderShape";
import { Rigidbody3D } from "./Rigidbody3D";
import { Quaternion } from "../../maths/Quaternion";
import { Vector3 } from "../../maths/Vector3";
export declare class CharacterController extends PhysicsComponent {
    static UPAXIS_X: number;
    static UPAXIS_Y: number;
    static UPAXIS_Z: number;
    userData: any;
    set colliderShape(value: ColliderShape);
    get colliderShape(): ColliderShape;
    get fallSpeed(): number;
    set fallSpeed(value: number);
    set pushForce(v: number);
    get pushForce(): number;
    get jumpSpeed(): number;
    set jumpSpeed(value: number);
    get gravity(): Vector3;
    set gravity(value: Vector3);
    get maxSlope(): number;
    set maxSlope(value: number);
    get isGrounded(): boolean;
    get stepHeight(): number;
    set stepHeight(value: number);
    get upAxis(): Vector3;
    set upAxis(value: Vector3);
    get position(): Vector3;
    set position(v: Vector3);
    get orientation(): Quaternion;
    set orientation(v: Quaternion);
    constructor(stepheight?: number, upAxis?: Vector3, collisionGroup?: number, canCollideWith?: number);
    private setJumpAxis;
    protected _onAdded(): void;
    protected _onDestroy(): void;
    getHitFlag(): any;
    getVerticalVel(): any;
    getOverlappingObj(cb: (body: Rigidbody3D) => void): void;
    move(movement: Vector3): void;
    jump(velocity?: Vector3): void;
    get btColliderObject(): number;
}
