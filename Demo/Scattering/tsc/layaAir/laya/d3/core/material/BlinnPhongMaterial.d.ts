import { Color } from "../../../maths/Color";
import { Vector4 } from "../../../maths/Vector4";
import { BaseTexture } from "../../../resource/BaseTexture";
import { Material } from "./Material";
export declare class BlinnPhongMaterial extends Material {
    static SPECULARSOURCE_DIFFUSEMAPALPHA: number;
    static SPECULARSOURCE_SPECULARMAP: number;
    static RENDERMODE_OPAQUE: number;
    static RENDERMODE_CUTOUT: number;
    static RENDERMODE_TRANSPARENT: number;
    static defaultMaterial: BlinnPhongMaterial;
    set renderMode(value: number);
    get enableVertexColor(): boolean;
    set enableVertexColor(value: boolean);
    get tilingOffset(): Vector4;
    set tilingOffset(value: Vector4);
    get albedoColor(): Color;
    set albedoColor(value: Color);
    get albedoIntensity(): number;
    set albedoIntensity(value: number);
    get specularColor(): Color;
    set specularColor(value: Color);
    get shininess(): number;
    set shininess(value: number);
    get albedoTexture(): BaseTexture;
    set albedoTexture(value: BaseTexture);
    get normalTexture(): BaseTexture;
    set normalTexture(value: BaseTexture);
    get specularTexture(): BaseTexture;
    set specularTexture(value: BaseTexture);
    get enableTransmission(): boolean;
    set enableTransmission(value: boolean);
    get transmissionRata(): number;
    set transmissionRata(value: number);
    get backDiffuse(): number;
    set backDiffuse(value: number);
    get backScale(): number;
    set backScale(value: number);
    get thinknessTexture(): BaseTexture;
    set thinknessTexture(value: BaseTexture);
    get transmissionColor(): Color;
    set transmissionColor(value: Color);
    get transmissionRate(): number;
    constructor();
    clone(): any;
    cloneTo(destObject: any): void;
}
