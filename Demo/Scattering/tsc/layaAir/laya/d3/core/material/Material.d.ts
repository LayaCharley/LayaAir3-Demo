import { BaseTexture } from "../../../resource/BaseTexture";
import { Resource } from "../../../resource/Resource";
import { Handler } from "../../../utils/Handler";
import { DefineDatas } from "../../../RenderEngine/RenderShader/DefineDatas";
import { Shader3D } from "../../../RenderEngine/RenderShader/Shader3D";
import { ShaderData, ShaderDataItem, ShaderDataType } from "../../../RenderEngine/RenderShader/ShaderData";
import { ShaderDefine } from "../../../RenderEngine/RenderShader/ShaderDefine";
import { IClone } from "../../../utils/IClone";
import { Color } from "../../../maths/Color";
import { Matrix4x4 } from "../../../maths/Matrix4x4";
import { Vector2 } from "../../../maths/Vector2";
import { Vector3 } from "../../../maths/Vector3";
import { Vector4 } from "../../../maths/Vector4";
import { Matrix3x3 } from "../../../maths/Matrix3x3";
export declare enum MaterialRenderMode {
    RENDERMODE_OPAQUE = 0,
    RENDERMODE_CUTOUT = 1,
    RENDERMODE_TRANSPARENT = 2,
    RENDERMODE_ADDTIVE = 3,
    RENDERMODE_ALPHABLENDED = 4,
    RENDERMODE_CUSTOME = 5
}
export declare class Material extends Resource implements IClone {
    static RENDERQUEUE_OPAQUE: number;
    static RENDERQUEUE_ALPHATEST: number;
    static RENDERQUEUE_TRANSPARENT: number;
    static ALPHATESTVALUE: number;
    static SHADERDEFINE_ALPHATEST: ShaderDefine;
    static SHADERDEFINE_MAINTEXTURE: ShaderDefine;
    static SHADERDEFINE_ADDTIVEFOG: ShaderDefine;
    static load(url: string, complete: Handler): void;
    _shaderValues: ShaderData | null;
    renderQueue: number;
    get shaderData(): ShaderData;
    get alphaTestValue(): number;
    set alphaTestValue(value: number);
    get alphaTest(): boolean;
    set alphaTest(value: boolean);
    addDefine(define: ShaderDefine): void;
    removeDefine(define: ShaderDefine): void;
    setDefine(define: ShaderDefine, value: boolean): void;
    hasDefine(define: ShaderDefine): boolean;
    get depthWrite(): boolean;
    set depthWrite(value: boolean);
    get cull(): number;
    set cull(value: number);
    get blend(): number;
    set blend(value: number);
    get blendSrc(): number;
    set blendSrc(value: number);
    get blendDst(): number;
    set blendDst(value: number);
    get blendSrcAlpha(): number;
    set blendSrcAlpha(value: number);
    get blendSrcRGB(): number;
    set blendSrcRGB(value: number);
    get blendDstRGB(): number;
    set blendDstRGB(value: number);
    get blendDstAlpha(): number;
    set blendDstAlpha(value: number);
    get blendEquation(): number;
    set blendEquation(value: number);
    get blendEquationRGB(): number;
    set blendEquationRGB(value: number);
    get blendEquationAlpha(): number;
    set blendEquationAlpha(value: number);
    get depthTest(): number;
    set depthTest(value: number);
    get stencilTest(): number;
    set stencilTest(value: number);
    get stencilWrite(): boolean;
    set stencilWrite(value: boolean);
    set stencilRef(value: number);
    get stencilRef(): number;
    set stencilOp(value: Vector3);
    get stencilOp(): Vector3;
    get MaterialProperty(): any;
    get MaterialDefine(): Array<string>;
    set materialRenderMode(value: MaterialRenderMode);
    get materialRenderMode(): MaterialRenderMode;
    constructor();
    protected _disposeResource(): void;
    get shader(): Shader3D;
    effectiveProperty(): Map<string, ShaderDataType>;
    setShaderName(name: string): void;
    getBoolByIndex(uniformIndex: number): boolean;
    setBoolByIndex(uniformIndex: number, value: boolean): void;
    getBool(name: string): boolean;
    setBool(name: string, value: boolean): void;
    getFloatByIndex(uniformIndex: number): number;
    setFloatByIndex(uniformIndex: number, value: number): void;
    getFloat(name: string): number;
    setFloat(name: string, value: number): void;
    getIntByIndex(uniformIndex: number): number;
    setIntByIndex(uniformIndex: number, value: number): void;
    getInt(name: string): number;
    setInt(name: string, value: number): void;
    getVector2ByIndex(uniformIndex: number): Vector2;
    setVector2ByIndex(uniformIndex: number, value: Vector2): void;
    getVector2(name: string): Vector2;
    setVector2(name: string, value: Vector2): void;
    getVector3ByIndex(uniformIndex: number): Vector3;
    setVector3ByIndex(uniformIndex: number, value: Vector3): void;
    getVector3(name: string): Vector3;
    setVector3(name: string, value: Vector3): void;
    setVector4ByIndex(uniformIndex: number, value: Vector4): void;
    getVector4ByIndex(uniformIndex: number): Vector4;
    setVector4(name: string, value: Vector4): void;
    getVector4(name: string): Vector4;
    getColorByIndex(uniformIndex: number): Color;
    setColorByIndex(uniformIndex: number, value: Color): void;
    getColor(name: string): Color;
    setColor(name: string, value: Color): void;
    getMatrix4x4ByIndex(uniformIndex: number): Matrix4x4;
    setMatrix4x4ByIndex(uniformIndex: number, value: Matrix4x4): void;
    getMatrix4x4(name: string): Matrix4x4;
    setMatrix4x4(name: string, value: Matrix4x4): void;
    getMatrix3x3ByIndex(index: number): Matrix3x3;
    setMatrix3x3ByIndex(index: number, value: Matrix3x3): void;
    getMatrix3x3(name: string): Matrix3x3;
    setMatrix3x3(name: string, value: Matrix3x3): void;
    setTextureByIndex(uniformIndex: number, texture: BaseTexture): void;
    private reSetTexture;
    getTextureByIndex(uniformIndex: number): BaseTexture;
    setTexture(name: string, texture: BaseTexture): void;
    getTexture(name: string): BaseTexture;
    getBufferByIndex(uniformIndex: number): Float32Array;
    setBufferByIndex(uniformIndex: number, value: Float32Array): void;
    getBuffer(name: string): Float32Array;
    setBuffer(name: string, value: Float32Array): void;
    setShaderDataByIndex(uniformIndex: number, type: ShaderDataType, value: ShaderDataItem): void;
    setShaderData(name: string, type: ShaderDataType, value: ShaderDataItem): void;
    getShaderData(name: string, type: ShaderDataType): ShaderDataItem;
    getShaderDataByIndex(uniformIndex: number, type: ShaderDataType): ShaderDataItem;
    cloneTo(destObject: any): void;
    clone(): any;
    setShaderPropertyValue(name: string, value: any): void;
    getShaderPropertyValue(name: string): any;
    get _defineDatas(): DefineDatas;
    oldparseEndEvent(): void;
}
