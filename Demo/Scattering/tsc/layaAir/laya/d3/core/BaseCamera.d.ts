import { IRenderEngine } from "../../RenderEngine/RenderInterface/IRenderEngine";
import { Sprite3D } from "./Sprite3D";
import { Color } from "../../maths/Color";
import { Vector3 } from "../../maths/Vector3";
import { SkyRenderer } from "../resource/models/SkyRenderer";
export declare class BaseCamera extends Sprite3D {
    static RENDERINGTYPE_DEFERREDLIGHTING: string;
    static RENDERINGTYPE_FORWARDRENDERING: string;
    static __init__(): void;
    protected _nearPlane: number;
    protected _farPlane: number;
    protected _renderEngine: IRenderEngine;
    private _fieldOfView;
    private _orthographicVerticalSize;
    private _skyRenderer;
    _forward: Vector3;
    _up: Vector3;
    protected _orthographic: boolean;
    private _clearColor;
    get clearColor(): Color;
    set clearColor(value: Color);
    private _cullingMask;
    useOcclusionCulling: boolean;
    get skyRenderer(): SkyRenderer;
    get fieldOfView(): number;
    set fieldOfView(value: number);
    get maxlocalYDistance(): number;
    get nearPlane(): number;
    set nearPlane(value: number);
    get farPlane(): number;
    set farPlane(vaule: number);
    get orthographic(): boolean;
    set orthographic(vaule: boolean);
    get orthographicVerticalSize(): number;
    set orthographicVerticalSize(vaule: number);
    get cullingMask(): number;
    set cullingMask(value: number);
    get renderingOrder(): number;
    set renderingOrder(value: number);
    constructor(nearPlane?: number, farPlane?: number);
    private _caculateMaxLocalYRange;
    addLayer(layer: number): void;
    removeLayer(layer: number): void;
    addAllLayers(): void;
    removeAllLayers(): void;
    resetProjectionMatrix(): void;
    protected _onActive(): void;
    protected _onInActive(): void;
    destroy(destroyChild?: boolean): void;
}
