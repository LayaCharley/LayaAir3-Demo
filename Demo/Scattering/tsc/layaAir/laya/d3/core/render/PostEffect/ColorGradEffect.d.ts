import { Vector3 } from "../../../../maths/Vector3";
import { ShaderDefine } from "../../../../RenderEngine/RenderShader/ShaderDefine";
import { RenderTexture } from "../../../../resource/RenderTexture";
import { PostProcessEffect } from "../PostProcessEffect";
import { Color } from "../../../../maths/Color";
import { PostProcess } from "../../../component/PostProcess";
export declare enum ToneMappingType {
    None = 0,
    ACES = 1
}
export declare class ColorGradEffect extends PostProcessEffect {
    static SHADERDEFINE_ACES: ShaderDefine;
    static SHADERDEFINE_CUSTOMLUT: ShaderDefine;
    static SHADERVALUE_LUT: number;
    static SHADERVALUE_LUTPARAMS: number;
    static SHADERVALUE_CUSTOMLUT: number;
    static SHADERVALUE_CUSTOMLUTPARAMS: number;
    static init(): void;
    static __initDefine__(): void;
    private _needBuildLUT;
    private _lutCommond;
    _lutTex: RenderTexture;
    private _lutBuilderMat;
    private _LUTShader;
    private _lutShaderData;
    private _blitlutParams;
    private _splitShadow;
    private _splitBalance;
    private _splithighlights;
    private _u_SplitShadow;
    private _enableSMH;
    private _enableLiftGammaGain;
    private _enableBalance;
    private _tint;
    private _temperature;
    get toneMapping(): ToneMappingType;
    set toneMapping(value: ToneMappingType);
    get enableSplitTone(): boolean;
    set enableSplitTone(value: boolean);
    get splitShadow(): Vector3;
    set splitShadow(value: Vector3);
    get splithighlights(): Vector3;
    set splithighlights(value: Vector3);
    get splitBalance(): number;
    set splitBalance(value: number);
    get enableSMH(): boolean;
    set enableSMH(value: boolean);
    get shadows(): Vector3;
    set shadows(value: Vector3);
    get midtones(): Vector3;
    set midtones(value: Vector3);
    get highlights(): Vector3;
    set highlights(value: Vector3);
    get shadowLimitStart(): number;
    set shadowLimitStart(value: number);
    get shadowLimitEnd(): number;
    set shadowLimitEnd(value: number);
    get highLightLimitStart(): number;
    set highLightLimitStart(value: number);
    get highLightLimitEnd(): number;
    set highLightLimitEnd(value: number);
    get enableLiftGammaGain(): boolean;
    set enableLiftGammaGain(value: boolean);
    get lift(): Vector3;
    set lift(value: Vector3);
    get gamma(): Vector3;
    set gamma(value: Vector3);
    get gain(): Vector3;
    set gain(value: Vector3);
    private _StandardIlluminantY;
    private _CIExyToLMS;
    private _ColorBalanceToLMSCoeffs;
    get enableBalance(): boolean;
    set enableBalance(value: boolean);
    get tint(): number;
    set tint(value: number);
    get temperature(): number;
    set temperature(value: number);
    get enableColorAdjust(): boolean;
    set enableColorAdjust(value: boolean);
    get postExposure(): number;
    set postExposure(value: number);
    get contrast(): number;
    set contrast(value: number);
    get colorFilter(): Color;
    set colorFilter(value: Color);
    get HueShift(): number;
    set HueShift(value: number);
    get saturation(): number;
    set saturation(value: number);
    constructor();
    private get lutSize();
    private set lutSize(value);
    private default_balance;
    private default_splitShadow;
    private default_splithighlights;
    private default_shadow;
    private default_midtones;
    private default_highlight;
    private default_limint;
    private default_lift;
    private default_gamma;
    private default_gain;
    private default_ColorFilter;
    private default_HueSatCon;
    effectInit(postprocess: PostProcess): void;
    release(postprocess: PostProcess): void;
}
