import { Command } from "./Command";
import { BaseTexture } from "../../../../resource/BaseTexture";
import { Mesh } from "../../../resource/models/Mesh";
import { Material } from "../../material/Material";
import { RenderContext3D } from "../RenderContext3D";
import { BaseRender } from "../BaseRender";
import { MaterialInstancePropertyBlock } from "./MaterialInstancePropertyBlock";
import { Shader3D } from "../../../../RenderEngine/RenderShader/Shader3D";
import { ShaderData } from "../../../../RenderEngine/RenderShader/ShaderData";
import { Color } from "../../../../maths/Color";
import { Matrix4x4 } from "../../../../maths/Matrix4x4";
import { Vector2 } from "../../../../maths/Vector2";
import { Vector3 } from "../../../../maths/Vector3";
import { Vector4 } from "../../../../maths/Vector4";
import { RenderTexture } from "../../../../resource/RenderTexture";
export declare class CommandBuffer {
    constructor(name?: string, shadowCaster?: boolean);
    get name(): string;
    get casterShadow(): boolean;
    set context(value: RenderContext3D);
    get context(): RenderContext3D;
    _apply(): void;
    _applyOne(): boolean;
    getCommandsSize(): number;
    setShaderDataTexture(shaderData: ShaderData, nameID: number, source: BaseTexture): void;
    setGlobalTexture(nameID: number, source: BaseTexture): void;
    setShaderDataColor(shaderData: ShaderData, nameID: number, value: Color): void;
    setGlobalColor(nameID: number, source: Color): void;
    setShaderDataVector(shaderData: ShaderData, nameID: number, value: Vector4): void;
    setGlobalVector(nameID: number, source: Vector4): void;
    setShaderDataVector3(shaderData: ShaderData, nameID: number, value: Vector3): void;
    setGlobalVector3(nameID: number, source: Vector3): void;
    setShaderDataVector2(shaderData: ShaderData, nameID: number, value: Vector2): void;
    setGlobalVector2(nameID: number, source: Vector2): void;
    setShaderDataNumber(shaderData: ShaderData, nameID: number, value: number): void;
    setGlobalNumber(nameID: number, source: number): void;
    setShaderDataInt(shaderData: ShaderData, nameID: number, value: number): void;
    setGlobalInt(nameID: number, source: number): void;
    setShaderDataMatrix(shaderData: ShaderData, nameID: number, value: Matrix4x4): void;
    setShaderDefine(shaderData: ShaderData, define: string, value: boolean): void;
    setGlobalMatrix(nameID: number, source: number): void;
    blitScreenQuad(source: BaseTexture, dest: RenderTexture, offsetScale?: Vector4, shader?: Shader3D, shaderData?: ShaderData, subShader?: number): void;
    blitScreenQuadByMaterial(source: BaseTexture, dest: RenderTexture, offsetScale?: Vector4, material?: Material, subShader?: number): void;
    blitScreenTriangle(source: BaseTexture, dest: RenderTexture, offsetScale?: Vector4, shader?: Shader3D, shaderData?: ShaderData, subShader?: number): void;
    setRenderTarget(renderTexture: RenderTexture): void;
    clearRenderTarget(clearColor: boolean, clearDepth: boolean, backgroundColor: Color, depth?: number): void;
    drawMesh(mesh: Mesh, matrix: Matrix4x4, material: Material, submeshIndex: number, subShaderIndex: number): void;
    drawRender(render: BaseRender, material: Material, subShaderIndex: number): void;
    drawMeshInstance(mesh: Mesh, subMeshIndex: number, matrixs: Matrix4x4[], material: Material, subShaderIndex: number, instanceProperty: MaterialInstancePropertyBlock, drawnums: number): any;
    addCustomCMD(command: Command): void;
}
