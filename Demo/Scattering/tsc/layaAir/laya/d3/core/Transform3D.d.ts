import { EventDispatcher } from "../../events/EventDispatcher";
import { Matrix4x4 } from "../../maths/Matrix4x4";
import { Quaternion } from "../../maths/Quaternion";
import { Vector3 } from "../../maths/Vector3";
import { Sprite3D } from "./Sprite3D";
export declare class Transform3D extends EventDispatcher {
    protected _faceInvert: boolean;
    protected _frontFaceValue: number;
    getFrontFaceValue(): number;
    get owner(): Sprite3D;
    get worldNeedUpdate(): boolean;
    get localPositionX(): number;
    set localPositionX(x: number);
    get localPositionY(): number;
    set localPositionY(y: number);
    get localPositionZ(): number;
    set localPositionZ(z: number);
    get localPosition(): Vector3;
    set localPosition(value: Vector3);
    get localRotationX(): number;
    set localRotationX(x: number);
    get localRotationY(): number;
    set localRotationY(y: number);
    get localRotationZ(): number;
    set localRotationZ(z: number);
    get localRotationW(): number;
    set localRotationW(w: number);
    get localRotation(): Quaternion;
    set localRotation(value: Quaternion);
    get localScaleX(): number;
    set localScaleX(value: number);
    get localScaleY(): number;
    set localScaleY(value: number);
    get localScaleZ(): number;
    set localScaleZ(value: number);
    get localScale(): Vector3;
    set localScale(value: Vector3);
    get localRotationEulerX(): number;
    set localRotationEulerX(value: number);
    get localRotationEulerY(): number;
    set localRotationEulerY(value: number);
    get localRotationEulerZ(): number;
    set localRotationEulerZ(value: number);
    get localRotationEuler(): Vector3;
    set localRotationEuler(value: Vector3);
    get localMatrix(): Matrix4x4;
    set localMatrix(value: Matrix4x4);
    get position(): Vector3;
    set position(value: Vector3);
    get rotation(): Quaternion;
    set rotation(value: Quaternion);
    get rotationEuler(): Vector3;
    set rotationEuler(value: Vector3);
    get worldMatrix(): Matrix4x4;
    set worldMatrix(value: Matrix4x4);
    translate(translation: Vector3, isLocal?: boolean): void;
    rotate(rotation: Vector3, isLocal?: boolean, isRadian?: boolean): void;
    getForward(forward: Vector3): void;
    getUp(up: Vector3): void;
    getRight(right: Vector3): void;
    lookAt(target: Vector3, up: Vector3, isLocal?: boolean, isCamera?: boolean): void;
    objLookat(target: Vector3, up: Vector3, isLocal?: boolean): void;
    getWorldLossyScale(): Vector3;
    setWorldLossyScale(value: Vector3): void;
    get scale(): Vector3;
    set scale(value: Vector3);
    localToGlobal(value: Vector3, out: Vector3): void;
    globalToLocal(pos: Vector3, out: Vector3): void;
    toLocalNormal(pos: Vector3, out: Vector3): void;
    toDir(forward: Vector3, dir: Vector3): void;
    static tmpVec3: Vector3;
    rotationTo(out: Quaternion, a: Vector3, b: Vector3): boolean;
}
