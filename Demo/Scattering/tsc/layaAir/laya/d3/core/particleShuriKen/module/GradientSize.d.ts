import { GradientDataNumber } from "./GradientDataNumber";
import { IClone } from "../../../../utils/IClone";
import { Vector3 } from "../../../../maths/Vector3";
export declare class GradientSize implements IClone {
    static createByGradient(gradient: GradientDataNumber): GradientSize;
    static createByGradientSeparate(gradientX: GradientDataNumber, gradientY: GradientDataNumber, gradientZ: GradientDataNumber): GradientSize;
    static createByRandomTwoConstant(constantMin: number, constantMax: number): GradientSize;
    static createByRandomTwoConstantSeparate(constantMinSeparate: Vector3, constantMaxSeparate: Vector3): GradientSize;
    static createByRandomTwoGradient(gradientMin: GradientDataNumber, gradientMax: GradientDataNumber): GradientSize;
    static createByRandomTwoGradientSeparate(gradientXMin: GradientDataNumber, gradientXMax: GradientDataNumber, gradientYMin: GradientDataNumber, gradientYMax: GradientDataNumber, gradientZMin: GradientDataNumber, gradientZMax: GradientDataNumber): GradientSize;
    private _type;
    private _separateAxes;
    private _gradient;
    private _gradientX;
    private _gradientY;
    private _gradientZ;
    private _constantMin;
    private _constantMax;
    private _constantMinSeparate;
    private _constantMaxSeparate;
    private _gradientMin;
    private _gradientMax;
    private _gradientXMin;
    private _gradientXMax;
    private _gradientYMin;
    private _gradientYMax;
    private _gradientZMin;
    private _gradientZMax;
    get type(): number;
    get separateAxes(): boolean;
    get gradient(): GradientDataNumber;
    get gradientX(): GradientDataNumber;
    get gradientY(): GradientDataNumber;
    get gradientZ(): GradientDataNumber;
    get constantMin(): number;
    get constantMax(): number;
    get constantMinSeparate(): Vector3;
    get constantMaxSeparate(): Vector3;
    get gradientMin(): GradientDataNumber;
    get gradientMax(): GradientDataNumber;
    get gradientXMin(): GradientDataNumber;
    get gradientXMax(): GradientDataNumber;
    get gradientYMin(): GradientDataNumber;
    get gradientYMax(): GradientDataNumber;
    get gradientZMin(): GradientDataNumber;
    get gradientZMax(): GradientDataNumber;
    constructor();
    getMaxSizeInGradient(meshMode?: boolean): number;
    cloneTo(destObject: any): void;
    clone(): any;
}
