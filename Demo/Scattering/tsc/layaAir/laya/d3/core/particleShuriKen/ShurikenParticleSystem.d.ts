import { GeometryElement } from "../GeometryElement";
import { IClone } from "../../../utils/IClone";
import { ColorOverLifetime } from "./module/ColorOverLifetime";
import { Emission } from "./module/Emission";
import { GradientDataNumber } from "./module/GradientDataNumber";
import { RotationOverLifetime } from "./module/RotationOverLifetime";
import { BaseShape } from "./module/shape/BaseShape";
import { SizeOverLifetime } from "./module/SizeOverLifetime";
import { TextureSheetAnimation } from "./module/TextureSheetAnimation";
import { VelocityOverLifetime } from "./module/VelocityOverLifetime";
import { ShurikenParticleRenderer } from "./ShurikenParticleRenderer";
import { MeshTopology } from "../../../RenderEngine/RenderEnum/RenderPologyMode";
import { DrawType } from "../../../RenderEngine/RenderEnum/DrawType";
import { Bounds } from "../../math/Bounds";
import { Vector3 } from "../../../maths/Vector3";
import { Vector4 } from "../../../maths/Vector4";
export declare class ShurikenParticleSystem extends GeometryElement implements IClone {
    protected _emissionLastPosition: Vector3;
    duration: number;
    looping: boolean;
    prewarm: boolean;
    startDelayType: number;
    startDelay: number;
    startDelayMin: number;
    startDelayMax: number;
    startSpeedType: number;
    startSpeedConstant: number;
    startSpeedConstantMin: number;
    startSpeedConstantMax: number;
    dragType: number;
    dragConstant: number;
    dragSpeedConstantMin: number;
    dragSpeedConstantMax: number;
    threeDStartSize: boolean;
    startSizeType: number;
    startSizeConstant: number;
    startSizeConstantSeparate: Vector3;
    startSizeConstantMin: number;
    startSizeConstantMax: number;
    startSizeConstantMinSeparate: Vector3;
    startSizeConstantMaxSeparate: Vector3;
    threeDStartRotation: boolean;
    startRotationType: number;
    startRotationConstant: number;
    startRotationConstantSeparate: Vector3;
    startRotationConstantMin: number;
    startRotationConstantMax: number;
    startRotationConstantMinSeparate: Vector3;
    startRotationConstantMaxSeparate: Vector3;
    randomizeRotationDirection: number;
    startColorType: number;
    startColorConstant: Vector4;
    startColorConstantMin: Vector4;
    startColorConstantMax: Vector4;
    gravityModifier: number;
    simulationSpace: number;
    simulationSpeed: number;
    scaleMode: number;
    playOnAwake: boolean;
    randomSeed: Uint32Array;
    autoRandomSeed: boolean;
    isPerformanceMode: boolean;
    get maxParticles(): number;
    set maxParticles(value: number);
    get emission(): Emission;
    get aliveParticleCount(): number;
    get emissionTime(): number;
    get shape(): BaseShape;
    set shape(value: BaseShape);
    get isAlive(): boolean;
    get isEmitting(): boolean;
    get isPlaying(): boolean;
    get isPaused(): boolean;
    get startLifetimeType(): number;
    set startLifetimeType(value: number);
    get startLifetimeConstant(): number;
    set startLifetimeConstant(value: number);
    get startLifeTimeGradient(): GradientDataNumber;
    set startLifeTimeGradient(value: GradientDataNumber);
    get startLifetimeConstantMin(): number;
    set startLifetimeConstantMin(value: number);
    get startLifetimeConstantMax(): number;
    set startLifetimeConstantMax(value: number);
    get startLifeTimeGradientMin(): GradientDataNumber;
    set startLifeTimeGradientMin(value: GradientDataNumber);
    get startLifeTimeGradientMax(): GradientDataNumber;
    set startLifeTimeGradientMax(value: GradientDataNumber);
    get velocityOverLifetime(): VelocityOverLifetime;
    set velocityOverLifetime(value: VelocityOverLifetime);
    get colorOverLifetime(): ColorOverLifetime;
    set colorOverLifetime(value: ColorOverLifetime);
    get sizeOverLifetime(): SizeOverLifetime;
    set sizeOverLifetime(value: SizeOverLifetime);
    get rotationOverLifetime(): RotationOverLifetime;
    set rotationOverLifetime(value: RotationOverLifetime);
    get textureSheetAnimation(): TextureSheetAnimation;
    set textureSheetAnimation(value: TextureSheetAnimation);
    constructor(render: ShurikenParticleRenderer, meshTopology?: MeshTopology, drawType?: DrawType);
    get customBounds(): Bounds;
    set customBounds(value: Bounds);
    emit(time: number): boolean;
    addParticle(position: Vector3, direction: Vector3, time: number): boolean;
    addNewParticlesToVertexBuffer(): void;
    _getType(): number;
    play(): void;
    pause(): void;
    simulate(time: number, restart?: boolean): void;
    stop(): void;
    cloneTo(destObject: any): void;
    clone(): any;
}
