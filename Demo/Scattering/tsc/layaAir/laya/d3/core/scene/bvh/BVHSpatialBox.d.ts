import { Vector3 } from "../../../../maths/Vector3";
import { ICameraCullInfo } from "../../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICameraCullInfo";
import { IShadowCullInfo } from "../../../../RenderEngine/RenderInterface/RenderPipelineInterface/IShadowCullInfo";
import { SingletonList } from "../../../../utils/SingletonList";
import { BoundFrustum } from "../../../math/BoundFrustum";
import { Bounds } from "../../../math/Bounds";
import { IBoundsCell } from "../../../math/IBoundsCell";
import { BVHSpatialConfig, BVHSpatialManager } from "./SpatialManager";
export declare class BVHSpatialBox<T> {
    private static _tempV3;
    private static _tempV3_2;
    static sciContainsBox(box: Bounds, cullInfo: IShadowCullInfo): number;
    static sciIntersectsBox(box: Bounds, cullInfo: IShadowCullInfo): boolean;
    protected _children1: BVHSpatialBox<T>;
    protected _config: BVHSpatialConfig;
    protected _bvhmanager: BVHSpatialManager;
    constructor(bvhmanager: BVHSpatialManager, config: BVHSpatialConfig);
    set parent(value: BVHSpatialBox<IBoundsCell>);
    get parent(): BVHSpatialBox<IBoundsCell>;
    private _isRepeat;
    private _addOneCell;
    private _removeOneCell;
    private _clearList;
    private _isFloatMax;
    private _isBoundsContainedBySpatialBox;
    private _addBounds;
    private _removeBounds;
    getList(): IBoundsCell[];
    getchild0(): BVHSpatialBox<T>;
    getchild1(): BVHSpatialBox<T>;
    fillCell(cell: IBoundsCell): void;
    fillRemove(cell: IBoundsCell): void;
    addCell(cell: IBoundsCell): void;
    removeCell(cell: IBoundsCell): void;
    splitBox(): void;
    getNearlist(checkPos: Vector3): BVHSpatialBox<T>;
    traverseBoundsCell(out: SingletonList<IBoundsCell>, conditionalFun?: Function): void;
    protected _creatChildNode(): BVHSpatialBox<T>;
    getItemByCameraCullInfo(cameraCullInfo: ICameraCullInfo, out: SingletonList<IBoundsCell>): void;
    getItemByFrustum(frustum: BoundFrustum, out: SingletonList<IBoundsCell>): void;
    getItemBySCI(sci: IShadowCullInfo, out: SingletonList<IBoundsCell>): void;
    recaculateBox(): void;
    isRoot(): boolean;
    isContentBox(): boolean;
    destroy(): void;
}
