import { Sprite } from "../../../display/Sprite";
import { Texture2D } from "../../../resource/Texture2D";
import { Handler } from "../../../utils/Handler";
import { Timer } from "../../../utils/Timer";
import { ISubmit } from "../../../webgl/submit/ISubmit";
import { PhysicsSimulation } from "../../physics/PhysicsSimulation";
import { SkyRenderer } from "../../resource/models/SkyRenderer";
import { TextureCube } from "../../../resource/TextureCube";
import { Camera } from "../Camera";
import { Lightmap } from "./Lightmap";
import { ShaderDataItem, ShaderDataType } from "../../../RenderEngine/RenderShader/ShaderData";
import { UnifromBufferData } from "../../../RenderEngine/UniformBufferData";
import { ICullPass } from "../../../RenderEngine/RenderInterface/RenderPipelineInterface/ICullPass";
import { CommandUniformMap } from "../../../RenderEngine/CommandUniformMap";
import { SceneRenderManager } from "./SceneRenderManager";
import { Scene } from "../../../display/Scene";
import { ReflectionProbe } from "../../component/Volume/reflectionProbe/ReflectionProbe";
import { AmbientMode } from "./AmbientMode";
import { Color } from "../../../maths/Color";
import { Vector3 } from "../../../maths/Vector3";
import { Vector4 } from "../../../maths/Vector4";
export declare enum FogMode {
    Linear = 0,
    EXP = 1,
    EXP2 = 2
}
export declare class Scene3D extends Sprite implements ISubmit {
    static REFLECTIONMODE_SKYBOX: number;
    static REFLECTIONMODE_CUSTOM: number;
    static SCENERENDERFLAG_RENDERQPAQUE: number;
    static SCENERENDERFLAG_SKYBOX: number;
    static SCENERENDERFLAG_RENDERTRANSPARENT: number;
    static sceneUniformMap: CommandUniformMap;
    static SceneUBOData: UnifromBufferData;
    static set _updateMark(value: number);
    static get _updateMark(): number;
    static shaderValueInit(): void;
    static legacyLightingValueInit(): void;
    static load(url: string, complete: Handler): void;
    _reflectionsSource: number;
    _reflectionsResolution: string;
    _reflectionsIblSamples: number;
    _sundir: Vector3;
    _sceneUniformData: UnifromBufferData;
    currentCreationLayer: number;
    enableLight: boolean;
    get scene2D(): Scene;
    set sceneRenderableManager(manager: SceneRenderManager);
    get sceneRenderableManager(): SceneRenderManager;
    set cullPass(cullPass: ICullPass);
    get enableFog(): boolean;
    set enableFog(value: boolean);
    get fogMode(): FogMode;
    set fogMode(value: FogMode);
    get fogColor(): Color;
    set fogColor(value: Color);
    get fogStart(): number;
    set fogStart(value: number);
    get fogEnd(): number;
    set fogEnd(value: number);
    get fogDensity(): number;
    set fogDensity(value: number);
    set fogParams(value: Vector4);
    set GIRotate(value: number);
    get GIRotate(): number;
    get ambientMode(): AmbientMode;
    set ambientMode(value: AmbientMode);
    get sceneReflectionProb(): ReflectionProbe;
    get ambientColor(): Color;
    set ambientColor(value: Color);
    get ambientIntensity(): number;
    set ambientIntensity(value: number);
    get reflectionIntensity(): number;
    set reflectionIntensity(value: number);
    get ambientSH(): Float32Array;
    set ambientSH(value: Float32Array);
    get iblTex(): TextureCube;
    set iblTex(value: TextureCube);
    get iblTexRGBD(): boolean;
    set iblTexRGBD(value: boolean);
    get skyRenderer(): SkyRenderer;
    get physicsSimulation(): PhysicsSimulation;
    get timer(): Timer;
    set timer(value: Timer);
    get lightmaps(): Lightmap[];
    set lightmaps(value: Lightmap[]);
    get shadowMapFrequency(): number;
    set shadowMapFrequency(value: number);
    constructor();
    protected _onActive(): void;
    protected _onInActive(): void;
    private _cullInfoCamera;
    get cullInfoCamera(): Camera;
    _setCullCamera(camera: Camera): void;
    recaculateCullCamera(): void;
    destroy(destroyChild?: boolean): void;
    renderSubmit(): number;
    getRenderType(): number;
    releaseRender(): void;
    setGlobalShaderValue(name: string, type: ShaderDataType, value: ShaderDataItem): void;
    get fogRange(): number;
    set fogRange(value: number);
    setlightmaps(value: Texture2D[]): void;
    getlightmaps(): Texture2D[];
}
