import { Node } from "../display/Node";
import { Sprite } from "../display/Sprite";
import { Stage } from "../display/Stage";
import { Point } from "../maths/Point";
import { Event, ITouchInfo } from "./Event";
export declare class InputManager {
    static multiTouchEnabled: boolean;
    static mouseEventsEnabled: boolean;
    static keyEventsEnabled: boolean;
    static clickTestThreshold: number;
    static mouseX: number;
    static mouseY: number;
    static isTextInputting: boolean;
    static isiOSWKwebView: boolean;
    protected _stage: Stage;
    protected _mouseTouch: TouchInfo;
    protected _touches: TouchInfo[];
    protected _touchPool: TouchInfo[];
    protected _touchTarget: Node;
    protected _eventType: number;
    protected _nativeEvent: MouseEvent | WheelEvent | TouchEvent;
    protected _pressKeys: Set<string | number>;
    protected _keyEvent: Event;
    private _touchInput;
    constructor();
    static get inst(): InputManager;
    static getTouchPos(touchId?: number): Readonly<Point>;
    static get touchTarget(): Node;
    static get touches(): ReadonlyArray<Readonly<ITouchInfo>>;
    static get touchCount(): number;
    static cancelClick(touchId?: number): void;
    static hasKeyDown(key: string | number): boolean;
    static __init__(stage: Stage, canvas: HTMLCanvasElement): void;
    handleMouse(ev: MouseEvent | WheelEvent, type: number): void;
    handleTouch(ev: TouchEvent, type: number): void;
    private getTouch;
    private handleFocus;
    handleKeys(ev: KeyboardEvent): void;
    getNodeUnderPoint(x: number, y: number): Node;
    getSpriteUnderPoint(sp: Sprite, x: number, y: number): Sprite;
    getSprite3DUnderPoint(x: number, y: number): Node;
    hitTest(sp: Sprite, x: number, y: number, editing?: boolean): boolean;
    private handleRollOver;
}
declare class TouchInfo implements ITouchInfo {
    readonly event: Event;
    readonly pos: Point;
    touchId: number;
    clickCount: number;
    began: boolean;
    target: Node;
    lastRollOver: Node;
    clickCancelled: boolean;
    moved: boolean;
    readonly downTargets: Node[];
    private downPos;
    constructor(touches: Array<TouchInfo>);
    begin(): void;
    move(): void;
    end(): void;
    clickTest(): Node;
    reset(): void;
}
export {};
