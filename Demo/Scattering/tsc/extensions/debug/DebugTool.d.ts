import { Sprite } from "laya/display/Sprite";
export declare class DebugTool {
    constructor();
    static enableCacheAnalyse: boolean;
    static enableNodeCreateAnalyse: boolean;
    static getMenuShowEvent(): string;
    static initBasicFunctions(): void;
    private static _traceFun;
    static dTrace(str: string): void;
    private static keyHandler;
    static dealCMDKey(key: string): void;
    static switchNodeTree(): void;
    static analyseMouseHit: Function;
    static selectNodeUnderMouse(): void;
    static showToolPanel(): void;
    static showToolFilter(): void;
    static showNodeInfo(): void;
    static switchDisController(): void;
    static get isThisShow(): boolean;
    static showParent(sprite?: Sprite): any;
    static showChild(sprite?: Sprite): any;
    static showAllChild(sprite?: Sprite): any;
    static showAllUnderMosue(): any;
    static showParentChain(sprite?: Sprite): any;
    static showAllBrother(sprite?: Sprite): any;
    static showBrother(sprite: Sprite, dID?: number): any;
    private static text;
    static set showStatu(value: boolean);
    static clearDebugLayer(): void;
    static debugLayer: Sprite;
    static _target: Sprite;
    static set target(v: Sprite);
    static get target(): Sprite;
    static selectedNodes: any[];
    static autoShowSelected: boolean;
    static showSelected(): void;
    static getClassCreateInfo(className: string): any;
    private static _showBound;
    static set showBound(value: boolean);
    static get showBound(): boolean;
    static autoWork(): void;
    static traceDisMouseEnable(tar?: any): any;
    static traceDisSizeChain(tar?: any): any;
    private static _disBoundRec;
    static showDisBound(sprite?: Sprite, clearPre?: boolean, color?: string): any;
    static showDisBoundToSprite(sprite?: Sprite, graphicSprite?: Sprite, color?: string, lineWidth?: number): any;
    static autoTraceEnable: boolean;
    static autoTraceBounds: boolean;
    static autoTraceSize: boolean;
    static autoTraceTree: boolean;
    static autoTraceCMD: boolean;
    static autoTraceCMDR: boolean;
    static autoTraceSpriteInfo: boolean;
    static getNodeInfo(): any;
    private static _classList;
    private static _tFindClass;
    static findByClass(className: string): any[];
    private static addClassNode;
    private static cmdToTypeO;
    private static _rSpList;
    static traceCMD(sprite?: Sprite): any;
    private static addCMDs;
    private static addCMD;
    private static counter;
    static traceCMDR(sprite?: Sprite): any;
    private static getCMdCount;
    private static addNodeInfo;
    static find(filter: any, ifShowSelected?: boolean): any[];
    private static nameFilter;
    static findByName(name: string): any[];
    static findNameStartWith(startStr: string): any[];
    static findNameHas(hasStr: string, showSelected?: boolean): any[];
    private static getStartWithFun;
    private static getHasFun;
    static findTarget(target: Sprite, filter: any): any[];
    static findClassHas(target: Sprite, str: string): any[];
    private static isFit;
    static _logFun: Function;
    static log(...args: any[]): void;
    private static _exportsDic;
    static export(): void;
}
