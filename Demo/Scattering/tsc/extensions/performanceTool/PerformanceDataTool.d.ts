import { Sprite } from "laya/display/Sprite";
import { Byte } from "laya/utils/Byte";
export declare class PerformanceDataTool {
    static VERSION: string;
    static instance: PerformanceDataTool;
    static PERFORMANCE_DELTYTIME: string;
    static PERFORMANCE_STARTTIME: string;
    static PERFORMANCE_LAYA: string;
    static PERFORMANCE_LAYA_3D: string;
    static PERFORMANCE_LAYA_2D: string;
    static PERFORMANCE_LAYA_3D_PRERENDER: string;
    static PERFORMANCE_LAYA_3D_UPDATESCRIPT: string;
    static PERFORMANCE_LAYA_3D_PHYSICS: string;
    static PERFORMANCE_LAYA_3D_PHYSICS_SIMULATE: string;
    static PERFORMANCE_LAYA_3D_PHYSICS_CHARACTORCOLLISION: string;
    static PERFORMANCE_LAYA_3D_PHYSICS_EVENTSCRIPTS: string;
    static PERFORMANCE_LAYA_3D_RENDER: string;
    static PERFORMANCE_LAYA_3D_RENDER_SHADOWMAP: string;
    static PERFORMANCE_LAYA_3D_RENDER_CLUSTER: string;
    static PERFORMANCE_LAYA_3D_RENDER_CULLING: string;
    static PERFORMANCE_LAYA_3D_RENDER_RENDERDEPTHMDOE: string;
    static PERFORMANCE_LAYA_3D_RENDER_RENDEROPAQUE: string;
    static PERFORMANCE_LAYA_3D_RENDER_RENDERCOMMANDBUFFER: string;
    static PERFORMANCE_LAYA_3D_RENDER_RENDERTRANSPARENT: string;
    static PERFORMANCE_LAYA_3D_RENDER_POSTPROCESS: string;
    static exportPath: string;
    private static _surpport;
    private _enable;
    private _startFram;
    private _runtimeNode;
    private _AllPathMap;
    private _pathColor;
    private _pathCount;
    private _runtimeShowPathIndex;
    _nodeList: PerforManceNode[];
    samplerFramStep: number;
    _memoryDataMap: {
        [key: string]: number;
    };
    _sp: Sprite;
    pointArray: any[];
    fpsArray: any[];
    static DrawWidth: number;
    static DrawHeight: number;
    static readonly StepLength: number;
    static stepLengthArrayMap: Array<Array<number>>;
    static InitLayaPerformanceInfo(): void;
    InitLayaPerformanceInfo(): void;
    set enable(value: boolean);
    get enable(): boolean;
    private _enableDataExport;
    get enableDataExport(): boolean;
    set enableDataExport(value: boolean);
    static setDataExportHost(host: string): void;
    set runtimeShowPath(path: string);
    constructor();
    getNodePathIndex(path: string): number;
    getPathInfo(): any;
    exportPerformanceFile(fromProfiler?: boolean): Byte;
    BegainSample(samplePath: string): void;
    EndSample(samplePath: string): number;
    AddMemory(memoryPath: string, size: number): void;
    setPathDataColor(path: string, color: Array<number>): void;
    resetReCordData(): void;
    exportFrontNode(ob: PerforManceNode, pathIndex: number): void;
    updatelineChart(width: number, height: number, stepLength: number, array: Array<number>, fillColor: string, style: number, drawArray: Array<number>): void;
    update(): void;
    static showMemoryData(memoryPath: string): void;
    static showFunSampleGroup(groupPath: string): void;
    showFunSampleFun(samplePath: string): void;
}
export declare class PerforManceNode {
    static _pool: Array<PerforManceNode>;
    static create(nodeNum: number): PerforManceNode;
    static revert(node: PerforManceNode): void;
    inPool: boolean;
    nodeNum: number;
    nodeStart: Array<number>;
    nodeDelty: Array<number>;
    applyCount: number;
    constructor();
    clearData(): void;
    resetData(nodeNum: number): void;
    getFunStart(index: number): void;
    getFunEnd(index: number): number;
    setMemory(index: number, value: number): void;
    getPathData(index: number): number;
}
